
test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ade  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000031c  00800060  00003ade  00003b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000019f  0080037c  0080037c  00003eae  2**0
                  ALLOC
  3 .eeprom       00000094  00810000  00810000  00003eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000140  00000000  00000000  00003f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000693  00000000  00000000  00004082  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002065  00000000  00000000  00004715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  0000677a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022e6  00000000  00000000  000072f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000095dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  000099bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001215  00000000  00000000  0000a003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_1>
       8:	0c 94 27 10 	jmp	0x204e	; 0x204e <__vector_2>
       c:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_13>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 31       	cpi	r26, 0x1B	; 27
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
      8a:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_init>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Fonction permettant d'initialiser le USART.
**************************************************************************************************************/
void USART_init(unsigned long bauds) 
{
      92:	9b 01       	movw	r18, r22
      94:	ac 01       	movw	r20, r24
	unsigned int ubrr;
	
	/** Calcul des valeurs à appliquer à UBRR afin d'atteindre le nombre de bauds voulues */
	ubrr=(unsigned short)((F_CPU / (bauds * 8l)) - 1);
      96:	83 e0       	ldi	r24, 0x03	; 3
      98:	22 0f       	add	r18, r18
      9a:	33 1f       	adc	r19, r19
      9c:	44 1f       	adc	r20, r20
      9e:	55 1f       	adc	r21, r21
      a0:	8a 95       	dec	r24
      a2:	d1 f7       	brne	.-12     	; 0x98 <USART_init+0x6>
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	70 e8       	ldi	r23, 0x80	; 128
      a8:	80 e7       	ldi	r24, 0x70	; 112
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
      b0:	21 50       	subi	r18, 0x01	; 1
      b2:	30 40       	sbci	r19, 0x00	; 0
    
    /** Application des valeurs aux registres d'UBRR */
    UBRRH = (unsigned char)(ubrr>>8);
      b4:	30 bd       	out	0x20, r19	; 32
    UBRRL = (unsigned char)ubrr;
      b6:	29 b9       	out	0x09, r18	; 9

	/** Double vitesse */
    UCSRA = (1<<U2X);
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	8b b9       	out	0x0b, r24	; 11
	/** TX0 activé, RX0 activé ainsi que l'interruption sur RX0 */
    UCSRB = ((1<<RXCIE)|(1<<RXEN)|(1<<TXEN));
      bc:	88 e9       	ldi	r24, 0x98	; 152
      be:	8a b9       	out	0x0a, r24	; 10
    /** 8 bits, 1 stop bit, utilisation de UBRR */
    UCSRC = ((1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL));
      c0:	86 e8       	ldi	r24, 0x86	; 134
      c2:	80 bd       	out	0x20, r24	; 32

	/** Accrochage des fonction USART aux commandes d'STDIO.H */
	stdout = stdin = &USART_str; 		
      c4:	80 e6       	ldi	r24, 0x60	; 96
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	90 93 16 05 	sts	0x0516, r25
      cc:	80 93 15 05 	sts	0x0515, r24
      d0:	90 93 18 05 	sts	0x0518, r25
      d4:	80 93 17 05 	sts	0x0517, r24
}
      d8:	08 95       	ret

000000da <__vector_13>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Interruption sur réception de caractere sur le USART.
**************************************************************************************************************/
SIGNAL(SIG_UART_RECV) 
{
      da:	1f 92       	push	r1
      dc:	0f 92       	push	r0
      de:	0f b6       	in	r0, 0x3f	; 63
      e0:	0f 92       	push	r0
      e2:	11 24       	eor	r1, r1
      e4:	8f 93       	push	r24
      e6:	ef 93       	push	r30
      e8:	ff 93       	push	r31
	char c;

	/** Réception du caractère dans le tampon de réception */	
	c = UDR;
      ea:	8c b1       	in	r24, 0x0c	; 12

	tampon_rx[rx_in & (NB_TAMPON_RX-1)] = c;
      ec:	e0 91 bf 03 	lds	r30, 0x03BF
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	ef 71       	andi	r30, 0x1F	; 31
      f4:	f0 70       	andi	r31, 0x00	; 0
      f6:	e3 56       	subi	r30, 0x63	; 99
      f8:	fc 4f       	sbci	r31, 0xFC	; 252
      fa:	80 83       	st	Z, r24
	rx_in++;
      fc:	80 91 bf 03 	lds	r24, 0x03BF
     100:	8f 5f       	subi	r24, 0xFF	; 255
     102:	80 93 bf 03 	sts	0x03BF, r24
}
     106:	ff 91       	pop	r31
     108:	ef 91       	pop	r30
     10a:	8f 91       	pop	r24
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <__vector_14>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Interruption sur fin de transmission du USART.
**************************************************************************************************************/
SIGNAL(SIG_UART_DATA) 
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	8f 93       	push	r24
     122:	9f 93       	push	r25
     124:	ef 93       	push	r30
     126:	ff 93       	push	r31
	/** Si nous avons un autre caractère à transmettre dans le tampon de transmission */
	if(tx_in != tx_out) 
     128:	90 91 be 03 	lds	r25, 0x03BE
     12c:	80 91 bd 03 	lds	r24, 0x03BD
     130:	98 17       	cp	r25, r24
     132:	79 f0       	breq	.+30     	; 0x152 <__vector_14+0x3c>
	{	
		/** Transmission du caractère */
		UDR = tampon_tx[tx_out & (NB_TAMPON_TX-1)];
     134:	e0 91 bd 03 	lds	r30, 0x03BD
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	ef 71       	andi	r30, 0x1F	; 31
     13c:	f0 70       	andi	r31, 0x00	; 0
     13e:	e4 58       	subi	r30, 0x84	; 132
     140:	fc 4f       	sbci	r31, 0xFC	; 252
     142:	80 81       	ld	r24, Z
     144:	8c b9       	out	0x0c, r24	; 12
		tx_out++;		
     146:	80 91 bd 03 	lds	r24, 0x03BD
     14a:	8f 5f       	subi	r24, 0xFF	; 255
     14c:	80 93 bd 03 	sts	0x03BD, r24
     150:	01 c0       	rjmp	.+2      	; 0x154 <__vector_14+0x3e>
	}
	else 
	{
		/** Sinon, désactivation de l'interruption sur fin de transmission */
		UCSRB &= ~(1<<UDRIE);
     152:	55 98       	cbi	0x0a, 5	; 10
	}
}
     154:	ff 91       	pop	r31
     156:	ef 91       	pop	r30
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	0f 90       	pop	r0
     15e:	0f be       	out	0x3f, r0	; 63
     160:	0f 90       	pop	r0
     162:	1f 90       	pop	r1
     164:	18 95       	reti

00000166 <USART_putchar>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Fonction permettant d'envoyer un caractère sur le USART.
**************************************************************************************************************/
int USART_putchar(char c, FILE *unused)
{
     166:	48 2f       	mov	r20, r24
	/** Attendre que le tampon de transmission se vide */
	while((NB_TAMPON_TX - (char)(tx_in - tx_out)) <= 2);
     168:	20 e2       	ldi	r18, 0x20	; 32
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	80 91 be 03 	lds	r24, 0x03BE
     170:	90 91 bd 03 	lds	r25, 0x03BD
     174:	89 1b       	sub	r24, r25
     176:	b9 01       	movw	r22, r18
     178:	68 1b       	sub	r22, r24
     17a:	71 09       	sbc	r23, r1
     17c:	63 30       	cpi	r22, 0x03	; 3
     17e:	71 05       	cpc	r23, r1
     180:	ac f3       	brlt	.-22     	; 0x16c <USART_putchar+0x6>
	
	/** Entrée des caractères à transmettre dans le tampon de transmission */
	tampon_tx[tx_in & (NB_TAMPON_TX-1)] = c;
     182:	e0 91 be 03 	lds	r30, 0x03BE
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	ef 71       	andi	r30, 0x1F	; 31
     18a:	f0 70       	andi	r31, 0x00	; 0
     18c:	e4 58       	subi	r30, 0x84	; 132
     18e:	fc 4f       	sbci	r31, 0xFC	; 252
     190:	40 83       	st	Z, r20
	tx_in++;
     192:	80 91 be 03 	lds	r24, 0x03BE
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 be 03 	sts	0x03BE, r24
	
	/** Activer l'interruption sur fin de transmission */
	UCSRB |= (1<<UDRIE);			// Enable UDR empty interrupt
     19c:	55 9a       	sbi	0x0a, 5	; 10

	return(0);
}
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	08 95       	ret

000001a4 <USART_getchar>:
int USART_getchar(FILE *unused)
{
	char c;

	/** Attendre qu'il y ait quelque chose dans le tampon de réception */
	while((char)(rx_in - rx_out) == 0);
     1a4:	90 91 bf 03 	lds	r25, 0x03BF
     1a8:	80 91 9c 03 	lds	r24, 0x039C
     1ac:	98 17       	cp	r25, r24
     1ae:	d1 f3       	breq	.-12     	; 0x1a4 <USART_getchar>
	
	/** Réception du caractère à partir du tampon de réception */
	c = tampon_rx[rx_out & (NB_TAMPON_TX-1)];
     1b0:	e0 91 9c 03 	lds	r30, 0x039C
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	ef 71       	andi	r30, 0x1F	; 31
     1b8:	f0 70       	andi	r31, 0x00	; 0
     1ba:	e3 56       	subi	r30, 0x63	; 99
     1bc:	fc 4f       	sbci	r31, 0xFC	; 252
     1be:	80 81       	ld	r24, Z
	rx_out++;
     1c0:	90 91 9c 03 	lds	r25, 0x039C
     1c4:	9f 5f       	subi	r25, 0xFF	; 255
     1c6:	90 93 9c 03 	sts	0x039C, r25
			
	return((int)c);
}
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	08 95       	ret

000001ce <write_mag_i2ceeprom>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Routine qui écrit la chaine de caractères mag en I2CEEPROM
**************************************************************************************************************/
void write_mag_i2ceeprom(void)
{
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	df 93       	push	r29
     1d4:	cf 93       	push	r28
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	e6 97       	sbiw	r28, 0x36	; 54
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
		unsigned int i;
		unsigned int crc;
		char rec[50];
		char retval;

		RTC_get_time();											/* Lecture de l'heure actuelle */
     1e6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>

		rec[0]=49;												/* Prochaine chaine dans 49 cars. */
     1ea:	81 e3       	ldi	r24, 0x31	; 49
     1ec:	8d 83       	std	Y+5, r24	; 0x05
		rec[1]=48;												/* Nombre de bytes de la chaine */
     1ee:	80 e3       	ldi	r24, 0x30	; 48
     1f0:	8e 83       	std	Y+6, r24	; 0x06
		rec[2]=(unsigned char)((heure_actuelle.annee)-2000);	/* Année en byte */
     1f2:	80 91 c6 03 	lds	r24, 0x03C6
     1f6:	80 5d       	subi	r24, 0xD0	; 208
     1f8:	8f 83       	std	Y+7, r24	; 0x07
		rec[3]=heure_actuelle.mois;								/* Mois en byte */
     1fa:	80 91 c8 03 	lds	r24, 0x03C8
     1fe:	88 87       	std	Y+8, r24	; 0x08
		rec[4]=heure_actuelle.jour;								/* Jour en byte */
     200:	80 91 c9 03 	lds	r24, 0x03C9
     204:	89 87       	std	Y+9, r24	; 0x09
		rec[5]=heure_actuelle.heure;							/* Heure en byte */
     206:	80 91 cb 03 	lds	r24, 0x03CB
     20a:	8a 87       	std	Y+10, r24	; 0x0a
		rec[6]=heure_actuelle.minute;							/* Minute en byte */
     20c:	80 91 cc 03 	lds	r24, 0x03CC
     210:	8b 87       	std	Y+11, r24	; 0x0b
		rec[7]=heure_actuelle.seconde;							/* Seconde en byte */
     212:	80 91 cd 03 	lds	r24, 0x03CD
     216:	8c 87       	std	Y+12, r24	; 0x0c

		rec[8]=0x00;											/* Type Carte */
     218:	1d 86       	std	Y+13, r1	; 0x0d
     21a:	de 01       	movw	r26, r28
     21c:	1e 96       	adiw	r26, 0x0e	; 14
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0

		i=0;

		do		/* Copie du nombre de byte dans le tampon de carte */
		{
			rec[9+i]=MAGTEK_str[i];
     222:	f9 01       	movw	r30, r18
     224:	e2 53       	subi	r30, 0x32	; 50
     226:	fb 4f       	sbci	r31, 0xFB	; 251
     228:	80 81       	ld	r24, Z
     22a:	8c 93       	st	X, r24
			i++;
     22c:	2f 5f       	subi	r18, 0xFF	; 255
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		while(MAGTEK_str[i]!=0x00 && i<38);
     230:	f9 01       	movw	r30, r18
     232:	e2 53       	subi	r30, 0x32	; 50
     234:	fb 4f       	sbci	r31, 0xFB	; 251
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	21 f0       	breq	.+8      	; 0x244 <write_mag_i2ceeprom+0x76>
     23c:	11 96       	adiw	r26, 0x01	; 1
     23e:	26 32       	cpi	r18, 0x26	; 38
     240:	31 05       	cpc	r19, r1
     242:	79 f7       	brne	.-34     	; 0x222 <write_mag_i2ceeprom+0x54>

		i=i+9;						/* Ajout des 8 bytes pour l'entête + 1 byte pour le pointeur */
     244:	f9 01       	movw	r30, r18
     246:	39 96       	adiw	r30, 0x09	; 9
     248:	de 01       	movw	r26, r28
     24a:	15 96       	adiw	r26, 0x05	; 5
     24c:	ae 0f       	add	r26, r30
     24e:	bf 1f       	adc	r27, r31
     250:	02 c0       	rjmp	.+4      	; 0x256 <write_mag_i2ceeprom+0x88>
	
		while(i<49)					/* Mettre des 0 comme "padding" */
		{
			rec[i]=0x00;
     252:	1d 92       	st	X+, r1
			i++;
     254:	31 96       	adiw	r30, 0x01	; 1
		}
		while(MAGTEK_str[i]!=0x00 && i<38);

		i=i+9;						/* Ajout des 8 bytes pour l'entête + 1 byte pour le pointeur */
	
		while(i<49)					/* Mettre des 0 comme "padding" */
     256:	e1 33       	cpi	r30, 0x31	; 49
     258:	f1 05       	cpc	r31, r1
     25a:	d8 f3       	brcs	.-10     	; 0x252 <write_mag_i2ceeprom+0x84>
		{
			rec[i]=0x00;
			i++;
		}

		crc=crcccitt(0, &rec[1], 46);	/* Calcul du CRC 16 (CCITT) de la chaine */
     25c:	8e 01       	movw	r16, r28
     25e:	0a 5f       	subi	r16, 0xFA	; 250
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	b8 01       	movw	r22, r16
     268:	2e e2       	ldi	r18, 0x2E	; 46
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	40 e0       	ldi	r20, 0x00	; 0
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	0e 94 c7 12 	call	0x258e	; 0x258e <crcccitt>

		rec[47]=(unsigned char)(crc & 0x00FF);
     274:	8c ab       	std	Y+52, r24	; 0x34
		rec[48]=(unsigned char)((crc & 0xFF00)>>8);
     276:	9d ab       	std	Y+53, r25	; 0x35

		rec[49]=0xFF;				/* Terminaison de la liste par 0xFF */
     278:	8f ef       	ldi	r24, 0xFF	; 255
     27a:	8e ab       	std	Y+54, r24	; 0x36

		/** Encryption de la chaine */
		rijndael('c', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
     27c:	83 e6       	ldi	r24, 0x63	; 99
     27e:	b8 01       	movw	r22, r16
     280:	4f ec       	ldi	r20, 0xCF	; 207
     282:	53 e0       	ldi	r21, 0x03	; 3
     284:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
		rijndael('c', (unsigned char *)&rec[17], (unsigned char *)&crypto_key[16]);
     288:	83 e6       	ldi	r24, 0x63	; 99
     28a:	be 01       	movw	r22, r28
     28c:	6a 5e       	subi	r22, 0xEA	; 234
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	4f ed       	ldi	r20, 0xDF	; 223
     292:	53 e0       	ldi	r21, 0x03	; 3
     294:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
		rijndael('c', (unsigned char *)&rec[33], (unsigned char *)&crypto_key[0]);
     298:	83 e6       	ldi	r24, 0x63	; 99
     29a:	be 01       	movw	r22, r28
     29c:	6a 5d       	subi	r22, 0xDA	; 218
     29e:	7f 4f       	sbci	r23, 0xFF	; 255
     2a0:	4f ec       	ldi	r20, 0xCF	; 207
     2a2:	53 e0       	ldi	r21, 0x03	; 3
     2a4:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>

		read_eeptr(&adr);			/* Lecture de l'adresse de fin de liste */
     2a8:	ce 01       	movw	r24, r28
     2aa:	01 96       	adiw	r24, 0x01	; 1
     2ac:	0e 94 1e 13 	call	0x263c	; 0x263c <read_eeptr>

		retval=I2CEEPROM_write(adr,50,rec);	/* Écriture de la chaine */
     2b0:	69 81       	ldd	r22, Y+1	; 0x01
     2b2:	7a 81       	ldd	r23, Y+2	; 0x02
     2b4:	8b 81       	ldd	r24, Y+3	; 0x03
     2b6:	9c 81       	ldd	r25, Y+4	; 0x04
     2b8:	42 e3       	ldi	r20, 0x32	; 50
     2ba:	50 e0       	ldi	r21, 0x00	; 0
     2bc:	9e 01       	movw	r18, r28
     2be:	2b 5f       	subi	r18, 0xFB	; 251
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2CEEPROM_write>
		
		if(retval!=0)
     2c6:	88 23       	and	r24, r24
     2c8:	51 f0       	breq	.+20     	; 0x2de <write_mag_i2ceeprom+0x110>
			write_eeptr(adr+49);			/* Ajuster le pointeur d'ajout de chaine dans la liste */
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	7a 81       	ldd	r23, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	6f 5c       	subi	r22, 0xCF	; 207
     2d4:	7f 4f       	sbci	r23, 0xFF	; 255
     2d6:	8f 4f       	sbci	r24, 0xFF	; 255
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	0e 94 04 13 	call	0x2608	; 0x2608 <write_eeptr>
}
     2de:	e6 96       	adiw	r28, 0x36	; 54
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	cf 91       	pop	r28
     2ec:	df 91       	pop	r29
     2ee:	1f 91       	pop	r17
     2f0:	0f 91       	pop	r16
     2f2:	08 95       	ret

000002f4 <write_kb_i2ceeprom>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Routine qui écrit la chaine de caractères clavier en I2CEEPROM
**************************************************************************************************************/
void write_kb_i2ceeprom(void)
{
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	df 93       	push	r29
     2fa:	cf 93       	push	r28
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	a6 97       	sbiw	r28, 0x26	; 38
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
		unsigned int i;
		unsigned int crc;
		char rec[34];
		char retval;

		RTC_get_time();											/* Lecture de l'heure actuelle */
     30c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>

		rec[0]=33;												/* Prochaine chaine dans 33 cars. */
     310:	81 e2       	ldi	r24, 0x21	; 33
     312:	8d 83       	std	Y+5, r24	; 0x05
		rec[1]=32;												/* Nombre de bytes de la chaine */
     314:	80 e2       	ldi	r24, 0x20	; 32
     316:	8e 83       	std	Y+6, r24	; 0x06
		rec[2]=(unsigned char)((heure_actuelle.annee)-2000);	/* Année en byte */
     318:	80 91 c6 03 	lds	r24, 0x03C6
     31c:	80 5d       	subi	r24, 0xD0	; 208
     31e:	8f 83       	std	Y+7, r24	; 0x07
		rec[3]=heure_actuelle.mois;								/* Mois en byte */
     320:	80 91 c8 03 	lds	r24, 0x03C8
     324:	88 87       	std	Y+8, r24	; 0x08
		rec[4]=heure_actuelle.jour;								/* Jour en byte */
     326:	80 91 c9 03 	lds	r24, 0x03C9
     32a:	89 87       	std	Y+9, r24	; 0x09
		rec[5]=heure_actuelle.heure;							/* Heure en byte */
     32c:	80 91 cb 03 	lds	r24, 0x03CB
     330:	8a 87       	std	Y+10, r24	; 0x0a
		rec[6]=heure_actuelle.minute;							/* Minute en byte */
     332:	80 91 cc 03 	lds	r24, 0x03CC
     336:	8b 87       	std	Y+11, r24	; 0x0b
		rec[7]=heure_actuelle.seconde;							/* Seconde en byte */
     338:	80 91 cd 03 	lds	r24, 0x03CD
     33c:	8c 87       	std	Y+12, r24	; 0x0c

		rec[8]=0x01;											/* Type Clavier */
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	8d 87       	std	Y+13, r24	; 0x0d
     342:	de 01       	movw	r26, r28
     344:	1e 96       	adiw	r26, 0x0e	; 14
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	07 c0       	rjmp	.+14     	; 0x35a <write_kb_i2ceeprom+0x66>

		for(i=0;i<KB_char_cnt && i<12;i++)	/* Copie du nombre de byte dans le tampon de clavier */
			rec[9+i]=KB_buf[i];
     34c:	f9 01       	movw	r30, r18
     34e:	e0 51       	subi	r30, 0x10	; 16
     350:	fc 4f       	sbci	r31, 0xFC	; 252
     352:	80 81       	ld	r24, Z
     354:	8d 93       	st	X+, r24
		rec[6]=heure_actuelle.minute;							/* Minute en byte */
		rec[7]=heure_actuelle.seconde;							/* Seconde en byte */

		rec[8]=0x01;											/* Type Clavier */

		for(i=0;i<KB_char_cnt && i<12;i++)	/* Copie du nombre de byte dans le tampon de clavier */
     356:	2f 5f       	subi	r18, 0xFF	; 255
     358:	3f 4f       	sbci	r19, 0xFF	; 255
     35a:	80 91 f7 04 	lds	r24, 0x04F7
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	28 17       	cp	r18, r24
     362:	39 07       	cpc	r19, r25
     364:	18 f4       	brcc	.+6      	; 0x36c <write_kb_i2ceeprom+0x78>
     366:	2c 30       	cpi	r18, 0x0C	; 12
     368:	31 05       	cpc	r19, r1
     36a:	81 f7       	brne	.-32     	; 0x34c <write_kb_i2ceeprom+0x58>
			rec[9+i]=KB_buf[i];

		i=i+9;						/* Ajout des 8 bytes pour l'entête + 1 byte pour le pointeur  */
     36c:	f9 01       	movw	r30, r18
     36e:	39 96       	adiw	r30, 0x09	; 9
     370:	de 01       	movw	r26, r28
     372:	15 96       	adiw	r26, 0x05	; 5
     374:	ae 0f       	add	r26, r30
     376:	bf 1f       	adc	r27, r31
     378:	02 c0       	rjmp	.+4      	; 0x37e <write_kb_i2ceeprom+0x8a>
	
		while(i<33)					/* Mettre des 0 comme "padding" */
		{
			rec[i]=0x00;
     37a:	1d 92       	st	X+, r1
			i++;
     37c:	31 96       	adiw	r30, 0x01	; 1
		for(i=0;i<KB_char_cnt && i<12;i++)	/* Copie du nombre de byte dans le tampon de clavier */
			rec[9+i]=KB_buf[i];

		i=i+9;						/* Ajout des 8 bytes pour l'entête + 1 byte pour le pointeur  */
	
		while(i<33)					/* Mettre des 0 comme "padding" */
     37e:	e1 32       	cpi	r30, 0x21	; 33
     380:	f1 05       	cpc	r31, r1
     382:	d8 f3       	brcs	.-10     	; 0x37a <write_kb_i2ceeprom+0x86>
		{
			rec[i]=0x00;
			i++;
		}

		crc=crcccitt(0, &rec[1], 30);	/* Calcul du CRC 16 (CCITT) de la chaine */
     384:	8e 01       	movw	r16, r28
     386:	0a 5f       	subi	r16, 0xFA	; 250
     388:	1f 4f       	sbci	r17, 0xFF	; 255
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	b8 01       	movw	r22, r16
     390:	2e e1       	ldi	r18, 0x1E	; 30
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	0e 94 c7 12 	call	0x258e	; 0x258e <crcccitt>

		rec[31]=(unsigned char)(crc & 0x00FF);
     39c:	8c a3       	std	Y+36, r24	; 0x24
		rec[32]=(unsigned char)((crc & 0xFF00)>>8);
     39e:	9d a3       	std	Y+37, r25	; 0x25

		rec[33]=0xFF;				/* Terminaison de la liste par 0xFF */
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	8e a3       	std	Y+38, r24	; 0x26

		/** Encryption de la chaine */
		rijndael('c', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
     3a4:	83 e6       	ldi	r24, 0x63	; 99
     3a6:	b8 01       	movw	r22, r16
     3a8:	4f ec       	ldi	r20, 0xCF	; 207
     3aa:	53 e0       	ldi	r21, 0x03	; 3
     3ac:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
		rijndael('c', (unsigned char *)&rec[17], (unsigned char *)&crypto_key[16]);
     3b0:	83 e6       	ldi	r24, 0x63	; 99
     3b2:	be 01       	movw	r22, r28
     3b4:	6a 5e       	subi	r22, 0xEA	; 234
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	4f ed       	ldi	r20, 0xDF	; 223
     3ba:	53 e0       	ldi	r21, 0x03	; 3
     3bc:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>

		read_eeptr(&adr);			/* Lecture de l'adresse de fin de liste */
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	0e 94 1e 13 	call	0x263c	; 0x263c <read_eeptr>

		retval=I2CEEPROM_write(adr,34,rec);	/* Écriture de la chaine */
     3c8:	69 81       	ldd	r22, Y+1	; 0x01
     3ca:	7a 81       	ldd	r23, Y+2	; 0x02
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	42 e2       	ldi	r20, 0x22	; 34
     3d2:	50 e0       	ldi	r21, 0x00	; 0
     3d4:	9e 01       	movw	r18, r28
     3d6:	2b 5f       	subi	r18, 0xFB	; 251
     3d8:	3f 4f       	sbci	r19, 0xFF	; 255
     3da:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2CEEPROM_write>

		if(retval!=0)
     3de:	88 23       	and	r24, r24
     3e0:	51 f0       	breq	.+20     	; 0x3f6 <write_kb_i2ceeprom+0x102>
			write_eeptr(adr+33);			/* Ajuster le pointeur d'ajout de chaine dans la liste  */
     3e2:	69 81       	ldd	r22, Y+1	; 0x01
     3e4:	7a 81       	ldd	r23, Y+2	; 0x02
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	9c 81       	ldd	r25, Y+4	; 0x04
     3ea:	6f 5d       	subi	r22, 0xDF	; 223
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	8f 4f       	sbci	r24, 0xFF	; 255
     3f0:	9f 4f       	sbci	r25, 0xFF	; 255
     3f2:	0e 94 04 13 	call	0x2608	; 0x2608 <write_eeptr>

}
     3f6:	a6 96       	adiw	r28, 0x26	; 38
     3f8:	0f b6       	in	r0, 0x3f	; 63
     3fa:	f8 94       	cli
     3fc:	de bf       	out	0x3e, r29	; 62
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	cd bf       	out	0x3d, r28	; 61
     402:	cf 91       	pop	r28
     404:	df 91       	pop	r29
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	08 95       	ret

0000040c <__vector_1>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Routine invoquée aux 1/4096 secondes (4KHz)
**************************************************************************************************************/
SIGNAL(SIG_INTERRUPT0)
{
     40c:	1f 92       	push	r1
     40e:	0f 92       	push	r0
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	0f 92       	push	r0
     414:	11 24       	eor	r1, r1
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	ef 93       	push	r30
     42c:	ff 93       	push	r31
	if(delai) /* Décrémentation de la valeur delai */
     42e:	80 91 f9 04 	lds	r24, 0x04F9
     432:	90 91 fa 04 	lds	r25, 0x04FA
     436:	89 2b       	or	r24, r25
     438:	49 f0       	breq	.+18     	; 0x44c <__vector_1+0x40>
	{
		delai--;
     43a:	80 91 f9 04 	lds	r24, 0x04F9
     43e:	90 91 fa 04 	lds	r25, 0x04FA
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	90 93 fa 04 	sts	0x04FA, r25
     448:	80 93 f9 04 	sts	0x04F9, r24
	}

    if(KB_timer) /* Décrémentation du timeout timer pour le clavier */
     44c:	80 91 cc 04 	lds	r24, 0x04CC
     450:	90 91 cd 04 	lds	r25, 0x04CD
     454:	89 2b       	or	r24, r25
     456:	51 f0       	breq	.+20     	; 0x46c <__vector_1+0x60>
    {
        KB_timer--;
     458:	80 91 cc 04 	lds	r24, 0x04CC
     45c:	90 91 cd 04 	lds	r25, 0x04CD
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	90 93 cd 04 	sts	0x04CD, r25
     466:	80 93 cc 04 	sts	0x04CC, r24
     46a:	0e c0       	rjmp	.+28     	; 0x488 <__vector_1+0x7c>
    }
	else if(KB_in_read)
     46c:	80 91 fc 04 	lds	r24, 0x04FC
     470:	88 23       	and	r24, r24
     472:	51 f0       	breq	.+20     	; 0x488 <__vector_1+0x7c>
	{
		if(KB_char_cnt>3)
     474:	80 91 f7 04 	lds	r24, 0x04F7
     478:	84 30       	cpi	r24, 0x04	; 4
     47a:	10 f0       	brcs	.+4      	; 0x480 <__vector_1+0x74>
		{
			write_kb_i2ceeprom();
     47c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <write_kb_i2ceeprom>
		}

		KB_char_cnt=0;
     480:	10 92 f7 04 	sts	0x04F7, r1
		KB_in_read=FALSE;
     484:	10 92 fc 04 	sts	0x04FC, r1
	}

	if((kb_scan_slacker%KB_SLACKER)==0)
     488:	80 91 fd 04 	lds	r24, 0x04FD
     48c:	90 91 fe 04 	lds	r25, 0x04FE
     490:	8f 70       	andi	r24, 0x0F	; 15
     492:	90 70       	andi	r25, 0x00	; 0
     494:	89 2b       	or	r24, r25
     496:	09 f0       	breq	.+2      	; 0x49a <__vector_1+0x8e>
     498:	5d c0       	rjmp	.+186    	; 0x554 <__vector_1+0x148>
	{
		KB_int_proc(); /* Procédure de lecture du clavier 4x4 */
     49a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <KB_int_proc>

		if(KB_ready) /* Si nous avons une touche... */
     49e:	80 91 01 05 	lds	r24, 0x0501
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__vector_1+0x9c>
     4a6:	56 c0       	rjmp	.+172    	; 0x554 <__vector_1+0x148>
		{
			if(kbdebug) // Si en mode de deboggage clavier
     4a8:	80 91 fb 04 	lds	r24, 0x04FB
     4ac:	88 23       	and	r24, r24
     4ae:	39 f0       	breq	.+14     	; 0x4be <__vector_1+0xb2>
			{
				USART_putchar(KB_key, NULL);
     4b0:	80 91 c9 04 	lds	r24, 0x04C9
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putchar>
     4bc:	49 c0       	rjmp	.+146    	; 0x550 <__vector_1+0x144>
				KB_ready=0; /* Redecente du flag de nouvelle touche */
			}
			else
			{
				/* Ajout de la clef dans la chaine */
				if(KB_char_cnt<(KB_CHARS-1))
     4be:	80 91 f7 04 	lds	r24, 0x04F7
     4c2:	8f 30       	cpi	r24, 0x0F	; 15
     4c4:	b0 f4       	brcc	.+44     	; 0x4f2 <__vector_1+0xe6>
				{
					KB_buf[KB_char_cnt]=KB_key;
     4c6:	e0 91 f7 04 	lds	r30, 0x04F7
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 91 c9 04 	lds	r24, 0x04C9
     4d0:	e0 51       	subi	r30, 0x10	; 16
     4d2:	fc 4f       	sbci	r31, 0xFC	; 252
     4d4:	80 83       	st	Z, r24
					KB_char_cnt++;
     4d6:	80 91 f7 04 	lds	r24, 0x04F7
     4da:	8f 5f       	subi	r24, 0xFF	; 255
     4dc:	80 93 f7 04 	sts	0x04F7, r24
					KB_timer=KB_TIMEOUT;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e3       	ldi	r25, 0x30	; 48
     4e4:	90 93 cd 04 	sts	0x04CD, r25
     4e8:	80 93 cc 04 	sts	0x04CC, r24
					KB_in_read=TRUE; /* Lecture active */
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 fc 04 	sts	0x04FC, r24
				}	

				/* Fonctions spéciales sur les touches */
				if(KB_char_cnt==2)
     4f2:	80 91 f7 04 	lds	r24, 0x04F7
     4f6:	82 30       	cpi	r24, 0x02	; 2
     4f8:	c9 f4       	brne	.+50     	; 0x52c <__vector_1+0x120>
				{
					KB_buf[2]=0; /* Mettre une terminaison au bout de la chaine */		
     4fa:	10 92 f2 03 	sts	0x03F2, r1

					if(!stringcomp((char *)KB_buf,"0A")) /* Code de remise à zéro */
     4fe:	80 ef       	ldi	r24, 0xF0	; 240
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	6e e6       	ldi	r22, 0x6E	; 110
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     50a:	89 2b       	or	r24, r25
     50c:	11 f4       	brne	.+4      	; 0x512 <__vector_1+0x106>
					{
	   		         	WDTCR = 0x18;
     50e:	88 e1       	ldi	r24, 0x18	; 24
     510:	81 bd       	out	0x21, r24	; 33
					}
            
					if(!stringcomp((char *)KB_buf,enkey)) /* Code d'activation du bluetooth */	/*************/
     512:	80 ef       	ldi	r24, 0xF0	; 240
     514:	93 e0       	ldi	r25, 0x03	; 3
     516:	62 ec       	ldi	r22, 0xC2	; 194
     518:	73 e0       	ldi	r23, 0x03	; 3
     51a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     51e:	89 2b       	or	r24, r25
     520:	29 f4       	brne	.+10     	; 0x52c <__vector_1+0x120>
   		        	{

						/* Activation bluetooth */
						PORTC &= ~((1<<5));
     522:	ad 98       	cbi	0x15, 5	; 21

						KB_in_read=FALSE;
     524:	10 92 fc 04 	sts	0x04FC, r1
						KB_char_cnt=0;
     528:	10 92 f7 04 	sts	0x04F7, r1
   	       			}
				}

				/* Si A ou K a été appuyé */		
				if(KB_key=='A' || KB_key=='K')
     52c:	80 91 c9 04 	lds	r24, 0x04C9
     530:	81 34       	cpi	r24, 0x41	; 65
     532:	21 f0       	breq	.+8      	; 0x53c <__vector_1+0x130>
     534:	80 91 c9 04 	lds	r24, 0x04C9
     538:	8b 34       	cpi	r24, 0x4B	; 75
     53a:	51 f4       	brne	.+20     	; 0x550 <__vector_1+0x144>
				{
					if(KB_char_cnt>3)
     53c:	80 91 f7 04 	lds	r24, 0x04F7
     540:	84 30       	cpi	r24, 0x04	; 4
     542:	10 f0       	brcs	.+4      	; 0x548 <__vector_1+0x13c>
					{
						write_kb_i2ceeprom();
     544:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <write_kb_i2ceeprom>
					}

					KB_char_cnt=0;
     548:	10 92 f7 04 	sts	0x04F7, r1
					KB_in_read=FALSE;
     54c:	10 92 fc 04 	sts	0x04FC, r1
				}	

				KB_ready=0; /* Redecente du flag de nouvelle touche */
     550:	10 92 01 05 	sts	0x0501, r1
			}
		}
	}

	kb_scan_slacker++;
     554:	80 91 fd 04 	lds	r24, 0x04FD
     558:	90 91 fe 04 	lds	r25, 0x04FE
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	90 93 fe 04 	sts	0x04FE, r25
     562:	80 93 fd 04 	sts	0x04FD, r24

	if(MAGTEK_re==1) /* Si nous avons une lecture de magnétique */
     566:	80 91 13 05 	lds	r24, 0x0513
     56a:	90 91 14 05 	lds	r25, 0x0514
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	31 f4       	brne	.+12     	; 0x57e <__vector_1+0x172>
	{
		write_mag_i2ceeprom();	
     572:	0e 94 e7 00 	call	0x1ce	; 0x1ce <write_mag_i2ceeprom>
		MAGTEK_re=0;
     576:	10 92 14 05 	sts	0x0514, r1
     57a:	10 92 13 05 	sts	0x0513, r1
	}
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <main>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Fonction pricipale de la console.
**************************************************************************************************************/
int main(void) 
{
     5a0:	2f 92       	push	r2
     5a2:	3f 92       	push	r3
     5a4:	4f 92       	push	r4
     5a6:	5f 92       	push	r5
     5a8:	6f 92       	push	r6
     5aa:	7f 92       	push	r7
     5ac:	8f 92       	push	r8
     5ae:	9f 92       	push	r9
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	df 93       	push	r29
     5c2:	cf 93       	push	r28
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	cf 59       	subi	r28, 0x9F	; 159
     5ca:	d1 40       	sbci	r29, 0x01	; 1
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
	char mode;
	char memtest[1];
	char end;

    /** Initialisation du USART à 9600 bauds */
    USART_init(9600UL);
     5d6:	60 e8       	ldi	r22, 0x80	; 128
     5d8:	75 e2       	ldi	r23, 0x25	; 37
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>

	/** Initialisation du TWI à 100Khz */
    Init_TWI(100000UL);
     5e2:	60 ea       	ldi	r22, 0xA0	; 160
     5e4:	76 e8       	ldi	r23, 0x86	; 134
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 aa 11 	call	0x2354	; 0x2354 <Init_TWI>

	/** Initialisation du ASIC de lecture de carte magnétique */
	init_MAGTEK();
     5ee:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <init_MAGTEK>

	/** Initialisation du clavier */
	KB_Init();
     5f2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <KB_Init>
	kbdebug=0;
     5f6:	10 92 fb 04 	sts	0x04FB, r1
	kb_scan_slacker=0;
     5fa:	10 92 fe 04 	sts	0x04FE, r1
     5fe:	10 92 fd 04 	sts	0x04FD, r1

	/** Initialisation du RTC */
	RTC_init();
     602:	0e 94 85 11 	call	0x230a	; 0x230a <RTC_init>

	/** Initialisation de la variable de delai */
	delai=0;
     606:	10 92 fa 04 	sts	0x04FA, r1
     60a:	10 92 f9 04 	sts	0x04F9, r1

	/** Initialisation sur front descendant de INT0 (timer sur RTC) */
	DDRD &= ~((1<<2));
     60e:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= ((1<<2));
     610:	92 9a       	sbi	0x12, 2	; 18
	MCUCR |= ((1<<ISC01));
     612:	85 b7       	in	r24, 0x35	; 53
     614:	82 60       	ori	r24, 0x02	; 2
     616:	85 bf       	out	0x35, r24	; 53
	GICR |= ((1<<INT0));
     618:	8b b7       	in	r24, 0x3b	; 59
     61a:	80 64       	ori	r24, 0x40	; 64
     61c:	8b bf       	out	0x3b, r24	; 59
   	
	sei();
     61e:	78 94       	sei

	/* Clef d'activation du bluetooth (en eeprom) */
	EEPROM_read((int)&EEPVars.E_enkey[0],3,enkey);
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	42 ec       	ldi	r20, 0xC2	; 194
     62a:	53 e0       	ldi	r21, 0x03	; 3
     62c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

	/* Mapping du clavier (en eeprom) */
	EEPROM_read((int)&EEPVars.E_key[0],16,keymap);
     630:	83 e8       	ldi	r24, 0x83	; 131
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	60 e1       	ldi	r22, 0x10	; 16
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	42 e0       	ldi	r20, 0x02	; 2
     63a:	55 e0       	ldi	r21, 0x05	; 5
     63c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

	/* Lecrture si vrai ou faux END (en eeprom) */
	EEPROM_read((int)&EEPVars.E_end,1,&end);
     640:	83 e9       	ldi	r24, 0x93	; 147
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	61 e0       	ldi	r22, 0x01	; 1
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	ae 01       	movw	r20, r28
     64a:	4e 5f       	subi	r20, 0xFE	; 254
     64c:	5f 4f       	sbci	r21, 0xFF	; 255
     64e:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

	/** Initialisation de l'entrée pour le jumper de mot de passe */
	DDRB &= ~((1<<4));
     652:	bc 98       	cbi	0x17, 4	; 23
	PORTB |= ((1<<4));
     654:	c4 9a       	sbi	0x18, 4	; 24

	/** Initialisation de la sortie pour le contrôle du bluetooth */
	DDRC |= ((1<<5));
     656:	a5 9a       	sbi	0x14, 5	; 20
	PORTC &= ~((1<<5));
     658:	ad 98       	cbi	0x15, 5	; 21


	/** Lecture du statut du eeprom */
	EEPROM_read((int)&EEPVars.E_memtest,1,memtest);
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	61 e0       	ldi	r22, 0x01	; 1
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	8e 01       	movw	r16, r28
     664:	0f 5f       	subi	r16, 0xFF	; 255
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	a8 01       	movw	r20, r16
     66a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

	// Si l'eeprom a été programmé pour la première fois
	if(memtest[0]=='!')
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	81 32       	cpi	r24, 0x21	; 33
     672:	09 f0       	breq	.+2      	; 0x676 <main+0xd6>
     674:	72 c0       	rjmp	.+228    	; 0x75a <main+0x1ba>
	{
		// Variable drapeau qui dit que le module est correctement initialisé
		EEPROM_write((int)&EEPVars.E_memtest,1,"$");
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	61 e0       	ldi	r22, 0x01	; 1
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	41 e7       	ldi	r20, 0x71	; 113
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>

		// Pointeur mémoire vide 
		write_eeptr(0);
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 04 13 	call	0x2608	; 0x2608 <write_eeptr>

		memtest[0]=0xFF;
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	89 83       	std	Y+1, r24	; 0x01
		I2CEEPROM_write(0,1,memtest);
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	50 e0       	ldi	r21, 0x00	; 0
     6a2:	98 01       	movw	r18, r16
     6a4:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2CEEPROM_write>

		// Le bluetooth est neuf, on doit le programmer
		printf("+++\n\r");
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <main+0x10a>
     6aa:	83 e7       	ldi	r24, 0x73	; 115
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	ad b7       	in	r26, 0x3d	; 61
     6b0:	be b7       	in	r27, 0x3e	; 62
     6b2:	12 96       	adiw	r26, 0x02	; 2
     6b4:	9c 93       	st	X, r25
     6b6:	8e 93       	st	-X, r24
     6b8:	11 97       	sbiw	r26, 0x01	; 1
     6ba:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSW24,0,0,0,0\n\r");
     6be:	89 e7       	ldi	r24, 0x79	; 121
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	ed b7       	in	r30, 0x3d	; 61
     6c4:	fe b7       	in	r31, 0x3e	; 62
     6c6:	92 83       	std	Z+2, r25	; 0x02
     6c8:	81 83       	std	Z+1, r24	; 0x01
     6ca:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSW20,472,0,0,1\n\r");
     6ce:	8a e8       	ldi	r24, 0x8A	; 138
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	ad b7       	in	r26, 0x3d	; 61
     6d4:	be b7       	in	r27, 0x3e	; 62
     6d6:	12 96       	adiw	r26, 0x02	; 2
     6d8:	9c 93       	st	X, r25
     6da:	8e 93       	st	-X, r24
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSN,console\n\r");
     6e2:	8d e9       	ldi	r24, 0x9D	; 157
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	ed b7       	in	r30, 0x3d	; 61
     6e8:	fe b7       	in	r31, 0x3e	; 62
     6ea:	92 83       	std	Z+2, r25	; 0x02
     6ec:	81 83       	std	Z+1, r24	; 0x01
     6ee:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSPF,15,+\n\r");
     6f2:	8c ea       	ldi	r24, 0xAC	; 172
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	ad b7       	in	r26, 0x3d	; 61
     6f8:	be b7       	in	r27, 0x3e	; 62
     6fa:	12 96       	adiw	r26, 0x02	; 2
     6fc:	9c 93       	st	X, r25
     6fe:	8e 93       	st	-X, r24
     700:	11 97       	sbiw	r26, 0x01	; 1
     702:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSW25,0,0,0,0\n\r");
     706:	89 eb       	ldi	r24, 0xB9	; 185
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	ed b7       	in	r30, 0x3d	; 61
     70c:	fe b7       	in	r31, 0x3e	; 62
     70e:	92 83       	std	Z+2, r25	; 0x02
     710:	81 83       	std	Z+1, r24	; 0x01
     712:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSW27,300\n\r");
     716:	8a ec       	ldi	r24, 0xCA	; 202
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	ad b7       	in	r26, 0x3d	; 61
     71c:	be b7       	in	r27, 0x3e	; 62
     71e:	12 96       	adiw	r26, 0x02	; 2
     720:	9c 93       	st	X, r25
     722:	8e 93       	st	-X, r24
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATSW24,2,0,0,0\n\r");
     72a:	87 ed       	ldi	r24, 0xD7	; 215
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	ed b7       	in	r30, 0x3d	; 61
     730:	fe b7       	in	r31, 0x3e	; 62
     732:	92 83       	std	Z+2, r25	; 0x02
     734:	81 83       	std	Z+1, r24	; 0x01
     736:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
		printf("ATURST\n\r");
     73a:	88 ee       	ldi	r24, 0xE8	; 232
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	ad b7       	in	r26, 0x3d	; 61
     740:	be b7       	in	r27, 0x3e	; 62
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	9c 93       	st	X, r25
     746:	8e 93       	st	-X, r24
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>

		wait(12288);// Attendre 3 secondes
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e3       	ldi	r25, 0x30	; 48
     756:	0e 94 bc 12 	call	0x2578	; 0x2578 <wait>
	}

	// Initialisation du USART à 115200 bauds
    USART_init(115200UL);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	72 ec       	ldi	r23, 0xC2	; 194
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 49 00 	call	0x92	; 0x92 <USART_init>

	// Lecture du statut du eeprom
	EEPROM_read((int)&EEPVars.E_memtest,1,memtest);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	ae 01       	movw	r20, r28
     770:	4f 5f       	subi	r20, 0xFF	; 255
     772:	5f 4f       	sbci	r21, 0xFF	; 255
     774:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

	// S'il n'y a encore rien de valide, erreur!
	if(memtest[0]!='$')
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	84 32       	cpi	r24, 0x24	; 36
     77c:	61 f0       	breq	.+24     	; 0x796 <main+0x1f6>
	{
		for(;;)
		{
			printf("ERROR, EEPROM MISSING!\n\r");
     77e:	01 ef       	ldi	r16, 0xF1	; 241
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	00 d0       	rcall	.+0      	; 0x784 <main+0x1e4>
     784:	ed b7       	in	r30, 0x3d	; 61
     786:	fe b7       	in	r31, 0x3e	; 62
     788:	12 83       	std	Z+2, r17	; 0x02
     78a:	01 83       	std	Z+1, r16	; 0x01
     78c:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	f6 cf       	rjmp	.-20     	; 0x782 <main+0x1e2>
		}	
	}
	
	/** Effacer l'écran en ANSI */
	printf("\e[2J");
     796:	00 d0       	rcall	.+0      	; 0x798 <main+0x1f8>
     798:	8a e0       	ldi	r24, 0x0A	; 10
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	ad b7       	in	r26, 0x3d	; 61
     79e:	be b7       	in	r27, 0x3e	; 62
     7a0:	12 96       	adiw	r26, 0x02	; 2
     7a2:	9c 93       	st	X, r25
     7a4:	8e 93       	st	-X, r24
     7a6:	11 97       	sbiw	r26, 0x01	; 1
     7a8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>

	/** Initialise la console en mode déconnecté */
	mode=LOGOFF;

	/** Désactivation bluetooth */
	PORTC |= ((1<<5));
     7ac:	ad 9a       	sbi	0x15, 5	; 21
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
				printf("BYPASS!\n\r");
				mode=LOGON;
			}
			else
			{
				printf("password:");
     7b2:	b9 e1       	ldi	r27, 0x19	; 25
     7b4:	6b 2e       	mov	r6, r27
     7b6:	b1 e0       	ldi	r27, 0x01	; 1
     7b8:	7b 2e       	mov	r7, r27
				EEPROM_read((int)&EEPVars.E_passl2[0],25,password);/** Lecture du mot de passe en mémoire EEPROM */
     7ba:	ac e0       	ldi	r26, 0x0C	; 12
     7bc:	ca 2e       	mov	r12, r26
     7be:	d1 2c       	mov	r13, r1
     7c0:	cc 0e       	add	r12, r28
     7c2:	dd 1e       	adc	r13, r29
				EEPROM_read((int)&EEPVars.E_passl1[0],25,remotepass);
     7c4:	f6 e2       	ldi	r31, 0x26	; 38
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f1 2c       	mov	r15, r1
     7ca:	ec 0e       	add	r14, r28
     7cc:	fd 1e       	adc	r15, r29
				EEPROM_read((int)&EEPVars.E_conname[0],8,console);
     7ce:	ea e5       	ldi	r30, 0x5A	; 90
     7d0:	8e 2e       	mov	r8, r30
     7d2:	91 2c       	mov	r9, r1
     7d4:	8c 0e       	add	r8, r28
     7d6:	9d 1e       	adc	r9, r29
				EEPROM_read((int)&EEPVars.E_crypt[0],CRYPTO_KEY_SIZE+1,crypto_key);
				USART_getstring(STAR_ECHO, 25, entpassword);
     7d8:	8e 01       	movw	r16, r28
     7da:	00 5c       	subi	r16, 0xC0	; 192
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
					printf(" TEST OK\n\r");
					mode=LOGON_TEST;
				}
				else
				{
					printf(" X\n\r");
     7de:	76 e4       	ldi	r23, 0x46	; 70
     7e0:	a7 2e       	mov	r10, r23
     7e2:	71 e0       	ldi	r23, 0x01	; 1
     7e4:	b7 2e       	mov	r11, r23
	/** Boucle principale */
	for(;;)
	{
		if(mode==LOGOFF)
		{
			if(!(PINB&0x10)) /* Jumper mot de passe actif */
     7e6:	b4 99       	sbic	0x16, 4	; 22
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <main+0x254>
			{
				/* Activation bluetooth */
				PORTC &= ~((1<<5));
     7ea:	ad 98       	cbi	0x15, 5	; 21
				
				printf("BYPASS!\n\r");
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <main+0x24e>
     7ee:	8f e0       	ldi	r24, 0x0F	; 15
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	37 c0       	rjmp	.+110    	; 0x862 <__stack+0x3>
				mode=LOGON;
			}
			else
			{
				printf("password:");
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <main+0x256>
     7f6:	ad b7       	in	r26, 0x3d	; 61
     7f8:	be b7       	in	r27, 0x3e	; 62
     7fa:	12 96       	adiw	r26, 0x02	; 2
     7fc:	7c 92       	st	X, r7
     7fe:	6e 92       	st	-X, r6
     800:	11 97       	sbiw	r26, 0x01	; 1
     802:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
				EEPROM_read((int)&EEPVars.E_passl2[0],25,password);/** Lecture du mot de passe en mémoire EEPROM */
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	87 e2       	ldi	r24, 0x27	; 39
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	69 e1       	ldi	r22, 0x19	; 25
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	a6 01       	movw	r20, r12
     814:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
				EEPROM_read((int)&EEPVars.E_passl1[0],25,remotepass);
     818:	8d e0       	ldi	r24, 0x0D	; 13
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	69 e1       	ldi	r22, 0x19	; 25
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	a7 01       	movw	r20, r14
     822:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
				EEPROM_read((int)&EEPVars.E_conname[0],8,console);
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	68 e0       	ldi	r22, 0x08	; 8
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	a4 01       	movw	r20, r8
     830:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
				EEPROM_read((int)&EEPVars.E_crypt[0],CRYPTO_KEY_SIZE+1,crypto_key);
     834:	81 e4       	ldi	r24, 0x41	; 65
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	61 e2       	ldi	r22, 0x21	; 33
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	4f ec       	ldi	r20, 0xCF	; 207
     83e:	53 e0       	ldi	r21, 0x03	; 3
     840:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
				USART_getstring(STAR_ECHO, 25, entpassword);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	69 e1       	ldi	r22, 0x19	; 25
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	a8 01       	movw	r20, r16
     84c:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
				if(!stringcomp(entpassword,password))
     850:	c8 01       	movw	r24, r16
     852:	b6 01       	movw	r22, r12
     854:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     858:	89 2b       	or	r24, r25
     85a:	59 f4       	brne	.+22     	; 0x872 <__stack+0x13>
				{
					printf(" OK\n\r");
     85c:	00 d0       	rcall	.+0      	; 0x85e <main+0x2be>
     85e:	83 e2       	ldi	r24, 0x23	; 35
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	ed b7       	in	r30, 0x3d	; 61
     864:	fe b7       	in	r31, 0x3e	; 62
     866:	92 83       	std	Z+2, r25	; 0x02
     868:	81 83       	std	Z+1, r24	; 0x01
     86a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     86e:	f1 e0       	ldi	r31, 0x01	; 1
     870:	3e c0       	rjmp	.+124    	; 0x8ee <__stack+0x8f>
					mode=LOGON;
				}
				else if(!stringcomp(entpassword,remotepass))
     872:	c8 01       	movw	r24, r16
     874:	b7 01       	movw	r22, r14
     876:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     87a:	89 2b       	or	r24, r25
     87c:	39 f5       	brne	.+78     	; 0x8cc <__stack+0x6d>
				{
					printf(" REMOTE OK\n\r");
     87e:	00 d0       	rcall	.+0      	; 0x880 <__stack+0x21>
     880:	89 e2       	ldi	r24, 0x29	; 41
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	ad b7       	in	r26, 0x3d	; 61
     886:	be b7       	in	r27, 0x3e	; 62
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	9c 93       	st	X, r25
     88c:	8e 93       	st	-X, r24
     88e:	11 97       	sbiw	r26, 0x01	; 1
     890:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     894:	b2 e0       	ldi	r27, 0x02	; 2
     896:	c9 56       	subi	r28, 0x69	; 105
     898:	de 4f       	sbci	r29, 0xFE	; 254
     89a:	b8 83       	st	Y, r27
     89c:	c7 59       	subi	r28, 0x97	; 151
     89e:	d1 40       	sbci	r29, 0x01	; 1
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
			}
		}
		if(mode>LOGOFF)
		{
			printf("%s>",console);
			USART_getstring(ECHO, 25, commande);
     8a4:	94 e7       	ldi	r25, 0x74	; 116
     8a6:	89 2e       	mov	r8, r25
     8a8:	91 2c       	mov	r9, r1
     8aa:	8c 0e       	add	r8, r28
     8ac:	9d 1e       	adc	r9, r29
					unsigned long adr=0;
					unsigned char rec[51];
					unsigned int count=1;
					unsigned int crc, crcv;
					
					rec[0]=0;
     8ae:	80 ee       	ldi	r24, 0xE0	; 224
     8b0:	48 2e       	mov	r4, r24
     8b2:	51 2c       	mov	r5, r1
     8b4:	4c 0e       	add	r4, r28
     8b6:	5d 1e       	adc	r5, r29
						I2CEEPROM_read(adr,1,(char *)rec);
						if(rec[0]!=0xFF)
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);
								/*decrypt*/
							rijndael('d', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
     8b8:	c2 01       	movw	r24, r4
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	c2 56       	subi	r28, 0x62	; 98
     8be:	de 4f       	sbci	r29, 0xFE	; 254
     8c0:	99 83       	std	Y+1, r25	; 0x01
     8c2:	88 83       	st	Y, r24
     8c4:	ce 59       	subi	r28, 0x9E	; 158
     8c6:	d1 40       	sbci	r29, 0x01	; 1
     8c8:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__stack+0x111b>
				else if(!stringcomp(entpassword,remotepass))
				{
					printf(" REMOTE OK\n\r");
					mode=LOGON_REMOTE;
				}
				else if(!stringcomp(entpassword,"test"))
     8cc:	c8 01       	movw	r24, r16
     8ce:	66 e3       	ldi	r22, 0x36	; 54
     8d0:	71 e0       	ldi	r23, 0x01	; 1
     8d2:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     8d6:	89 2b       	or	r24, r25
     8d8:	81 f4       	brne	.+32     	; 0x8fa <__stack+0x9b>
				{
					printf(" TEST OK\n\r");
     8da:	00 d0       	rcall	.+0      	; 0x8dc <__stack+0x7d>
     8dc:	8b e3       	ldi	r24, 0x3B	; 59
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	ed b7       	in	r30, 0x3d	; 61
     8e2:	fe b7       	in	r31, 0x3e	; 62
     8e4:	92 83       	std	Z+2, r25	; 0x02
     8e6:	81 83       	std	Z+1, r24	; 0x01
     8e8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     8ec:	f3 e0       	ldi	r31, 0x03	; 3
     8ee:	c9 56       	subi	r28, 0x69	; 105
     8f0:	de 4f       	sbci	r29, 0xFE	; 254
     8f2:	f8 83       	st	Y, r31
     8f4:	c7 59       	subi	r28, 0x97	; 151
     8f6:	d1 40       	sbci	r29, 0x01	; 1
     8f8:	d3 cf       	rjmp	.-90     	; 0x8a0 <__stack+0x41>
					mode=LOGON_TEST;
				}
				else
				{
					printf(" X\n\r");
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <__stack+0x9d>
     8fc:	ad b7       	in	r26, 0x3d	; 61
     8fe:	be b7       	in	r27, 0x3e	; 62
     900:	12 96       	adiw	r26, 0x02	; 2
     902:	bc 92       	st	X, r11
     904:	ae 92       	st	-X, r10
     906:	11 97       	sbiw	r26, 0x01	; 1
     908:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	6a cf       	rjmp	.-300    	; 0x7e6 <main+0x246>
			USART_getstring(ECHO, 25, commande);
			printf("\n\r");

			if(mode==LOGON)
			{
				if(!stringcomp(commande,"v"))	// Version (voir la version du mircologiciel)
     912:	c4 01       	movw	r24, r8
     914:	6b e4       	ldi	r22, 0x4B	; 75
     916:	71 e0       	ldi	r23, 0x01	; 1
     918:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     91c:	89 2b       	or	r24, r25
     91e:	a9 f4       	brne	.+42     	; 0x94a <__stack+0xeb>
				{
					char version[32];

					EEPROM_read((int)&EEPVars.E_version,32,version);
     920:	8e 01       	movw	r16, r28
     922:	02 57       	subi	r16, 0x72	; 114
     924:	1f 4f       	sbci	r17, 0xFF	; 255
     926:	82 e6       	ldi	r24, 0x62	; 98
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	60 e2       	ldi	r22, 0x20	; 32
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	a8 01       	movw	r20, r16
     930:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

					printf("%s\n\r",version);
     934:	00 d0       	rcall	.+0      	; 0x936 <__stack+0xd7>
     936:	00 d0       	rcall	.+0      	; 0x938 <__stack+0xd9>
     938:	8d e4       	ldi	r24, 0x4D	; 77
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	ed b7       	in	r30, 0x3d	; 61
     93e:	fe b7       	in	r31, 0x3e	; 62
     940:	92 83       	std	Z+2, r25	; 0x02
     942:	81 83       	std	Z+1, r24	; 0x01
     944:	14 83       	std	Z+4, r17	; 0x04
     946:	03 83       	std	Z+3, r16	; 0x03
     948:	d7 c2       	rjmp	.+1454   	; 0xef8 <__stack+0x699>
				}
				else if(!stringcomp(commande,"?") || !stringcomp(commande,"h"))	// Help (aide)
     94a:	c4 01       	movw	r24, r8
     94c:	62 e5       	ldi	r22, 0x52	; 82
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     954:	89 2b       	or	r24, r25
     956:	41 f0       	breq	.+16     	; 0x968 <__stack+0x109>
     958:	c4 01       	movw	r24, r8
     95a:	64 e5       	ldi	r22, 0x54	; 84
     95c:	71 e0       	ldi	r23, 0x01	; 1
     95e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     962:	89 2b       	or	r24, r25
     964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x109>
     966:	68 c0       	rjmp	.+208    	; 0xa38 <__stack+0x1d9>
				{
					printf("Version\n\r");
     968:	00 d0       	rcall	.+0      	; 0x96a <__stack+0x10b>
     96a:	86 e5       	ldi	r24, 0x56	; 86
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	ad b7       	in	r26, 0x3d	; 61
     970:	be b7       	in	r27, 0x3e	; 62
     972:	12 96       	adiw	r26, 0x02	; 2
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	11 97       	sbiw	r26, 0x01	; 1
     97a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Help\n\r");
     97e:	80 e6       	ldi	r24, 0x60	; 96
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	ed b7       	in	r30, 0x3d	; 61
     984:	fe b7       	in	r31, 0x3e	; 62
     986:	92 83       	std	Z+2, r25	; 0x02
     988:	81 83       	std	Z+1, r24	; 0x01
     98a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Set Clock\n\r");
     98e:	87 e6       	ldi	r24, 0x67	; 103
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	ad b7       	in	r26, 0x3d	; 61
     994:	be b7       	in	r27, 0x3e	; 62
     996:	12 96       	adiw	r26, 0x02	; 2
     998:	9c 93       	st	X, r25
     99a:	8e 93       	st	-X, r24
     99c:	11 97       	sbiw	r26, 0x01	; 1
     99e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("show Clock\n\r");
     9a2:	83 e7       	ldi	r24, 0x73	; 115
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	ed b7       	in	r30, 0x3d	; 61
     9a8:	fe b7       	in	r31, 0x3e	; 62
     9aa:	92 83       	std	Z+2, r25	; 0x02
     9ac:	81 83       	std	Z+1, r24	; 0x01
     9ae:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("PASSWORD\n\r");
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	ad b7       	in	r26, 0x3d	; 61
     9b8:	be b7       	in	r27, 0x3e	; 62
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	9c 93       	st	X, r25
     9be:	8e 93       	st	-X, r24
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("CRYPTO\n\r");
     9c6:	8b e8       	ldi	r24, 0x8B	; 139
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	ed b7       	in	r30, 0x3d	; 61
     9cc:	fe b7       	in	r31, 0x3e	; 62
     9ce:	92 83       	std	Z+2, r25	; 0x02
     9d0:	81 83       	std	Z+1, r24	; 0x01
     9d2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("change console Name\n\r");
     9d6:	84 e9       	ldi	r24, 0x94	; 148
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	ad b7       	in	r26, 0x3d	; 61
     9dc:	be b7       	in	r27, 0x3e	; 62
     9de:	12 96       	adiw	r26, 0x02	; 2
     9e0:	9c 93       	st	X, r25
     9e2:	8e 93       	st	-X, r24
     9e4:	11 97       	sbiw	r26, 0x01	; 1
     9e6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Dump\n\r");
     9ea:	8a ea       	ldi	r24, 0xAA	; 170
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	ed b7       	in	r30, 0x3d	; 61
     9f0:	fe b7       	in	r31, 0x3e	; 62
     9f2:	92 83       	std	Z+2, r25	; 0x02
     9f4:	81 83       	std	Z+1, r24	; 0x01
     9f6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Format\n\r");
     9fa:	81 eb       	ldi	r24, 0xB1	; 177
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	ad b7       	in	r26, 0x3d	; 61
     a00:	be b7       	in	r27, 0x3e	; 62
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	9c 93       	st	X, r25
     a06:	8e 93       	st	-X, r24
     a08:	11 97       	sbiw	r26, 0x01	; 1
     a0a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Wipe mem\n\r");
     a0e:	8a eb       	ldi	r24, 0xBA	; 186
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	ed b7       	in	r30, 0x3d	; 61
     a14:	fe b7       	in	r31, 0x3e	; 62
     a16:	92 83       	std	Z+2, r25	; 0x02
     a18:	81 83       	std	Z+1, r24	; 0x01
     a1a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Logoff\n\r");
     a1e:	85 ec       	ldi	r24, 0xC5	; 197
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	ad b7       	in	r26, 0x3d	; 61
     a24:	be b7       	in	r27, 0x3e	; 62
     a26:	12 96       	adiw	r26, 0x02	; 2
     a28:	9c 93       	st	X, r25
     a2a:	8e 93       	st	-X, r24
     a2c:	11 97       	sbiw	r26, 0x01	; 1
     a2e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Exit\n\r");
     a32:	8e ec       	ldi	r24, 0xCE	; 206
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	17 c2       	rjmp	.+1070   	; 0xe66 <__stack+0x607>
				}
				else if(!stringcomp(commande,"sc"))	// SetClock (ajuster l'heure)
     a38:	c4 01       	movw	r24, r8
     a3a:	65 ed       	ldi	r22, 0xD5	; 213
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     a42:	89 2b       	or	r24, r25
     a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	f8 c0       	rjmp	.+496    	; 0xc38 <__stack+0x3d9>
				{
					RTC_get_time();
     a48:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>
			
					printf("Year>");
     a4c:	00 d0       	rcall	.+0      	; 0xa4e <__stack+0x1ef>
     a4e:	88 ed       	ldi	r24, 0xD8	; 216
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	ad b7       	in	r26, 0x3d	; 61
     a54:	be b7       	in	r27, 0x3e	; 62
     a56:	12 96       	adiw	r26, 0x02	; 2
     a58:	9c 93       	st	X, r25
     a5a:	8e 93       	st	-X, r24
     a5c:	11 97       	sbiw	r26, 0x01	; 1
     a5e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 5, temp);
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	8e 01       	movw	r16, r28
     a68:	09 5f       	subi	r16, 0xF9	; 249
     a6a:	1f 4f       	sbci	r17, 0xFF	; 255
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	65 e0       	ldi	r22, 0x05	; 5
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	a8 01       	movw	r20, r16
     a74:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     a78:	8f 81       	ldd	r24, Y+7	; 0x07
     a7a:	88 23       	and	r24, r24
     a7c:	39 f0       	breq	.+14     	; 0xa8c <__stack+0x22d>
						heure_actuelle.annee=strtoi(temp);
     a7e:	c8 01       	movw	r24, r16
     a80:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     a84:	90 93 c7 03 	sts	0x03C7, r25
     a88:	80 93 c6 03 	sts	0x03C6, r24
					printf("\n\r");
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <__stack+0x22f>
     a8e:	8e ed       	ldi	r24, 0xDE	; 222
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	ed b7       	in	r30, 0x3d	; 61
     a94:	fe b7       	in	r31, 0x3e	; 62
     a96:	92 83       	std	Z+2, r25	; 0x02
     a98:	81 83       	std	Z+1, r24	; 0x01
     a9a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Month>");
     a9e:	81 ee       	ldi	r24, 0xE1	; 225
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	ad b7       	in	r26, 0x3d	; 61
     aa4:	be b7       	in	r27, 0x3e	; 62
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	9c 93       	st	X, r25
     aaa:	8e 93       	st	-X, r24
     aac:	11 97       	sbiw	r26, 0x01	; 1
     aae:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	8e 01       	movw	r16, r28
     ab8:	09 5f       	subi	r16, 0xF9	; 249
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	63 e0       	ldi	r22, 0x03	; 3
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	a8 01       	movw	r20, r16
     ac4:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     ac8:	8f 81       	ldd	r24, Y+7	; 0x07
     aca:	88 23       	and	r24, r24
     acc:	29 f0       	breq	.+10     	; 0xad8 <__stack+0x279>
					heure_actuelle.mois=(unsigned char)strtoi(temp);
     ace:	c8 01       	movw	r24, r16
     ad0:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     ad4:	80 93 c8 03 	sts	0x03C8, r24
					printf("\n\r");
     ad8:	00 d0       	rcall	.+0      	; 0xada <__stack+0x27b>
     ada:	8e ed       	ldi	r24, 0xDE	; 222
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	ed b7       	in	r30, 0x3d	; 61
     ae0:	fe b7       	in	r31, 0x3e	; 62
     ae2:	92 83       	std	Z+2, r25	; 0x02
     ae4:	81 83       	std	Z+1, r24	; 0x01
     ae6:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Day>");
     aea:	88 ee       	ldi	r24, 0xE8	; 232
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	ad b7       	in	r26, 0x3d	; 61
     af0:	be b7       	in	r27, 0x3e	; 62
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	9c 93       	st	X, r25
     af6:	8e 93       	st	-X, r24
     af8:	11 97       	sbiw	r26, 0x01	; 1
     afa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	8e 01       	movw	r16, r28
     b04:	09 5f       	subi	r16, 0xF9	; 249
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	63 e0       	ldi	r22, 0x03	; 3
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	a8 01       	movw	r20, r16
     b10:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     b14:	8f 81       	ldd	r24, Y+7	; 0x07
     b16:	88 23       	and	r24, r24
     b18:	29 f0       	breq	.+10     	; 0xb24 <__stack+0x2c5>
						heure_actuelle.jour=(unsigned char)strtoi(temp);
     b1a:	c8 01       	movw	r24, r16
     b1c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     b20:	80 93 c9 03 	sts	0x03C9, r24
					printf("\n\r");
     b24:	00 d0       	rcall	.+0      	; 0xb26 <__stack+0x2c7>
     b26:	8e ed       	ldi	r24, 0xDE	; 222
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	ed b7       	in	r30, 0x3d	; 61
     b2c:	fe b7       	in	r31, 0x3e	; 62
     b2e:	92 83       	std	Z+2, r25	; 0x02
     b30:	81 83       	std	Z+1, r24	; 0x01
     b32:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Hour>");
     b36:	8d ee       	ldi	r24, 0xED	; 237
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	ad b7       	in	r26, 0x3d	; 61
     b3c:	be b7       	in	r27, 0x3e	; 62
     b3e:	12 96       	adiw	r26, 0x02	; 2
     b40:	9c 93       	st	X, r25
     b42:	8e 93       	st	-X, r24
     b44:	11 97       	sbiw	r26, 0x01	; 1
     b46:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	8e 01       	movw	r16, r28
     b50:	09 5f       	subi	r16, 0xF9	; 249
     b52:	1f 4f       	sbci	r17, 0xFF	; 255
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	63 e0       	ldi	r22, 0x03	; 3
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	a8 01       	movw	r20, r16
     b5c:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     b60:	8f 81       	ldd	r24, Y+7	; 0x07
     b62:	88 23       	and	r24, r24
     b64:	29 f0       	breq	.+10     	; 0xb70 <__stack+0x311>
						heure_actuelle.heure=(unsigned char)strtoi(temp);
     b66:	c8 01       	movw	r24, r16
     b68:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     b6c:	80 93 cb 03 	sts	0x03CB, r24
					printf("\n\r");
     b70:	00 d0       	rcall	.+0      	; 0xb72 <__stack+0x313>
     b72:	8e ed       	ldi	r24, 0xDE	; 222
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	ed b7       	in	r30, 0x3d	; 61
     b78:	fe b7       	in	r31, 0x3e	; 62
     b7a:	92 83       	std	Z+2, r25	; 0x02
     b7c:	81 83       	std	Z+1, r24	; 0x01
     b7e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Minutes>");
     b82:	83 ef       	ldi	r24, 0xF3	; 243
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	ad b7       	in	r26, 0x3d	; 61
     b88:	be b7       	in	r27, 0x3e	; 62
     b8a:	12 96       	adiw	r26, 0x02	; 2
     b8c:	9c 93       	st	X, r25
     b8e:	8e 93       	st	-X, r24
     b90:	11 97       	sbiw	r26, 0x01	; 1
     b92:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	8e 01       	movw	r16, r28
     b9c:	09 5f       	subi	r16, 0xF9	; 249
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	63 e0       	ldi	r22, 0x03	; 3
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	a8 01       	movw	r20, r16
     ba8:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     bac:	8f 81       	ldd	r24, Y+7	; 0x07
     bae:	88 23       	and	r24, r24
     bb0:	29 f0       	breq	.+10     	; 0xbbc <__stack+0x35d>
						heure_actuelle.minute=(unsigned char)strtoi(temp);		
     bb2:	c8 01       	movw	r24, r16
     bb4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     bb8:	80 93 cc 03 	sts	0x03CC, r24
					printf("\n\r");			
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <__stack+0x35f>
     bbe:	8e ed       	ldi	r24, 0xDE	; 222
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	ed b7       	in	r30, 0x3d	; 61
     bc4:	fe b7       	in	r31, 0x3e	; 62
     bc6:	92 83       	std	Z+2, r25	; 0x02
     bc8:	81 83       	std	Z+1, r24	; 0x01
     bca:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Seconds>");	
     bce:	8c ef       	ldi	r24, 0xFC	; 252
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	ad b7       	in	r26, 0x3d	; 61
     bd4:	be b7       	in	r27, 0x3e	; 62
     bd6:	12 96       	adiw	r26, 0x02	; 2
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	8e 01       	movw	r16, r28
     be8:	09 5f       	subi	r16, 0xF9	; 249
     bea:	1f 4f       	sbci	r17, 0xFF	; 255
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	a8 01       	movw	r20, r16
     bf4:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	88 23       	and	r24, r24
     bfc:	29 f0       	breq	.+10     	; 0xc08 <__stack+0x3a9>
						heure_actuelle.seconde=(unsigned char)strtoi(temp);
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
     c04:	80 93 cd 03 	sts	0x03CD, r24
					printf("\n\r");
     c08:	00 d0       	rcall	.+0      	; 0xc0a <__stack+0x3ab>
     c0a:	8e ed       	ldi	r24, 0xDE	; 222
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	ed b7       	in	r30, 0x3d	; 61
     c10:	fe b7       	in	r31, 0x3e	; 62
     c12:	92 83       	std	Z+2, r25	; 0x02
     c14:	81 83       	std	Z+1, r24	; 0x01
     c16:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("OK\n\r");				
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	92 e0       	ldi	r25, 0x02	; 2
     c1e:	ad b7       	in	r26, 0x3d	; 61
     c20:	be b7       	in	r27, 0x3e	; 62
     c22:	12 96       	adiw	r26, 0x02	; 2
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
     c28:	11 97       	sbiw	r26, 0x01	; 1
     c2a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						RTC_set_time();
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0e 94 8b 10 	call	0x2116	; 0x2116 <RTC_set_time>
     c36:	a1 c6       	rjmp	.+3394   	; 0x197a <__stack+0x111b>

				}
				else if(!stringcomp(commande,"c"))	// ShowClock (voir l'heure)
     c38:	c4 01       	movw	r24, r8
     c3a:	6a e0       	ldi	r22, 0x0A	; 10
     c3c:	72 e0       	ldi	r23, 0x02	; 2
     c3e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     c42:	89 2b       	or	r24, r25
     c44:	09 f0       	breq	.+2      	; 0xc48 <__stack+0x3e9>
     c46:	42 c0       	rjmp	.+132    	; 0xccc <__stack+0x46d>
				{
					RTC_get_time();
     c48:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>

					printf("%02i/%02i/%02i %02i:%02i:%02i ",(unsigned char)(heure_actuelle.annee-2000),heure_actuelle.mois,heure_actuelle.jour,heure_actuelle.heure,heure_actuelle.minute,heure_actuelle.seconde);
     c4c:	ed b7       	in	r30, 0x3d	; 61
     c4e:	fe b7       	in	r31, 0x3e	; 62
     c50:	3e 97       	sbiw	r30, 0x0e	; 14
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	fe bf       	out	0x3e, r31	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	ed bf       	out	0x3d, r30	; 61
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	8c e0       	ldi	r24, 0x0C	; 12
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	ad b7       	in	r26, 0x3d	; 61
     c64:	be b7       	in	r27, 0x3e	; 62
     c66:	12 96       	adiw	r26, 0x02	; 2
     c68:	9c 93       	st	X, r25
     c6a:	8e 93       	st	-X, r24
     c6c:	11 97       	sbiw	r26, 0x01	; 1
     c6e:	80 91 c6 03 	lds	r24, 0x03C6
     c72:	80 5d       	subi	r24, 0xD0	; 208
     c74:	82 83       	std	Z+2, r24	; 0x02
     c76:	13 82       	std	Z+3, r1	; 0x03
     c78:	80 91 c8 03 	lds	r24, 0x03C8
     c7c:	84 83       	std	Z+4, r24	; 0x04
     c7e:	15 82       	std	Z+5, r1	; 0x05
     c80:	80 91 c9 03 	lds	r24, 0x03C9
     c84:	86 83       	std	Z+6, r24	; 0x06
     c86:	17 82       	std	Z+7, r1	; 0x07
     c88:	80 91 cb 03 	lds	r24, 0x03CB
     c8c:	80 87       	std	Z+8, r24	; 0x08
     c8e:	11 86       	std	Z+9, r1	; 0x09
     c90:	80 91 cc 03 	lds	r24, 0x03CC
     c94:	82 87       	std	Z+10, r24	; 0x0a
     c96:	13 86       	std	Z+11, r1	; 0x0b
     c98:	80 91 cd 03 	lds	r24, 0x03CD
     c9c:	84 87       	std	Z+12, r24	; 0x0c
     c9e:	15 86       	std	Z+13, r1	; 0x0d
     ca0:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>

					if(heure_actuelle.batt_low)
     ca4:	ed b7       	in	r30, 0x3d	; 61
     ca6:	fe b7       	in	r31, 0x3e	; 62
     ca8:	3e 96       	adiw	r30, 0x0e	; 14
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	fe bf       	out	0x3e, r31	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	ed bf       	out	0x3d, r30	; 61
     cb4:	80 91 ce 03 	lds	r24, 0x03CE
     cb8:	88 23       	and	r24, r24
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__stack+0x465>
					{
						printf("BAT FAIL\n\r");
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <__stack+0x45f>
     cbe:	8b e2       	ldi	r24, 0x2B	; 43
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	6e c0       	rjmp	.+220    	; 0xda0 <__stack+0x541>
					}
					else
					{
						printf("BAT OK\n\r");
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <__stack+0x467>
     cc6:	86 e3       	ldi	r24, 0x36	; 54
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	cd c0       	rjmp	.+410    	; 0xe66 <__stack+0x607>
					}
				}
				else if(!stringcomp(commande,"password"))	// Change Password (changer mot de passe)
     ccc:	c4 01       	movw	r24, r8
     cce:	6f e3       	ldi	r22, 0x3F	; 63
     cd0:	72 e0       	ldi	r23, 0x02	; 2
     cd2:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     cd6:	89 2b       	or	r24, r25
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__stack+0x47d>
     cda:	71 c0       	rjmp	.+226    	; 0xdbe <__stack+0x55f>
				{
					printf("password:");
     cdc:	00 d0       	rcall	.+0      	; 0xcde <__stack+0x47f>
     cde:	e9 e1       	ldi	r30, 0x19	; 25
     ce0:	f1 e0       	ldi	r31, 0x01	; 1
     ce2:	ad b7       	in	r26, 0x3d	; 61
     ce4:	be b7       	in	r27, 0x3e	; 62
     ce6:	12 96       	adiw	r26, 0x02	; 2
     ce8:	fc 93       	st	X, r31
     cea:	ee 93       	st	-X, r30
     cec:	11 97       	sbiw	r26, 0x01	; 1
     cee:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					EEPROM_read((int)&EEPVars.E_passl2,25,password);
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	8e 01       	movw	r16, r28
     cf8:	04 5f       	subi	r16, 0xF4	; 244
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	87 e2       	ldi	r24, 0x27	; 39
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	69 e1       	ldi	r22, 0x19	; 25
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	a8 01       	movw	r20, r16
     d06:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
					USART_getstring(STAR_ECHO, 25, entpassword);
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	69 e1       	ldi	r22, 0x19	; 25
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	ae 01       	movw	r20, r28
     d12:	40 5c       	subi	r20, 0xC0	; 192
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(!stringcomp(entpassword,password))
     d1a:	ce 01       	movw	r24, r28
     d1c:	80 5c       	subi	r24, 0xC0	; 192
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	b8 01       	movw	r22, r16
     d22:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     d26:	89 2b       	or	r24, r25
     d28:	09 f0       	breq	.+2      	; 0xd2c <__stack+0x4cd>
     d2a:	45 c0       	rjmp	.+138    	; 0xdb6 <__stack+0x557>
					{
						printf("\n\rnew:");
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <__stack+0x4cf>
     d2e:	e8 e4       	ldi	r30, 0x48	; 72
     d30:	f2 e0       	ldi	r31, 0x02	; 2
     d32:	ad b7       	in	r26, 0x3d	; 61
     d34:	be b7       	in	r27, 0x3e	; 62
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	fc 93       	st	X, r31
     d3a:	ee 93       	st	-X, r30
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						USART_getstring(STAR_ECHO, 25, entpassword);
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	69 e1       	ldi	r22, 0x19	; 25
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	ae 01       	movw	r20, r28
     d4e:	40 5c       	subi	r20, 0xC0	; 192
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
						printf("\n\ragain:");
     d56:	00 d0       	rcall	.+0      	; 0xd58 <__stack+0x4f9>
     d58:	ef e4       	ldi	r30, 0x4F	; 79
     d5a:	f2 e0       	ldi	r31, 0x02	; 2
     d5c:	ad b7       	in	r26, 0x3d	; 61
     d5e:	be b7       	in	r27, 0x3e	; 62
     d60:	12 96       	adiw	r26, 0x02	; 2
     d62:	fc 93       	st	X, r31
     d64:	ee 93       	st	-X, r30
     d66:	11 97       	sbiw	r26, 0x01	; 1
     d68:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						USART_getstring(STAR_ECHO, 25, password);
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	69 e1       	ldi	r22, 0x19	; 25
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	a8 01       	movw	r20, r16
     d78:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
						if(!stringcomp(entpassword,password))
     d7c:	ce 01       	movw	r24, r28
     d7e:	80 5c       	subi	r24, 0xC0	; 192
     d80:	9f 4f       	sbci	r25, 0xFF	; 255
     d82:	b8 01       	movw	r22, r16
     d84:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     d88:	89 2b       	or	r24, r25
     d8a:	89 f4       	brne	.+34     	; 0xdae <__stack+0x54f>
						{
							EEPROM_write((int)&EEPVars.E_passl2,25,password);
     d8c:	87 e2       	ldi	r24, 0x27	; 39
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	69 e1       	ldi	r22, 0x19	; 25
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	a8 01       	movw	r20, r16
     d96:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
							printf("\n\rOK\n\r");	
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <__stack+0x53d>
     d9c:	88 e5       	ldi	r24, 0x58	; 88
     d9e:	92 e0       	ldi	r25, 0x02	; 2
     da0:	ad b7       	in	r26, 0x3d	; 61
     da2:	be b7       	in	r27, 0x3e	; 62
     da4:	12 96       	adiw	r26, 0x02	; 2
     da6:	9c 93       	st	X, r25
     da8:	8e 93       	st	-X, r24
     daa:	11 97       	sbiw	r26, 0x01	; 1
     dac:	dc c2       	rjmp	.+1464   	; 0x1366 <__stack+0xb07>
						}
						else
						{
							printf("\n\rERR\n\r");
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <__stack+0x551>
     db0:	8f e5       	ldi	r24, 0x5F	; 95
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	58 c0       	rjmp	.+176    	; 0xe66 <__stack+0x607>
						}
					}
					else
					{
						printf(" X\n\r");
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <__stack+0x559>
     db8:	e6 e4       	ldi	r30, 0x46	; 70
     dba:	f1 e0       	ldi	r31, 0x01	; 1
     dbc:	ce c2       	rjmp	.+1436   	; 0x135a <__stack+0xafb>
					}
	
				}
				else if(!stringcomp(commande,"crypto"))	// Crypto Key (changer la clef de cryptage)
     dbe:	c4 01       	movw	r24, r8
     dc0:	67 e6       	ldi	r22, 0x67	; 103
     dc2:	72 e0       	ldi	r23, 0x02	; 2
     dc4:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     dc8:	89 2b       	or	r24, r25
     dca:	09 f0       	breq	.+2      	; 0xdce <__stack+0x56f>
     dcc:	51 c0       	rjmp	.+162    	; 0xe70 <__stack+0x611>
     dce:	0f ec       	ldi	r16, 0xCF	; 207
     dd0:	13 e0       	ldi	r17, 0x03	; 3
					int i;

					/** Préparer la mémoire pour la clef */
					for(i=0;i<33;i++)
					{		
						crypto_key[i]=0x00;
     dd2:	d8 01       	movw	r26, r16
     dd4:	1d 92       	st	X+, r1
     dd6:	8d 01       	movw	r16, r26
				else if(!stringcomp(commande,"crypto"))	// Crypto Key (changer la clef de cryptage)
				{
					int i;

					/** Préparer la mémoire pour la clef */
					for(i=0;i<33;i++)
     dd8:	b3 e0       	ldi	r27, 0x03	; 3
     dda:	00 3f       	cpi	r16, 0xF0	; 240
     ddc:	1b 07       	cpc	r17, r27
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__stack+0x573>
					{		
						crypto_key[i]=0x00;
					}

   					printf("New crypto key>");
     de0:	00 d0       	rcall	.+0      	; 0xde2 <__stack+0x583>
     de2:	8e e6       	ldi	r24, 0x6E	; 110
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	ed b7       	in	r30, 0x3d	; 61
     de8:	fe b7       	in	r31, 0x3e	; 62
     dea:	92 83       	std	Z+2, r25	; 0x02
     dec:	81 83       	std	Z+1, r24	; 0x01
     dee:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
   					USART_getstring(ECHO,CRYPTO_KEY_SIZE, (char *)crypto_key);
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	01 52       	subi	r16, 0x21	; 33
     df8:	10 40       	sbci	r17, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	60 e2       	ldi	r22, 0x20	; 32
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	a8 01       	movw	r20, r16
     e02:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					EEPROM_write((int)&EEPVars.E_crypt, CRYPTO_KEY_SIZE+1, (char *)crypto_key);
     e06:	81 e4       	ldi	r24, 0x41	; 65
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	61 e2       	ldi	r22, 0x21	; 33
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	a8 01       	movw	r20, r16
     e10:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
						printf("\n\rFORMATTING...");
     e14:	00 d0       	rcall	.+0      	; 0xe16 <__stack+0x5b7>
     e16:	8e e7       	ldi	r24, 0x7E	; 126
     e18:	92 e0       	ldi	r25, 0x02	; 2
     e1a:	ad b7       	in	r26, 0x3d	; 61
     e1c:	be b7       	in	r27, 0x3e	; 62
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	9c 93       	st	X, r25
     e22:	8e 93       	st	-X, r24
     e24:	11 97       	sbiw	r26, 0x01	; 1
     e26:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						/* Définitivement pas d'écriture pendant le formattage!! */
					GICR &= ~((1<<INT0));
     e2a:	8b b7       	in	r24, 0x3b	; 59
     e2c:	8f 7b       	andi	r24, 0xBF	; 191
     e2e:	8b bf       	out	0x3b, r24	; 59
						temp[0]=0xff;
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	8f 83       	std	Y+7, r24	; 0x07
					I2CEEPROM_write(0, 1, temp);
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	9e 01       	movw	r18, r28
     e46:	29 5f       	subi	r18, 0xF9	; 249
     e48:	3f 4f       	sbci	r19, 0xFF	; 255
     e4a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2CEEPROM_write>
					write_eeptr(0);
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 04 13 	call	0x2608	; 0x2608 <write_eeptr>
						/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));
     e5a:	8b b7       	in	r24, 0x3b	; 59
     e5c:	80 64       	ori	r24, 0x40	; 64
     e5e:	8b bf       	out	0x3b, r24	; 59
						printf("OK\n\r");
     e60:	00 d0       	rcall	.+0      	; 0xe62 <__stack+0x603>
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	ed b7       	in	r30, 0x3d	; 61
     e68:	fe b7       	in	r31, 0x3e	; 62
     e6a:	92 83       	std	Z+2, r25	; 0x02
     e6c:	81 83       	std	Z+1, r24	; 0x01
     e6e:	7b c2       	rjmp	.+1270   	; 0x1366 <__stack+0xb07>
				}
				else if(!stringcomp(commande,"n"))	// change console name (changer le nom de la console)
     e70:	c4 01       	movw	r24, r8
     e72:	6e e8       	ldi	r22, 0x8E	; 142
     e74:	72 e0       	ldi	r23, 0x02	; 2
     e76:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     e7a:	89 2b       	or	r24, r25
     e7c:	11 f5       	brne	.+68     	; 0xec2 <__stack+0x663>
				{
   					printf("New console name>");
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <__stack+0x621>
     e80:	80 e9       	ldi	r24, 0x90	; 144
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	ad b7       	in	r26, 0x3d	; 61
     e86:	be b7       	in	r27, 0x3e	; 62
     e88:	12 96       	adiw	r26, 0x02	; 2
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	11 97       	sbiw	r26, 0x01	; 1
     e90:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
   					USART_getstring(ECHO,25, console);
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	69 e1       	ldi	r22, 0x19	; 25
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	ae 01       	movw	r20, r28
     ea0:	46 5a       	subi	r20, 0xA6	; 166
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					EEPROM_write((int)&EEPVars.E_conname, 8, console);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	68 e0       	ldi	r22, 0x08	; 8
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	ae 01       	movw	r20, r28
     eb2:	46 5a       	subi	r20, 0xA6	; 166
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
						printf(" OK\n\r");
     eba:	00 d0       	rcall	.+0      	; 0xebc <__stack+0x65d>
     ebc:	83 e2       	ldi	r24, 0x23	; 35
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	d2 cf       	rjmp	.-92     	; 0xe66 <__stack+0x607>
				}
				else if(!stringcomp(commande,"!eeptr!"))	// debug eeptr
     ec2:	c4 01       	movw	r24, r8
     ec4:	62 ea       	ldi	r22, 0xA2	; 162
     ec6:	72 e0       	ldi	r23, 0x02	; 2
     ec8:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     ecc:	89 2b       	or	r24, r25
     ece:	d9 f4       	brne	.+54     	; 0xf06 <__stack+0x6a7>
				{
					unsigned long eeptr;

					read_eeptr(&eeptr);
     ed0:	ce 01       	movw	r24, r28
     ed2:	03 96       	adiw	r24, 0x03	; 3
     ed4:	0e 94 1e 13 	call	0x263c	; 0x263c <read_eeptr>

					printf("EEptr = 0x%04x\n\r",(unsigned int)eeptr);
     ed8:	00 d0       	rcall	.+0      	; 0xeda <__stack+0x67b>
     eda:	00 d0       	rcall	.+0      	; 0xedc <__stack+0x67d>
     edc:	8a ea       	ldi	r24, 0xAA	; 170
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	ad b7       	in	r26, 0x3d	; 61
     ee2:	be b7       	in	r27, 0x3e	; 62
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	9c 93       	st	X, r25
     ee8:	8e 93       	st	-X, r24
     eea:	11 97       	sbiw	r26, 0x01	; 1
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	14 96       	adiw	r26, 0x04	; 4
     ef2:	9c 93       	st	X, r25
     ef4:	8e 93       	st	-X, r24
     ef6:	13 97       	sbiw	r26, 0x03	; 3
     ef8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	3a c5       	rjmp	.+2676   	; 0x197a <__stack+0x111b>
				}
				else if(!stringcomp(commande,"!kbd!"))	// debug le kb
     f06:	c4 01       	movw	r24, r8
     f08:	6b eb       	ldi	r22, 0xBB	; 187
     f0a:	72 e0       	ldi	r23, 0x02	; 2
     f0c:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     f10:	89 2b       	or	r24, r25
     f12:	b9 f4       	brne	.+46     	; 0xf42 <__stack+0x6e3>
				{
					printf("KB Debug Mode\n\r");
     f14:	00 d0       	rcall	.+0      	; 0xf16 <__stack+0x6b7>
     f16:	81 ec       	ldi	r24, 0xC1	; 193
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	ed b7       	in	r30, 0x3d	; 61
     f1c:	fe b7       	in	r31, 0x3e	; 62
     f1e:	92 83       	std	Z+2, r25	; 0x02
     f20:	81 83       	std	Z+1, r24	; 0x01
     f22:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					kbdebug=1;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 fb 04 	sts	0x04FB, r24
					getchar();
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	80 91 15 05 	lds	r24, 0x0515
     f34:	90 91 16 05 	lds	r25, 0x0516
     f38:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <fgetc>
					kbdebug=0;
     f3c:	10 92 fb 04 	sts	0x04FB, r1
     f40:	1c c5       	rjmp	.+2616   	; 0x197a <__stack+0x111b>
				}
				else if(!stringcomp(commande,"!wkb!"))	// ecris une fausse string kb
     f42:	c4 01       	movw	r24, r8
     f44:	61 ed       	ldi	r22, 0xD1	; 209
     f46:	72 e0       	ldi	r23, 0x02	; 2
     f48:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     f4c:	89 2b       	or	r24, r25
     f4e:	71 f4       	brne	.+28     	; 0xf6c <__stack+0x70d>
				{
					KB_char_cnt=5;
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	80 93 f7 04 	sts	0x04F7, r24
					stringcpy((char *)KB_buf,"1234A",5);
     f56:	80 ef       	ldi	r24, 0xF0	; 240
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	67 ed       	ldi	r22, 0xD7	; 215
     f5c:	72 e0       	ldi	r23, 0x02	; 2
     f5e:	45 e0       	ldi	r20, 0x05	; 5
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	0e 94 9e 12 	call	0x253c	; 0x253c <stringcpy>
					write_kb_i2ceeprom();
     f66:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <write_kb_i2ceeprom>
     f6a:	07 c5       	rjmp	.+2574   	; 0x197a <__stack+0x111b>

				}
				else if(!stringcomp(commande,"d"))	// Dump (voir le log)
     f6c:	c4 01       	movw	r24, r8
     f6e:	6d ed       	ldi	r22, 0xDD	; 221
     f70:	72 e0       	ldi	r23, 0x02	; 2
     f72:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
     f76:	89 2b       	or	r24, r25
     f78:	09 f0       	breq	.+2      	; 0xf7c <__stack+0x71d>
     f7a:	16 c1       	rjmp	.+556    	; 0x11a8 <__stack+0x949>
					unsigned long adr=0;
					unsigned char rec[51];
					unsigned int count=1;
					unsigned int crc, crcv;
					
					rec[0]=0;
     f7c:	d2 01       	movw	r26, r4
     f7e:	1c 92       	st	X, r1
						/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
     f80:	8b b7       	in	r24, 0x3b	; 59
     f82:	8f 7b       	andi	r24, 0xBF	; 191
     f84:	8b bf       	out	0x3b, r24	; 59
     f86:	ee 24       	eor	r14, r14
     f88:	ff 24       	eor	r15, r15
     f8a:	87 01       	movw	r16, r14
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	a6 2e       	mov	r10, r22
     f90:	b1 2c       	mov	r11, r1
						if(rec[0]!=0xFF)
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);
								/*decrypt*/
							rijndael('d', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
							rijndael('d', (unsigned char *)&rec[17], (unsigned char *)&crypto_key[16]);
     f92:	f2 01       	movw	r30, r4
     f94:	71 96       	adiw	r30, 0x11	; 17
     f96:	c6 56       	subi	r28, 0x66	; 102
     f98:	de 4f       	sbci	r29, 0xFE	; 254
     f9a:	f9 83       	std	Y+1, r31	; 0x01
     f9c:	e8 83       	st	Y, r30
     f9e:	ca 59       	subi	r28, 0x9A	; 154
     fa0:	d1 40       	sbci	r29, 0x01	; 1
								rijndael('d', (unsigned char *)&rec[33], (unsigned char *)&crypto_key[0]);
							}	
								crc=crcccitt(0, (char *)&rec[1], rec[1]-2);	/* Calcul du CRC 16 (CCITT) de la chaine */
								crcv=(unsigned int)(rec[(rec[1]-1)])+(((unsigned int)(rec[rec[1]]))<<8);
								rec[rec[1]-1]=0x00; /* Mettre un null à la place du CRC */
							printf("%i)%02i/%02i/%02i %02i:%02i:%02i %02i %s ",count,rec[2],rec[3],rec[4],rec[5],rec[6],rec[7],rec[8],&rec[9]);
     fa2:	c2 01       	movw	r24, r4
     fa4:	09 96       	adiw	r24, 0x09	; 9
     fa6:	c4 56       	subi	r28, 0x64	; 100
     fa8:	de 4f       	sbci	r29, 0xFE	; 254
     faa:	99 83       	std	Y+1, r25	; 0x01
     fac:	88 83       	st	Y, r24
     fae:	cc 59       	subi	r28, 0x9C	; 156
     fb0:	d1 40       	sbci	r29, 0x01	; 1
								/*decrypt*/
							rijndael('d', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
							rijndael('d', (unsigned char *)&rec[17], (unsigned char *)&crypto_key[16]);
							if(rec[8]==0x00)//Si c'est un mag record, décrypter la balance de la string
							{
								rijndael('d', (unsigned char *)&rec[33], (unsigned char *)&crypto_key[0]);
     fb2:	51 e2       	ldi	r21, 0x21	; 33
     fb4:	25 2e       	mov	r2, r21
     fb6:	31 2c       	mov	r3, r1
     fb8:	24 0c       	add	r2, r4
     fba:	35 1c       	adc	r3, r5
     fbc:	ec c0       	rjmp	.+472    	; 0x1196 <__stack+0x937>
					rec[0]=0;
						/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
						while(adr<I2CEEPROM_TOP && rec[0]!=0xFF)
					{
						I2CEEPROM_read(adr,1,(char *)rec);
     fbe:	c8 01       	movw	r24, r16
     fc0:	b7 01       	movw	r22, r14
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	50 e0       	ldi	r21, 0x00	; 0
     fc6:	92 01       	movw	r18, r4
     fc8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
						if(rec[0]!=0xFF)
     fcc:	d2 01       	movw	r26, r4
     fce:	4c 91       	ld	r20, X
     fd0:	4f 3f       	cpi	r20, 0xFF	; 255
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <__stack+0x777>
     fd4:	e0 c0       	rjmp	.+448    	; 0x1196 <__stack+0x937>
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);
     fd6:	c8 01       	movw	r24, r16
     fd8:	b7 01       	movw	r22, r14
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	92 01       	movw	r18, r4
     fde:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
								/*decrypt*/
							rijndael('d', (unsigned char *)&rec[1], (unsigned char *)&crypto_key[0]);
     fe2:	84 e6       	ldi	r24, 0x64	; 100
     fe4:	c2 56       	subi	r28, 0x62	; 98
     fe6:	de 4f       	sbci	r29, 0xFE	; 254
     fe8:	68 81       	ld	r22, Y
     fea:	79 81       	ldd	r23, Y+1	; 0x01
     fec:	ce 59       	subi	r28, 0x9E	; 158
     fee:	d1 40       	sbci	r29, 0x01	; 1
     ff0:	4f ec       	ldi	r20, 0xCF	; 207
     ff2:	53 e0       	ldi	r21, 0x03	; 3
     ff4:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
							rijndael('d', (unsigned char *)&rec[17], (unsigned char *)&crypto_key[16]);
     ff8:	84 e6       	ldi	r24, 0x64	; 100
     ffa:	c6 56       	subi	r28, 0x66	; 102
     ffc:	de 4f       	sbci	r29, 0xFE	; 254
     ffe:	68 81       	ld	r22, Y
    1000:	79 81       	ldd	r23, Y+1	; 0x01
    1002:	ca 59       	subi	r28, 0x9A	; 154
    1004:	d1 40       	sbci	r29, 0x01	; 1
    1006:	4f ed       	ldi	r20, 0xDF	; 223
    1008:	53 e0       	ldi	r21, 0x03	; 3
    100a:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
							if(rec[8]==0x00)//Si c'est un mag record, décrypter la balance de la string
    100e:	f2 01       	movw	r30, r4
    1010:	80 85       	ldd	r24, Z+8	; 0x08
    1012:	88 23       	and	r24, r24
    1014:	31 f4       	brne	.+12     	; 0x1022 <__stack+0x7c3>
							{
								rijndael('d', (unsigned char *)&rec[33], (unsigned char *)&crypto_key[0]);
    1016:	84 e6       	ldi	r24, 0x64	; 100
    1018:	b1 01       	movw	r22, r2
    101a:	4f ec       	ldi	r20, 0xCF	; 207
    101c:	53 e0       	ldi	r21, 0x03	; 3
    101e:	0e 94 8a 19 	call	0x3314	; 0x3314 <rijndael>
							}	
								crc=crcccitt(0, (char *)&rec[1], rec[1]-2);	/* Calcul du CRC 16 (CCITT) de la chaine */
    1022:	d2 01       	movw	r26, r4
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	2c 91       	ld	r18, X
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	22 50       	subi	r18, 0x02	; 2
    102c:	30 40       	sbci	r19, 0x00	; 0
    102e:	44 27       	eor	r20, r20
    1030:	37 fd       	sbrc	r19, 7
    1032:	40 95       	com	r20
    1034:	54 2f       	mov	r21, r20
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	c2 56       	subi	r28, 0x62	; 98
    103c:	de 4f       	sbci	r29, 0xFE	; 254
    103e:	68 81       	ld	r22, Y
    1040:	79 81       	ldd	r23, Y+1	; 0x01
    1042:	ce 59       	subi	r28, 0x9E	; 158
    1044:	d1 40       	sbci	r29, 0x01	; 1
    1046:	0e 94 c7 12 	call	0x258e	; 0x258e <crcccitt>
    104a:	3c 01       	movw	r6, r24
								crcv=(unsigned int)(rec[(rec[1]-1)])+(((unsigned int)(rec[rec[1]]))<<8);
    104c:	f2 01       	movw	r30, r4
    104e:	81 81       	ldd	r24, Z+1	; 0x01
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	e8 0f       	add	r30, r24
    1054:	f9 1f       	adc	r31, r25
    1056:	20 81       	ld	r18, Z
    1058:	c7 56       	subi	r28, 0x67	; 103
    105a:	de 4f       	sbci	r29, 0xFE	; 254
    105c:	28 83       	st	Y, r18
    105e:	c9 59       	subi	r28, 0x99	; 153
    1060:	d1 40       	sbci	r29, 0x01	; 1
    1062:	c8 56       	subi	r28, 0x68	; 104
    1064:	de 4f       	sbci	r29, 0xFE	; 254
    1066:	18 82       	st	Y, r1
    1068:	c8 59       	subi	r28, 0x98	; 152
    106a:	d1 40       	sbci	r29, 0x01	; 1
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f2 01       	movw	r30, r4
    1070:	e8 0f       	add	r30, r24
    1072:	f9 1f       	adc	r31, r25
    1074:	80 81       	ld	r24, Z
    1076:	c8 56       	subi	r28, 0x68	; 104
    1078:	de 4f       	sbci	r29, 0xFE	; 254
    107a:	c8 80       	ld	r12, Y
    107c:	d9 80       	ldd	r13, Y+1	; 0x01
    107e:	c8 59       	subi	r28, 0x98	; 152
    1080:	d1 40       	sbci	r29, 0x01	; 1
    1082:	c8 0e       	add	r12, r24
    1084:	d1 1c       	adc	r13, r1
								rec[rec[1]-1]=0x00; /* Mettre un null à la place du CRC */
    1086:	10 82       	st	Z, r1
							printf("%i)%02i/%02i/%02i %02i:%02i:%02i %02i %s ",count,rec[2],rec[3],rec[4],rec[5],rec[6],rec[7],rec[8],&rec[9]);
    1088:	8d b7       	in	r24, 0x3d	; 61
    108a:	9e b7       	in	r25, 0x3e	; 62
    108c:	44 97       	sbiw	r24, 0x14	; 20
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	9e bf       	out	0x3e, r25	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	8d bf       	out	0x3d, r24	; 61
    1098:	ed b7       	in	r30, 0x3d	; 61
    109a:	fe b7       	in	r31, 0x3e	; 62
    109c:	31 96       	adiw	r30, 0x01	; 1
    109e:	8f ed       	ldi	r24, 0xDF	; 223
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	ad b7       	in	r26, 0x3d	; 61
    10a4:	be b7       	in	r27, 0x3e	; 62
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	9c 93       	st	X, r25
    10aa:	8e 93       	st	-X, r24
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	b3 82       	std	Z+3, r11	; 0x03
    10b0:	a2 82       	std	Z+2, r10	; 0x02
    10b2:	d2 01       	movw	r26, r4
    10b4:	12 96       	adiw	r26, 0x02	; 2
    10b6:	8c 91       	ld	r24, X
    10b8:	12 97       	sbiw	r26, 0x02	; 2
    10ba:	84 83       	std	Z+4, r24	; 0x04
    10bc:	15 82       	std	Z+5, r1	; 0x05
    10be:	13 96       	adiw	r26, 0x03	; 3
    10c0:	8c 91       	ld	r24, X
    10c2:	13 97       	sbiw	r26, 0x03	; 3
    10c4:	86 83       	std	Z+6, r24	; 0x06
    10c6:	17 82       	std	Z+7, r1	; 0x07
    10c8:	14 96       	adiw	r26, 0x04	; 4
    10ca:	8c 91       	ld	r24, X
    10cc:	14 97       	sbiw	r26, 0x04	; 4
    10ce:	80 87       	std	Z+8, r24	; 0x08
    10d0:	11 86       	std	Z+9, r1	; 0x09
    10d2:	15 96       	adiw	r26, 0x05	; 5
    10d4:	8c 91       	ld	r24, X
    10d6:	15 97       	sbiw	r26, 0x05	; 5
    10d8:	82 87       	std	Z+10, r24	; 0x0a
    10da:	13 86       	std	Z+11, r1	; 0x0b
    10dc:	16 96       	adiw	r26, 0x06	; 6
    10de:	8c 91       	ld	r24, X
    10e0:	16 97       	sbiw	r26, 0x06	; 6
    10e2:	84 87       	std	Z+12, r24	; 0x0c
    10e4:	15 86       	std	Z+13, r1	; 0x0d
    10e6:	17 96       	adiw	r26, 0x07	; 7
    10e8:	8c 91       	ld	r24, X
    10ea:	17 97       	sbiw	r26, 0x07	; 7
    10ec:	86 87       	std	Z+14, r24	; 0x0e
    10ee:	17 86       	std	Z+15, r1	; 0x0f
    10f0:	18 96       	adiw	r26, 0x08	; 8
    10f2:	8c 91       	ld	r24, X
    10f4:	80 8b       	std	Z+16, r24	; 0x10
    10f6:	11 8a       	std	Z+17, r1	; 0x11
    10f8:	c4 56       	subi	r28, 0x64	; 100
    10fa:	de 4f       	sbci	r29, 0xFE	; 254
    10fc:	88 81       	ld	r24, Y
    10fe:	99 81       	ldd	r25, Y+1	; 0x01
    1100:	cc 59       	subi	r28, 0x9C	; 156
    1102:	d1 40       	sbci	r29, 0x01	; 1
    1104:	93 8b       	std	Z+19, r25	; 0x13
    1106:	82 8b       	std	Z+18, r24	; 0x12
    1108:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
								if(crc!=crcv)
    110c:	ad b7       	in	r26, 0x3d	; 61
    110e:	be b7       	in	r27, 0x3e	; 62
    1110:	54 96       	adiw	r26, 0x14	; 20
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	be bf       	out	0x3e, r27	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	ad bf       	out	0x3d, r26	; 61
    111c:	6c 14       	cp	r6, r12
    111e:	7d 04       	cpc	r7, r13
    1120:	e9 f0       	breq	.+58     	; 0x115c <__stack+0x8fd>
								printf("BAD CRC! (%04x vs %04x)\n\r",crc,crcv); /* Si le CRC16 n'est pas bon, l'afficher */
    1122:	00 d0       	rcall	.+0      	; 0x1124 <__stack+0x8c5>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <__stack+0x8c7>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <__stack+0x8c9>
    1128:	ed b7       	in	r30, 0x3d	; 61
    112a:	fe b7       	in	r31, 0x3e	; 62
    112c:	31 96       	adiw	r30, 0x01	; 1
    112e:	89 e0       	ldi	r24, 0x09	; 9
    1130:	93 e0       	ldi	r25, 0x03	; 3
    1132:	ad b7       	in	r26, 0x3d	; 61
    1134:	be b7       	in	r27, 0x3e	; 62
    1136:	12 96       	adiw	r26, 0x02	; 2
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
    113c:	11 97       	sbiw	r26, 0x01	; 1
    113e:	73 82       	std	Z+3, r7	; 0x03
    1140:	62 82       	std	Z+2, r6	; 0x02
    1142:	d5 82       	std	Z+5, r13	; 0x05
    1144:	c4 82       	std	Z+4, r12	; 0x04
    1146:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    114a:	ad b7       	in	r26, 0x3d	; 61
    114c:	be b7       	in	r27, 0x3e	; 62
    114e:	16 96       	adiw	r26, 0x06	; 6
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	be bf       	out	0x3e, r27	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	ad bf       	out	0x3d, r26	; 61
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <__stack+0x913>
							else
							printf("\n\r");
    115c:	00 d0       	rcall	.+0      	; 0x115e <__stack+0x8ff>
    115e:	8e ed       	ldi	r24, 0xDE	; 222
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	ed b7       	in	r30, 0x3d	; 61
    1164:	fe b7       	in	r31, 0x3e	; 62
    1166:	92 83       	std	Z+2, r25	; 0x02
    1168:	81 83       	std	Z+1, r24	; 0x01
    116a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0

							adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + long. chaine */
    1172:	d2 01       	movw	r26, r4
    1174:	8c 91       	ld	r24, X
    1176:	e8 0e       	add	r14, r24
    1178:	f1 1c       	adc	r15, r1
    117a:	01 1d       	adc	r16, r1
    117c:	11 1d       	adc	r17, r1
					unsigned int crc, crcv;
					
					rec[0]=0;
						/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
						while(adr<I2CEEPROM_TOP && rec[0]!=0xFF)
    117e:	bf ef       	ldi	r27, 0xFF	; 255
    1180:	eb 16       	cp	r14, r27
    1182:	bf ef       	ldi	r27, 0xFF	; 255
    1184:	fb 06       	cpc	r15, r27
    1186:	b3 e0       	ldi	r27, 0x03	; 3
    1188:	0b 07       	cpc	r16, r27
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	1b 07       	cpc	r17, r27
    118e:	40 f4       	brcc	.+16     	; 0x11a0 <__stack+0x941>
								printf("BAD CRC! (%04x vs %04x)\n\r",crc,crcv); /* Si le CRC16 n'est pas bon, l'afficher */
							else
							printf("\n\r");

							adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + long. chaine */
							count++;
    1190:	08 94       	sec
    1192:	a1 1c       	adc	r10, r1
    1194:	b1 1c       	adc	r11, r1
					unsigned int crc, crcv;
					
					rec[0]=0;
						/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
						while(adr<I2CEEPROM_TOP && rec[0]!=0xFF)
    1196:	f2 01       	movw	r30, r4
    1198:	80 81       	ld	r24, Z
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	09 f0       	breq	.+2      	; 0x11a0 <__stack+0x941>
    119e:	0f cf       	rjmp	.-482    	; 0xfbe <__stack+0x75f>
							adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + long. chaine */
							count++;
						}
					}
						/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));
    11a0:	8b b7       	in	r24, 0x3b	; 59
    11a2:	80 64       	ori	r24, 0x40	; 64
    11a4:	8b bf       	out	0x3b, r24	; 59
    11a6:	e9 c3       	rjmp	.+2002   	; 0x197a <__stack+0x111b>
				}	
				else if(!stringcomp(commande,"w"))	// Wipe (vider le log complètement)
    11a8:	c4 01       	movw	r24, r8
    11aa:	63 e2       	ldi	r22, 0x23	; 35
    11ac:	73 e0       	ldi	r23, 0x03	; 3
    11ae:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    11b2:	89 2b       	or	r24, r25
    11b4:	99 f4       	brne	.+38     	; 0x11dc <__stack+0x97d>
				{
					printf("WIPING MEM...");
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <__stack+0x959>
    11b8:	85 e2       	ldi	r24, 0x25	; 37
    11ba:	93 e0       	ldi	r25, 0x03	; 3
    11bc:	ad b7       	in	r26, 0x3d	; 61
    11be:	be b7       	in	r27, 0x3e	; 62
    11c0:	12 96       	adiw	r26, 0x02	; 2
    11c2:	9c 93       	st	X, r25
    11c4:	8e 93       	st	-X, r24
    11c6:	11 97       	sbiw	r26, 0x01	; 1
    11c8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					
					/* Définitivement pas d'écriture pendant le formattage!! */
					GICR &= ~((1<<INT0));
    11cc:	8b b7       	in	r24, 0x3b	; 59
    11ce:	8f 7b       	andi	r24, 0xBF	; 191
    11d0:	8b bf       	out	0x3b, r24	; 59
						format_mem();
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <format_mem>
    11da:	39 ce       	rjmp	.-910    	; 0xe4e <__stack+0x5ef>
					write_eeptr(0);
						/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));	
						printf("OK\n\r");
				}
				else if(!stringcomp(commande,"f"))	// Format (Réinitialiser le log)
    11dc:	c4 01       	movw	r24, r8
    11de:	63 e3       	ldi	r22, 0x33	; 51
    11e0:	73 e0       	ldi	r23, 0x03	; 3
    11e2:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    11e6:	89 2b       	or	r24, r25
    11e8:	09 f0       	breq	.+2      	; 0x11ec <__stack+0x98d>
    11ea:	9c c0       	rjmp	.+312    	; 0x1324 <__stack+0xac5>
				{
					printf("FORMATTING...");
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <__stack+0x98f>
    11ee:	85 e3       	ldi	r24, 0x35	; 53
    11f0:	93 e0       	ldi	r25, 0x03	; 3
    11f2:	13 ce       	rjmp	.-986    	; 0xe1a <__stack+0x5bb>
				{
				}
				else
					printf("ERR\n\r");
			}
			else if(mode==LOGON_TEST) /**********************************************************/
    11f4:	c9 56       	subi	r28, 0x69	; 105
    11f6:	de 4f       	sbci	r29, 0xFE	; 254
    11f8:	f8 81       	ld	r31, Y
    11fa:	c7 59       	subi	r28, 0x97	; 151
    11fc:	d1 40       	sbci	r29, 0x01	; 1
    11fe:	f3 30       	cpi	r31, 0x03	; 3
    1200:	09 f0       	breq	.+2      	; 0x1204 <__stack+0x9a5>
    1202:	b4 c0       	rjmp	.+360    	; 0x136c <__stack+0xb0d>
			{
				if(!stringcomp(commande,"t"))	// Dump test (Voir 2 lignes du log encrypté )
    1204:	c4 01       	movw	r24, r8
    1206:	6e e4       	ldi	r22, 0x4E	; 78
    1208:	73 e0       	ldi	r23, 0x03	; 3
    120a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    120e:	89 2b       	or	r24, r25
    1210:	09 f0       	breq	.+2      	; 0x1214 <__stack+0x9b5>
    1212:	88 c0       	rjmp	.+272    	; 0x1324 <__stack+0xac5>
					unsigned long adr=0;
					unsigned char rec[50];
					unsigned int count=0;
					unsigned int i;
					
					rec[0]=0;
    1214:	c2 55       	subi	r28, 0x52	; 82
    1216:	df 4f       	sbci	r29, 0xFF	; 255
    1218:	18 82       	st	Y, r1
    121a:	ce 5a       	subi	r28, 0xAE	; 174
    121c:	d0 40       	sbci	r29, 0x00	; 0

					printf("BEGIN>>>");
    121e:	00 d0       	rcall	.+0      	; 0x1220 <__stack+0x9c1>
    1220:	80 e5       	ldi	r24, 0x50	; 80
    1222:	93 e0       	ldi	r25, 0x03	; 3
    1224:	ad b7       	in	r26, 0x3d	; 61
    1226:	be b7       	in	r27, 0x3e	; 62
    1228:	12 96       	adiw	r26, 0x02	; 2
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    122e:	11 97       	sbiw	r26, 0x01	; 1
    1230:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
    1234:	8b b7       	in	r24, 0x3b	; 59
    1236:	8f 7b       	andi	r24, 0xBF	; 191
    1238:	8b bf       	out	0x3b, r24	; 59
    123a:	cc 24       	eor	r12, r12
    123c:	dd 24       	eor	r13, r13
    123e:	76 01       	movw	r14, r12
    1240:	aa 24       	eor	r10, r10
    1242:	bb 24       	eor	r11, r11
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	54 c0       	rjmp	.+168    	; 0x12f2 <__stack+0xa93>

					while(adr<I2CEEPROM_TOP && rec[0]!=0xFF && count<2)
					{
						I2CEEPROM_read(adr,1,(char *)rec);
    124a:	c7 01       	movw	r24, r14
    124c:	b6 01       	movw	r22, r12
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	9e 01       	movw	r18, r28
    1254:	22 55       	subi	r18, 0x52	; 82
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
						if(rec[0]!=0xFF)
    125c:	c2 55       	subi	r28, 0x52	; 82
    125e:	df 4f       	sbci	r29, 0xFF	; 255
    1260:	48 81       	ld	r20, Y
    1262:	ce 5a       	subi	r28, 0xAE	; 174
    1264:	d0 40       	sbci	r29, 0x00	; 0
    1266:	4f 3f       	cpi	r20, 0xFF	; 255
    1268:	09 f4       	brne	.+2      	; 0x126c <__stack+0xa0d>
    126a:	43 c0       	rjmp	.+134    	; 0x12f2 <__stack+0xa93>
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);
    126c:	c7 01       	movw	r24, r14
    126e:	b6 01       	movw	r22, r12
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	9e 01       	movw	r18, r28
    1274:	22 55       	subi	r18, 0x52	; 82
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
    127c:	01 e0       	ldi	r16, 0x01	; 1
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	1e c0       	rjmp	.+60     	; 0x12be <__stack+0xa5f>

							/* Affichage des bytes en hexadécimal */
							for(i=1;i<(rec[0]);i++)
							{
								printf("%02x",rec[i]);
    1282:	00 d0       	rcall	.+0      	; 0x1284 <__stack+0xa25>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <__stack+0xa27>
    1286:	ed b7       	in	r30, 0x3d	; 61
    1288:	fe b7       	in	r31, 0x3e	; 62
    128a:	31 96       	adiw	r30, 0x01	; 1
    128c:	89 e5       	ldi	r24, 0x59	; 89
    128e:	93 e0       	ldi	r25, 0x03	; 3
    1290:	ad b7       	in	r26, 0x3d	; 61
    1292:	be b7       	in	r27, 0x3e	; 62
    1294:	12 96       	adiw	r26, 0x02	; 2
    1296:	9c 93       	st	X, r25
    1298:	8e 93       	st	-X, r24
    129a:	11 97       	sbiw	r26, 0x01	; 1
    129c:	ae ea       	ldi	r26, 0xAE	; 174
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	ac 0f       	add	r26, r28
    12a2:	bd 1f       	adc	r27, r29
    12a4:	a0 0f       	add	r26, r16
    12a6:	b1 1f       	adc	r27, r17
    12a8:	8c 91       	ld	r24, X
    12aa:	82 83       	std	Z+2, r24	; 0x02
    12ac:	13 82       	std	Z+3, r1	; 0x03
    12ae:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						if(rec[0]!=0xFF)
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);

							/* Affichage des bytes en hexadécimal */
							for(i=1;i<(rec[0]);i++)
    12b2:	0f 5f       	subi	r16, 0xFF	; 255
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	c2 55       	subi	r28, 0x52	; 82
    12c0:	df 4f       	sbci	r29, 0xFF	; 255
    12c2:	28 81       	ld	r18, Y
    12c4:	ce 5a       	subi	r28, 0xAE	; 174
    12c6:	d0 40       	sbci	r29, 0x00	; 0
    12c8:	82 2f       	mov	r24, r18
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	08 17       	cp	r16, r24
    12ce:	19 07       	cpc	r17, r25
    12d0:	c0 f2       	brcs	.-80     	; 0x1282 <__stack+0xa23>
							{
								printf("%02x",rec[i]);
							}
								adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + nb cars */
    12d2:	c2 0e       	add	r12, r18
    12d4:	d1 1c       	adc	r13, r1
    12d6:	e1 1c       	adc	r14, r1
    12d8:	f1 1c       	adc	r15, r1

					printf("BEGIN>>>");
					/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));

					while(adr<I2CEEPROM_TOP && rec[0]!=0xFF && count<2)
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	c9 16       	cp	r12, r25
    12de:	9f ef       	ldi	r25, 0xFF	; 255
    12e0:	d9 06       	cpc	r13, r25
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	e9 06       	cpc	r14, r25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	f9 06       	cpc	r15, r25
    12ea:	78 f4       	brcc	.+30     	; 0x130a <__stack+0xaab>
							for(i=1;i<(rec[0]);i++)
							{
								printf("%02x",rec[i]);
							}
								adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + nb cars */
							count++;
    12ec:	08 94       	sec
    12ee:	a1 1c       	adc	r10, r1
    12f0:	b1 1c       	adc	r11, r1

					printf("BEGIN>>>");
					/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));

					while(adr<I2CEEPROM_TOP && rec[0]!=0xFF && count<2)
    12f2:	c2 55       	subi	r28, 0x52	; 82
    12f4:	df 4f       	sbci	r29, 0xFF	; 255
    12f6:	88 81       	ld	r24, Y
    12f8:	ce 5a       	subi	r28, 0xAE	; 174
    12fa:	d0 40       	sbci	r29, 0x00	; 0
    12fc:	8f 3f       	cpi	r24, 0xFF	; 255
    12fe:	29 f0       	breq	.+10     	; 0x130a <__stack+0xaab>
    1300:	a2 e0       	ldi	r26, 0x02	; 2
    1302:	aa 16       	cp	r10, r26
    1304:	b1 04       	cpc	r11, r1
    1306:	08 f4       	brcc	.+2      	; 0x130a <__stack+0xaab>
    1308:	a0 cf       	rjmp	.-192    	; 0x124a <__stack+0x9eb>
							}
								adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + nb cars */
							count++;
						}
					}
						printf("<<<ENDTEST\n\r");
    130a:	00 d0       	rcall	.+0      	; 0x130c <__stack+0xaad>
    130c:	8e e5       	ldi	r24, 0x5E	; 94
    130e:	93 e0       	ldi	r25, 0x03	; 3
    1310:	ed b7       	in	r30, 0x3d	; 61
    1312:	fe b7       	in	r31, 0x3e	; 62
    1314:	92 83       	std	Z+2, r25	; 0x02
    1316:	81 83       	std	Z+1, r24	; 0x01
    1318:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));
    131c:	8b b7       	in	r24, 0x3b	; 59
    131e:	80 64       	ori	r24, 0x40	; 64
    1320:	8b bf       	out	0x3b, r24	; 59
    1322:	29 c3       	rjmp	.+1618   	; 0x1976 <__stack+0x1117>
				}
				else if(!stringcomp(commande,"l"))	// Logoff (sortir du mode test)
    1324:	c4 01       	movw	r24, r8
    1326:	63 e4       	ldi	r22, 0x43	; 67
    1328:	73 e0       	ldi	r23, 0x03	; 3
    132a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    132e:	89 2b       	or	r24, r25
    1330:	09 f4       	brne	.+2      	; 0x1334 <__stack+0xad5>
    1332:	3f ca       	rjmp	.-2946   	; 0x7b2 <main+0x212>
				{
					mode=LOGOFF;
				}
				else if(!stringcomp(commande,"e"))	// Exit (sortir du mode test en éteignant le bluetooth)
    1334:	c4 01       	movw	r24, r8
    1336:	65 e4       	ldi	r22, 0x45	; 69
    1338:	73 e0       	ldi	r23, 0x03	; 3
    133a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    133e:	89 2b       	or	r24, r25
    1340:	09 f4       	brne	.+2      	; 0x1344 <__stack+0xae5>
    1342:	f7 c2       	rjmp	.+1518   	; 0x1932 <__stack+0x10d3>
				{
					mode=LOGOFF;
					/** Désactivation bluetooth */
					PORTC |= ((1<<5));	
				}
				else if(!stringcomp(commande,""))	// ne rien faire avec un enter
    1344:	c4 01       	movw	r24, r8
    1346:	67 e4       	ldi	r22, 0x47	; 71
    1348:	73 e0       	ldi	r23, 0x03	; 3
    134a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    134e:	89 2b       	or	r24, r25
    1350:	09 f4       	brne	.+2      	; 0x1354 <__stack+0xaf5>
    1352:	13 c3       	rjmp	.+1574   	; 0x197a <__stack+0x111b>
				{
				}
				else
					printf("ERR\n\r");
    1354:	00 d0       	rcall	.+0      	; 0x1356 <__stack+0xaf7>
    1356:	e8 e4       	ldi	r30, 0x48	; 72
    1358:	f3 e0       	ldi	r31, 0x03	; 3
    135a:	ad b7       	in	r26, 0x3d	; 61
    135c:	be b7       	in	r27, 0x3e	; 62
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	fc 93       	st	X, r31
    1362:	ee 93       	st	-X, r30
    1364:	11 97       	sbiw	r26, 0x01	; 1
    1366:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    136a:	05 c3       	rjmp	.+1546   	; 0x1976 <__stack+0x1117>
			}
			else if(mode==LOGON_REMOTE) /**********************************************************/
			{
				if(!stringcomp(commande,"v"))	// Version (voir la version du mircologiciel)
    136c:	c4 01       	movw	r24, r8
    136e:	6b e4       	ldi	r22, 0x4B	; 75
    1370:	71 e0       	ldi	r23, 0x01	; 1
    1372:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    1376:	89 2b       	or	r24, r25
    1378:	09 f5       	brne	.+66     	; 0x13bc <__stack+0xb5d>
				{
					char version[32];

					EEPROM_read((int)&EEPVars.E_version,32,version);
    137a:	8e 01       	movw	r16, r28
    137c:	02 57       	subi	r16, 0x72	; 114
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	82 e6       	ldi	r24, 0x62	; 98
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	60 e2       	ldi	r22, 0x20	; 32
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	a8 01       	movw	r20, r16
    138a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>

					printf("%s\n\r",version);
    138e:	00 d0       	rcall	.+0      	; 0x1390 <__stack+0xb31>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <__stack+0xb33>
    1392:	8d e4       	ldi	r24, 0x4D	; 77
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	ad b7       	in	r26, 0x3d	; 61
    1398:	be b7       	in	r27, 0x3e	; 62
    139a:	12 96       	adiw	r26, 0x02	; 2
    139c:	9c 93       	st	X, r25
    139e:	8e 93       	st	-X, r24
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	14 96       	adiw	r26, 0x04	; 4
    13a4:	1c 93       	st	X, r17
    13a6:	0e 93       	st	-X, r16
    13a8:	13 97       	sbiw	r26, 0x03	; 3
    13aa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    13ae:	b2 e0       	ldi	r27, 0x02	; 2
    13b0:	c9 56       	subi	r28, 0x69	; 105
    13b2:	de 4f       	sbci	r29, 0xFE	; 254
    13b4:	b8 83       	st	Y, r27
    13b6:	c7 59       	subi	r28, 0x97	; 151
    13b8:	d1 40       	sbci	r29, 0x01	; 1
    13ba:	a0 cd       	rjmp	.-1216   	; 0xefc <__stack+0x69d>
				}
				else if(!stringcomp(commande,"d"))	// Dump (Voir le log encrypté )
    13bc:	c4 01       	movw	r24, r8
    13be:	6d ed       	ldi	r22, 0xDD	; 221
    13c0:	72 e0       	ldi	r23, 0x02	; 2
    13c2:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    13c6:	89 2b       	or	r24, r25
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__stack+0xb6d>
    13ca:	aa c0       	rjmp	.+340    	; 0x1520 <__stack+0xcc1>
					unsigned long adr=0;
					unsigned char rec[132];
					unsigned int count=0;
					unsigned int i;
					
					rec[0]=0;
    13cc:	cd 5e       	subi	r28, 0xED	; 237
    13ce:	de 4f       	sbci	r29, 0xFE	; 254
    13d0:	18 82       	st	Y, r1
    13d2:	c3 51       	subi	r28, 0x13	; 19
    13d4:	d1 40       	sbci	r29, 0x01	; 1
					printf("BEGIN>>>");
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <__stack+0xb79>
    13d8:	80 e5       	ldi	r24, 0x50	; 80
    13da:	93 e0       	ldi	r25, 0x03	; 3
    13dc:	ed b7       	in	r30, 0x3d	; 61
    13de:	fe b7       	in	r31, 0x3e	; 62
    13e0:	92 83       	std	Z+2, r25	; 0x02
    13e2:	81 83       	std	Z+1, r24	; 0x01
    13e4:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
    13e8:	8b b7       	in	r24, 0x3b	; 59
    13ea:	8f 7b       	andi	r24, 0xBF	; 191
    13ec:	8b bf       	out	0x3b, r24	; 59
    13ee:	ee 24       	eor	r14, r14
    13f0:	ff 24       	eor	r15, r15
    13f2:	87 01       	movw	r16, r14
    13f4:	aa 24       	eor	r10, r10
    13f6:	bb 24       	eor	r11, r11
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	56 c0       	rjmp	.+172    	; 0x14aa <__stack+0xc4b>
					while(adr<I2CEEPROM_TOP && rec[0]!=0xFF)
					{
						I2CEEPROM_read(adr,1,(char *)rec);
    13fe:	c8 01       	movw	r24, r16
    1400:	b7 01       	movw	r22, r14
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	9e 01       	movw	r18, r28
    1408:	2d 5e       	subi	r18, 0xED	; 237
    140a:	3e 4f       	sbci	r19, 0xFE	; 254
    140c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
						if(rec[0]!=0xFF)
    1410:	cd 5e       	subi	r28, 0xED	; 237
    1412:	de 4f       	sbci	r29, 0xFE	; 254
    1414:	48 81       	ld	r20, Y
    1416:	c3 51       	subi	r28, 0x13	; 19
    1418:	d1 40       	sbci	r29, 0x01	; 1
    141a:	4f 3f       	cpi	r20, 0xFF	; 255
    141c:	09 f4       	brne	.+2      	; 0x1420 <__stack+0xbc1>
    141e:	45 c0       	rjmp	.+138    	; 0x14aa <__stack+0xc4b>
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);
    1420:	c8 01       	movw	r24, r16
    1422:	b7 01       	movw	r22, r14
    1424:	50 e0       	ldi	r21, 0x00	; 0
    1426:	9e 01       	movw	r18, r28
    1428:	2d 5e       	subi	r18, 0xED	; 237
    142a:	3e 4f       	sbci	r19, 0xFE	; 254
    142c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <I2CEEPROM_read>
    1430:	41 e0       	ldi	r20, 0x01	; 1
    1432:	c4 2e       	mov	r12, r20
    1434:	d1 2c       	mov	r13, r1
    1436:	1f c0       	rjmp	.+62     	; 0x1476 <__stack+0xc17>

							/* Affichage des bytes en hexadécimal */
							for(i=1;i<(rec[0]);i++)
							{
								printf("%02x",rec[i]);
    1438:	00 d0       	rcall	.+0      	; 0x143a <__stack+0xbdb>
    143a:	00 d0       	rcall	.+0      	; 0x143c <__stack+0xbdd>
    143c:	ed b7       	in	r30, 0x3d	; 61
    143e:	fe b7       	in	r31, 0x3e	; 62
    1440:	31 96       	adiw	r30, 0x01	; 1
    1442:	89 e5       	ldi	r24, 0x59	; 89
    1444:	93 e0       	ldi	r25, 0x03	; 3
    1446:	ad b7       	in	r26, 0x3d	; 61
    1448:	be b7       	in	r27, 0x3e	; 62
    144a:	12 96       	adiw	r26, 0x02	; 2
    144c:	9c 93       	st	X, r25
    144e:	8e 93       	st	-X, r24
    1450:	11 97       	sbiw	r26, 0x01	; 1
    1452:	a3 e1       	ldi	r26, 0x13	; 19
    1454:	b1 e0       	ldi	r27, 0x01	; 1
    1456:	ac 0f       	add	r26, r28
    1458:	bd 1f       	adc	r27, r29
    145a:	ac 0d       	add	r26, r12
    145c:	bd 1d       	adc	r27, r13
    145e:	8c 91       	ld	r24, X
    1460:	82 83       	std	Z+2, r24	; 0x02
    1462:	13 82       	std	Z+3, r1	; 0x03
    1464:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						if(rec[0]!=0xFF)
						{
							I2CEEPROM_read(adr,rec[0],(char *)rec);

							/* Affichage des bytes en hexadécimal */
							for(i=1;i<(rec[0]);i++)
    1468:	08 94       	sec
    146a:	c1 1c       	adc	r12, r1
    146c:	d1 1c       	adc	r13, r1
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cd 5e       	subi	r28, 0xED	; 237
    1478:	de 4f       	sbci	r29, 0xFE	; 254
    147a:	28 81       	ld	r18, Y
    147c:	c3 51       	subi	r28, 0x13	; 19
    147e:	d1 40       	sbci	r29, 0x01	; 1
    1480:	82 2f       	mov	r24, r18
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	c8 16       	cp	r12, r24
    1486:	d9 06       	cpc	r13, r25
    1488:	b8 f2       	brcs	.-82     	; 0x1438 <__stack+0xbd9>
							{
								printf("%02x",rec[i]);
							}
								adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + nb cars */
    148a:	e2 0e       	add	r14, r18
    148c:	f1 1c       	adc	r15, r1
    148e:	01 1d       	adc	r16, r1
    1490:	11 1d       	adc	r17, r1
							count++;
    1492:	08 94       	sec
    1494:	a1 1c       	adc	r10, r1
    1496:	b1 1c       	adc	r11, r1
					
					rec[0]=0;
					printf("BEGIN>>>");
					/* Pas d'écriture pendant le dump!! */
					GICR &= ~((1<<INT0));
					while(adr<I2CEEPROM_TOP && rec[0]!=0xFF)
    1498:	9f ef       	ldi	r25, 0xFF	; 255
    149a:	e9 16       	cp	r14, r25
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	f9 06       	cpc	r15, r25
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	09 07       	cpc	r16, r25
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	19 07       	cpc	r17, r25
    14a8:	40 f4       	brcc	.+16     	; 0x14ba <__stack+0xc5b>
    14aa:	cd 5e       	subi	r28, 0xED	; 237
    14ac:	de 4f       	sbci	r29, 0xFE	; 254
    14ae:	88 81       	ld	r24, Y
    14b0:	c3 51       	subi	r28, 0x13	; 19
    14b2:	d1 40       	sbci	r29, 0x01	; 1
    14b4:	8f 3f       	cpi	r24, 0xFF	; 255
    14b6:	09 f0       	breq	.+2      	; 0x14ba <__stack+0xc5b>
    14b8:	a2 cf       	rjmp	.-188    	; 0x13fe <__stack+0xb9f>
								adr+=((unsigned long)rec[0]);	/* Prochaine chaine à adresse actuelle + nb cars */
							count++;
						}
					}
					/* Fin de la lecture et donne le nombre d'enregistrements */
					if(end=='1')
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	2b e6       	ldi	r18, 0x6B	; 107
    14be:	33 e0       	ldi	r19, 0x03	; 3
    14c0:	81 33       	cpi	r24, 0x31	; 49
    14c2:	b1 f4       	brne	.+44     	; 0x14f0 <__stack+0xc91>
						printf("<<<END%i\n\r",(count*3)/4); // Faux END (75%)
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <__stack+0xc67>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <__stack+0xc69>
    14c8:	ad b7       	in	r26, 0x3d	; 61
    14ca:	be b7       	in	r27, 0x3e	; 62
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	3c 93       	st	X, r19
    14d0:	2e 93       	st	-X, r18
    14d2:	11 97       	sbiw	r26, 0x01	; 1
    14d4:	c5 01       	movw	r24, r10
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	8a 0d       	add	r24, r10
    14dc:	9b 1d       	adc	r25, r11
    14de:	96 95       	lsr	r25
    14e0:	87 95       	ror	r24
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	9c 93       	st	X, r25
    14ea:	8e 93       	st	-X, r24
    14ec:	13 97       	sbiw	r26, 0x03	; 3
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <__stack+0xca1>
					else
						printf("<<<END%i\n\r",count);
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <__stack+0xc93>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <__stack+0xc95>
    14f4:	ed b7       	in	r30, 0x3d	; 61
    14f6:	fe b7       	in	r31, 0x3e	; 62
    14f8:	32 83       	std	Z+2, r19	; 0x02
    14fa:	21 83       	std	Z+1, r18	; 0x01
    14fc:	b4 82       	std	Z+4, r11	; 0x04
    14fe:	a3 82       	std	Z+3, r10	; 0x03
    1500:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0

					/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));
    150c:	8b b7       	in	r24, 0x3b	; 59
    150e:	80 64       	ori	r24, 0x40	; 64
    1510:	8b bf       	out	0x3b, r24	; 59
    1512:	f2 e0       	ldi	r31, 0x02	; 2
    1514:	c9 56       	subi	r28, 0x69	; 105
    1516:	de 4f       	sbci	r29, 0xFE	; 254
    1518:	f8 83       	st	Y, r31
    151a:	c7 59       	subi	r28, 0x97	; 151
    151c:	d1 40       	sbci	r29, 0x01	; 1
    151e:	2d c2       	rjmp	.+1114   	; 0x197a <__stack+0x111b>
				}
				else if(!stringcomp(commande,"f"))	// Format (Réinitialisé la mémoire I2CEEPROM)
    1520:	c4 01       	movw	r24, r8
    1522:	63 e3       	ldi	r22, 0x33	; 51
    1524:	73 e0       	ldi	r23, 0x03	; 3
    1526:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    152a:	89 2b       	or	r24, r25
    152c:	e9 f4       	brne	.+58     	; 0x1568 <__stack+0xd09>
				{
					/* Définitivement pas d'écriture pendant le formattage!! */
					GICR &= ~((1<<INT0));
    152e:	8b b7       	in	r24, 0x3b	; 59
    1530:	8f 7b       	andi	r24, 0xBF	; 191
    1532:	8b bf       	out	0x3b, r24	; 59

					temp[0]=0xff;
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	8f 83       	std	Y+7, r24	; 0x07
					I2CEEPROM_write(0, 1, temp);
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	41 e0       	ldi	r20, 0x01	; 1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	9e 01       	movw	r18, r28
    1546:	29 5f       	subi	r18, 0xF9	; 249
    1548:	3f 4f       	sbci	r19, 0xFF	; 255
    154a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <I2CEEPROM_write>
					write_eeptr(0);
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 04 13 	call	0x2608	; 0x2608 <write_eeptr>
				
					/* On rétablit l'interruption pour l'écriture */
					GICR |= ((1<<INT0));	
    155a:	8b b7       	in	r24, 0x3b	; 59
    155c:	80 64       	ori	r24, 0x40	; 64
    155e:	8b bf       	out	0x3b, r24	; 59

					printf("OK\n\r");
    1560:	00 d0       	rcall	.+0      	; 0x1562 <__stack+0xd03>
    1562:	85 e0       	ldi	r24, 0x05	; 5
    1564:	92 e0       	ldi	r25, 0x02	; 2
    1566:	ba c1       	rjmp	.+884    	; 0x18dc <__stack+0x107d>
				}
				else if(!stringcomp(commande,"s"))	// SetClock (ajuster l'heure)
    1568:	c4 01       	movw	r24, r8
    156a:	66 e7       	ldi	r22, 0x76	; 118
    156c:	73 e0       	ldi	r23, 0x03	; 3
    156e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    1572:	89 2b       	or	r24, r25
    1574:	09 f0       	breq	.+2      	; 0x1578 <__stack+0xd19>
    1576:	fe c0       	rjmp	.+508    	; 0x1774 <__stack+0xf15>
				{
					RTC_get_time();
    1578:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>
				
					printf("Year>");
    157c:	00 d0       	rcall	.+0      	; 0x157e <__stack+0xd1f>
    157e:	88 ed       	ldi	r24, 0xD8	; 216
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	ed b7       	in	r30, 0x3d	; 61
    1584:	fe b7       	in	r31, 0x3e	; 62
    1586:	92 83       	std	Z+2, r25	; 0x02
    1588:	81 83       	std	Z+1, r24	; 0x01
    158a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 5, temp);
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	8e 01       	movw	r16, r28
    1594:	09 5f       	subi	r16, 0xF9	; 249
    1596:	1f 4f       	sbci	r17, 0xFF	; 255
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	a8 01       	movw	r20, r16
    15a0:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    15a4:	8f 81       	ldd	r24, Y+7	; 0x07
    15a6:	88 23       	and	r24, r24
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <__stack+0xd59>
						heure_actuelle.annee=strtoi(temp);
    15aa:	c8 01       	movw	r24, r16
    15ac:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    15b0:	90 93 c7 03 	sts	0x03C7, r25
    15b4:	80 93 c6 03 	sts	0x03C6, r24
					printf("\n\r");
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <__stack+0xd5b>
    15ba:	ee ed       	ldi	r30, 0xDE	; 222
    15bc:	f1 e0       	ldi	r31, 0x01	; 1
    15be:	ad b7       	in	r26, 0x3d	; 61
    15c0:	be b7       	in	r27, 0x3e	; 62
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	fc 93       	st	X, r31
    15c6:	ee 93       	st	-X, r30
    15c8:	11 97       	sbiw	r26, 0x01	; 1
    15ca:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Month>");
    15ce:	81 ee       	ldi	r24, 0xE1	; 225
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	ad b7       	in	r26, 0x3d	; 61
    15d4:	be b7       	in	r27, 0x3e	; 62
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	9c 93       	st	X, r25
    15da:	8e 93       	st	-X, r24
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	8e 01       	movw	r16, r28
    15e8:	09 5f       	subi	r16, 0xF9	; 249
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	a8 01       	movw	r20, r16
    15f4:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	88 23       	and	r24, r24
    15fc:	29 f0       	breq	.+10     	; 0x1608 <__stack+0xda9>
					heure_actuelle.mois=(unsigned char)strtoi(temp);
    15fe:	c8 01       	movw	r24, r16
    1600:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    1604:	80 93 c8 03 	sts	0x03C8, r24
					printf("\n\r");
    1608:	00 d0       	rcall	.+0      	; 0x160a <__stack+0xdab>
    160a:	8e ed       	ldi	r24, 0xDE	; 222
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	ed b7       	in	r30, 0x3d	; 61
    1610:	fe b7       	in	r31, 0x3e	; 62
    1612:	92 83       	std	Z+2, r25	; 0x02
    1614:	81 83       	std	Z+1, r24	; 0x01
    1616:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Day>");
    161a:	88 ee       	ldi	r24, 0xE8	; 232
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	ad b7       	in	r26, 0x3d	; 61
    1620:	be b7       	in	r27, 0x3e	; 62
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	9c 93       	st	X, r25
    1626:	8e 93       	st	-X, r24
    1628:	11 97       	sbiw	r26, 0x01	; 1
    162a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	8e 01       	movw	r16, r28
    1634:	09 5f       	subi	r16, 0xF9	; 249
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	63 e0       	ldi	r22, 0x03	; 3
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	a8 01       	movw	r20, r16
    1640:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    1644:	8f 81       	ldd	r24, Y+7	; 0x07
    1646:	88 23       	and	r24, r24
    1648:	29 f0       	breq	.+10     	; 0x1654 <__stack+0xdf5>
						heure_actuelle.jour=(unsigned char)strtoi(temp);
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    1650:	80 93 c9 03 	sts	0x03C9, r24
					printf("\n\r");
    1654:	00 d0       	rcall	.+0      	; 0x1656 <__stack+0xdf7>
    1656:	8e ed       	ldi	r24, 0xDE	; 222
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	ed b7       	in	r30, 0x3d	; 61
    165c:	fe b7       	in	r31, 0x3e	; 62
    165e:	92 83       	std	Z+2, r25	; 0x02
    1660:	81 83       	std	Z+1, r24	; 0x01
    1662:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Hour>");
    1666:	8d ee       	ldi	r24, 0xED	; 237
    1668:	91 e0       	ldi	r25, 0x01	; 1
    166a:	ad b7       	in	r26, 0x3d	; 61
    166c:	be b7       	in	r27, 0x3e	; 62
    166e:	12 96       	adiw	r26, 0x02	; 2
    1670:	9c 93       	st	X, r25
    1672:	8e 93       	st	-X, r24
    1674:	11 97       	sbiw	r26, 0x01	; 1
    1676:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	8e 01       	movw	r16, r28
    1680:	09 5f       	subi	r16, 0xF9	; 249
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	a8 01       	movw	r20, r16
    168c:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	88 23       	and	r24, r24
    1694:	29 f0       	breq	.+10     	; 0x16a0 <__stack+0xe41>
						heure_actuelle.heure=(unsigned char)strtoi(temp);
    1696:	c8 01       	movw	r24, r16
    1698:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    169c:	80 93 cb 03 	sts	0x03CB, r24
					printf("\n\r");
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <__stack+0xe43>
    16a2:	8e ed       	ldi	r24, 0xDE	; 222
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	ed b7       	in	r30, 0x3d	; 61
    16a8:	fe b7       	in	r31, 0x3e	; 62
    16aa:	92 83       	std	Z+2, r25	; 0x02
    16ac:	81 83       	std	Z+1, r24	; 0x01
    16ae:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Minutes>");
    16b2:	83 ef       	ldi	r24, 0xF3	; 243
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	ad b7       	in	r26, 0x3d	; 61
    16b8:	be b7       	in	r27, 0x3e	; 62
    16ba:	12 96       	adiw	r26, 0x02	; 2
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	11 97       	sbiw	r26, 0x01	; 1
    16c2:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	8e 01       	movw	r16, r28
    16cc:	09 5f       	subi	r16, 0xF9	; 249
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	63 e0       	ldi	r22, 0x03	; 3
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	a8 01       	movw	r20, r16
    16d8:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    16dc:	8f 81       	ldd	r24, Y+7	; 0x07
    16de:	88 23       	and	r24, r24
    16e0:	29 f0       	breq	.+10     	; 0x16ec <__stack+0xe8d>
						heure_actuelle.minute=(unsigned char)strtoi(temp);		
    16e2:	c8 01       	movw	r24, r16
    16e4:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    16e8:	80 93 cc 03 	sts	0x03CC, r24
					printf("\n\r");			
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <__stack+0xe8f>
    16ee:	8e ed       	ldi	r24, 0xDE	; 222
    16f0:	91 e0       	ldi	r25, 0x01	; 1
    16f2:	ed b7       	in	r30, 0x3d	; 61
    16f4:	fe b7       	in	r31, 0x3e	; 62
    16f6:	92 83       	std	Z+2, r25	; 0x02
    16f8:	81 83       	std	Z+1, r24	; 0x01
    16fa:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("Seconds>");	
    16fe:	8c ef       	ldi	r24, 0xFC	; 252
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	ad b7       	in	r26, 0x3d	; 61
    1704:	be b7       	in	r27, 0x3e	; 62
    1706:	12 96       	adiw	r26, 0x02	; 2
    1708:	9c 93       	st	X, r25
    170a:	8e 93       	st	-X, r24
    170c:	11 97       	sbiw	r26, 0x01	; 1
    170e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					USART_getstring(ECHO, 3, temp);
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	8e 01       	movw	r16, r28
    1718:	09 5f       	subi	r16, 0xF9	; 249
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	63 e0       	ldi	r22, 0x03	; 3
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	a8 01       	movw	r20, r16
    1724:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(*temp!=0)
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	88 23       	and	r24, r24
    172c:	29 f0       	breq	.+10     	; 0x1738 <__stack+0xed9>
						heure_actuelle.seconde=(unsigned char)strtoi(temp);
    172e:	c8 01       	movw	r24, r16
    1730:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <strtoi>
    1734:	80 93 cd 03 	sts	0x03CD, r24
					printf("\n\r");
    1738:	00 d0       	rcall	.+0      	; 0x173a <__stack+0xedb>
    173a:	8e ed       	ldi	r24, 0xDE	; 222
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	ed b7       	in	r30, 0x3d	; 61
    1740:	fe b7       	in	r31, 0x3e	; 62
    1742:	92 83       	std	Z+2, r25	; 0x02
    1744:	81 83       	std	Z+1, r24	; 0x01
    1746:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					printf("OK\n\r");				
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	ad b7       	in	r26, 0x3d	; 61
    1750:	be b7       	in	r27, 0x3e	; 62
    1752:	12 96       	adiw	r26, 0x02	; 2
    1754:	9c 93       	st	X, r25
    1756:	8e 93       	st	-X, r24
    1758:	11 97       	sbiw	r26, 0x01	; 1
    175a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						RTC_set_time();
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0e 94 8b 10 	call	0x2116	; 0x2116 <RTC_set_time>
    1766:	b2 e0       	ldi	r27, 0x02	; 2
    1768:	c9 56       	subi	r28, 0x69	; 105
    176a:	de 4f       	sbci	r29, 0xFE	; 254
    176c:	b8 83       	st	Y, r27
    176e:	c7 59       	subi	r28, 0x97	; 151
    1770:	d1 40       	sbci	r29, 0x01	; 1
    1772:	03 c1       	rjmp	.+518    	; 0x197a <__stack+0x111b>

				}
				else if(!stringcomp(commande,"c"))	// ShowClock (voir l'heure)
    1774:	c4 01       	movw	r24, r8
    1776:	6a e0       	ldi	r22, 0x0A	; 10
    1778:	72 e0       	ldi	r23, 0x02	; 2
    177a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    177e:	89 2b       	or	r24, r25
    1780:	09 f0       	breq	.+2      	; 0x1784 <__stack+0xf25>
    1782:	42 c0       	rjmp	.+132    	; 0x1808 <__stack+0xfa9>
				{
					RTC_get_time();
    1784:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <RTC_get_time>

					printf("%02i/%02i/%02i %02i:%02i:%02i ",(unsigned char)(heure_actuelle.annee-2000),heure_actuelle.mois,heure_actuelle.jour,heure_actuelle.heure,heure_actuelle.minute,heure_actuelle.seconde);
    1788:	ed b7       	in	r30, 0x3d	; 61
    178a:	fe b7       	in	r31, 0x3e	; 62
    178c:	3e 97       	sbiw	r30, 0x0e	; 14
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	fe bf       	out	0x3e, r31	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	ed bf       	out	0x3d, r30	; 61
    1798:	31 96       	adiw	r30, 0x01	; 1
    179a:	8c e0       	ldi	r24, 0x0C	; 12
    179c:	92 e0       	ldi	r25, 0x02	; 2
    179e:	ad b7       	in	r26, 0x3d	; 61
    17a0:	be b7       	in	r27, 0x3e	; 62
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	9c 93       	st	X, r25
    17a6:	8e 93       	st	-X, r24
    17a8:	11 97       	sbiw	r26, 0x01	; 1
    17aa:	80 91 c6 03 	lds	r24, 0x03C6
    17ae:	80 5d       	subi	r24, 0xD0	; 208
    17b0:	82 83       	std	Z+2, r24	; 0x02
    17b2:	13 82       	std	Z+3, r1	; 0x03
    17b4:	80 91 c8 03 	lds	r24, 0x03C8
    17b8:	84 83       	std	Z+4, r24	; 0x04
    17ba:	15 82       	std	Z+5, r1	; 0x05
    17bc:	80 91 c9 03 	lds	r24, 0x03C9
    17c0:	86 83       	std	Z+6, r24	; 0x06
    17c2:	17 82       	std	Z+7, r1	; 0x07
    17c4:	80 91 cb 03 	lds	r24, 0x03CB
    17c8:	80 87       	std	Z+8, r24	; 0x08
    17ca:	11 86       	std	Z+9, r1	; 0x09
    17cc:	80 91 cc 03 	lds	r24, 0x03CC
    17d0:	82 87       	std	Z+10, r24	; 0x0a
    17d2:	13 86       	std	Z+11, r1	; 0x0b
    17d4:	80 91 cd 03 	lds	r24, 0x03CD
    17d8:	84 87       	std	Z+12, r24	; 0x0c
    17da:	15 86       	std	Z+13, r1	; 0x0d
    17dc:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>

					if(heure_actuelle.batt_low)
    17e0:	ed b7       	in	r30, 0x3d	; 61
    17e2:	fe b7       	in	r31, 0x3e	; 62
    17e4:	3e 96       	adiw	r30, 0x0e	; 14
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	fe bf       	out	0x3e, r31	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	ed bf       	out	0x3d, r30	; 61
    17f0:	80 91 ce 03 	lds	r24, 0x03CE
    17f4:	88 23       	and	r24, r24
    17f6:	21 f0       	breq	.+8      	; 0x1800 <__stack+0xfa1>
					{
						printf("BAT FAIL\n\r");
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <__stack+0xf9b>
    17fa:	8b e2       	ldi	r24, 0x2B	; 43
    17fc:	92 e0       	ldi	r25, 0x02	; 2
    17fe:	6e c0       	rjmp	.+220    	; 0x18dc <__stack+0x107d>
					}
					else
					{
						printf("BAT OK\n\r");
    1800:	00 d0       	rcall	.+0      	; 0x1802 <__stack+0xfa3>
    1802:	86 e3       	ldi	r24, 0x36	; 54
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	7c c0       	rjmp	.+248    	; 0x1900 <__stack+0x10a1>
					}
				}
				else if(!stringcomp(commande,"password"))
    1808:	c4 01       	movw	r24, r8
    180a:	6f e3       	ldi	r22, 0x3F	; 63
    180c:	72 e0       	ldi	r23, 0x02	; 2
    180e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    1812:	89 2b       	or	r24, r25
    1814:	09 f0       	breq	.+2      	; 0x1818 <__stack+0xfb9>
    1816:	7d c0       	rjmp	.+250    	; 0x1912 <__stack+0x10b3>
				{
					printf("password:");
    1818:	00 d0       	rcall	.+0      	; 0x181a <__stack+0xfbb>
    181a:	e9 e1       	ldi	r30, 0x19	; 25
    181c:	f1 e0       	ldi	r31, 0x01	; 1
    181e:	ad b7       	in	r26, 0x3d	; 61
    1820:	be b7       	in	r27, 0x3e	; 62
    1822:	12 96       	adiw	r26, 0x02	; 2
    1824:	fc 93       	st	X, r31
    1826:	ee 93       	st	-X, r30
    1828:	11 97       	sbiw	r26, 0x01	; 1
    182a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
					EEPROM_read((int)&EEPVars.E_passl1,25,remotepass);
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	8e 01       	movw	r16, r28
    1834:	0a 5d       	subi	r16, 0xDA	; 218
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	8d e0       	ldi	r24, 0x0D	; 13
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	69 e1       	ldi	r22, 0x19	; 25
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	a8 01       	movw	r20, r16
    1842:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
					USART_getstring(STAR_ECHO, 25, entpassword);
    1846:	82 e0       	ldi	r24, 0x02	; 2
    1848:	69 e1       	ldi	r22, 0x19	; 25
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	ae 01       	movw	r20, r28
    184e:	40 5c       	subi	r20, 0xC0	; 192
    1850:	5f 4f       	sbci	r21, 0xFF	; 255
    1852:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
					if(!stringcomp(entpassword,remotepass))
    1856:	ce 01       	movw	r24, r28
    1858:	80 5c       	subi	r24, 0xC0	; 192
    185a:	9f 4f       	sbci	r25, 0xFF	; 255
    185c:	b8 01       	movw	r22, r16
    185e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    1862:	89 2b       	or	r24, r25
    1864:	09 f0       	breq	.+2      	; 0x1868 <__stack+0x1009>
    1866:	51 c0       	rjmp	.+162    	; 0x190a <__stack+0x10ab>
					{
						printf("\n\rnew:");
    1868:	00 d0       	rcall	.+0      	; 0x186a <__stack+0x100b>
    186a:	e8 e4       	ldi	r30, 0x48	; 72
    186c:	f2 e0       	ldi	r31, 0x02	; 2
    186e:	ad b7       	in	r26, 0x3d	; 61
    1870:	be b7       	in	r27, 0x3e	; 62
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	fc 93       	st	X, r31
    1876:	ee 93       	st	-X, r30
    1878:	11 97       	sbiw	r26, 0x01	; 1
    187a:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						USART_getstring(STAR_ECHO, 25, entpassword);
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	69 e1       	ldi	r22, 0x19	; 25
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	ae 01       	movw	r20, r28
    188a:	40 5c       	subi	r20, 0xC0	; 192
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
						printf("\n\ragain:");
    1892:	00 d0       	rcall	.+0      	; 0x1894 <__stack+0x1035>
    1894:	ef e4       	ldi	r30, 0x4F	; 79
    1896:	f2 e0       	ldi	r31, 0x02	; 2
    1898:	ad b7       	in	r26, 0x3d	; 61
    189a:	be b7       	in	r27, 0x3e	; 62
    189c:	12 96       	adiw	r26, 0x02	; 2
    189e:	fc 93       	st	X, r31
    18a0:	ee 93       	st	-X, r30
    18a2:	11 97       	sbiw	r26, 0x01	; 1
    18a4:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
						USART_getstring(STAR_ECHO, 25, remotepass);
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	82 e0       	ldi	r24, 0x02	; 2
    18ae:	69 e1       	ldi	r22, 0x19	; 25
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	a8 01       	movw	r20, r16
    18b4:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
						if(!stringcomp(entpassword,remotepass))
    18b8:	ce 01       	movw	r24, r28
    18ba:	80 5c       	subi	r24, 0xC0	; 192
    18bc:	9f 4f       	sbci	r25, 0xFF	; 255
    18be:	b8 01       	movw	r22, r16
    18c0:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    18c4:	89 2b       	or	r24, r25
    18c6:	c9 f4       	brne	.+50     	; 0x18fa <__stack+0x109b>
						{
							EEPROM_write((int)&EEPVars.E_passl1,25,remotepass);
    18c8:	8d e0       	ldi	r24, 0x0D	; 13
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	69 e1       	ldi	r22, 0x19	; 25
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	a8 01       	movw	r20, r16
    18d2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
							printf("\n\rOK\n\r");	
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <__stack+0x1079>
    18d8:	88 e5       	ldi	r24, 0x58	; 88
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	ad b7       	in	r26, 0x3d	; 61
    18de:	be b7       	in	r27, 0x3e	; 62
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	9c 93       	st	X, r25
    18e4:	8e 93       	st	-X, r24
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    18ec:	b2 e0       	ldi	r27, 0x02	; 2
    18ee:	c9 56       	subi	r28, 0x69	; 105
    18f0:	de 4f       	sbci	r29, 0xFE	; 254
    18f2:	b8 83       	st	Y, r27
    18f4:	c7 59       	subi	r28, 0x97	; 151
    18f6:	d1 40       	sbci	r29, 0x01	; 1
    18f8:	3e c0       	rjmp	.+124    	; 0x1976 <__stack+0x1117>
						}
						else
						{
							printf("\n\rERR\n\r");
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <__stack+0x109d>
    18fc:	8f e5       	ldi	r24, 0x5F	; 95
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	ed b7       	in	r30, 0x3d	; 61
    1902:	fe b7       	in	r31, 0x3e	; 62
    1904:	92 83       	std	Z+2, r25	; 0x02
    1906:	81 83       	std	Z+1, r24	; 0x01
    1908:	2e c0       	rjmp	.+92     	; 0x1966 <__stack+0x1107>
						}
					}
					else
					{
						printf(" X\n\r");
    190a:	00 d0       	rcall	.+0      	; 0x190c <__stack+0x10ad>
    190c:	e6 e4       	ldi	r30, 0x46	; 70
    190e:	f1 e0       	ldi	r31, 0x01	; 1
    1910:	24 c0       	rjmp	.+72     	; 0x195a <__stack+0x10fb>
					}
	
				}
				else if(!stringcomp(commande,"l"))	// Logoff (sortir du mode remote)
    1912:	c4 01       	movw	r24, r8
    1914:	63 e4       	ldi	r22, 0x43	; 67
    1916:	73 e0       	ldi	r23, 0x03	; 3
    1918:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    191c:	89 2b       	or	r24, r25
    191e:	11 f4       	brne	.+4      	; 0x1924 <__stack+0x10c5>
    1920:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <main+0x212>
				{
					mode=LOGOFF;
				}
				else if(!stringcomp(commande,"e"))	// Exit (sortir du mode remote en éteignant le bluetooth)
    1924:	c4 01       	movw	r24, r8
    1926:	65 e4       	ldi	r22, 0x45	; 69
    1928:	73 e0       	ldi	r23, 0x03	; 3
    192a:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    192e:	89 2b       	or	r24, r25
    1930:	19 f4       	brne	.+6      	; 0x1938 <__stack+0x10d9>
				{
					mode=LOGOFF;

					/** Désactivation bluetooth */
					PORTC |= ((1<<5));	
    1932:	ad 9a       	sbi	0x15, 5	; 21
    1934:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <main+0x212>
					
				}
				else if(!stringcomp(commande,""))	// ne rien faire avec un enter
    1938:	c4 01       	movw	r24, r8
    193a:	67 e4       	ldi	r22, 0x47	; 71
    193c:	73 e0       	ldi	r23, 0x03	; 3
    193e:	0e 94 88 12 	call	0x2510	; 0x2510 <stringcomp>
    1942:	89 2b       	or	r24, r25
    1944:	39 f4       	brne	.+14     	; 0x1954 <__stack+0x10f5>
    1946:	22 e0       	ldi	r18, 0x02	; 2
    1948:	c9 56       	subi	r28, 0x69	; 105
    194a:	de 4f       	sbci	r29, 0xFE	; 254
    194c:	28 83       	st	Y, r18
    194e:	c7 59       	subi	r28, 0x97	; 151
    1950:	d1 40       	sbci	r29, 0x01	; 1
    1952:	13 c0       	rjmp	.+38     	; 0x197a <__stack+0x111b>
				{
				}
				else
					printf("ERR\n\r");
    1954:	00 d0       	rcall	.+0      	; 0x1956 <__stack+0x10f7>
    1956:	e8 e4       	ldi	r30, 0x48	; 72
    1958:	f3 e0       	ldi	r31, 0x03	; 3
    195a:	ad b7       	in	r26, 0x3d	; 61
    195c:	be b7       	in	r27, 0x3e	; 62
    195e:	12 96       	adiw	r26, 0x02	; 2
    1960:	fc 93       	st	X, r31
    1962:	ee 93       	st	-X, r30
    1964:	11 97       	sbiw	r26, 0x01	; 1
    1966:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
    196a:	f2 e0       	ldi	r31, 0x02	; 2
    196c:	c9 56       	subi	r28, 0x69	; 105
    196e:	de 4f       	sbci	r29, 0xFE	; 254
    1970:	f8 83       	st	Y, r31
    1972:	c7 59       	subi	r28, 0x97	; 151
    1974:	d1 40       	sbci	r29, 0x01	; 1
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
				}
			}
		}
		if(mode>LOGOFF)
		{
			printf("%s>",console);
    197a:	00 d0       	rcall	.+0      	; 0x197c <__stack+0x111d>
    197c:	00 d0       	rcall	.+0      	; 0x197e <__stack+0x111f>
    197e:	e8 e7       	ldi	r30, 0x78	; 120
    1980:	f3 e0       	ldi	r31, 0x03	; 3
    1982:	ad b7       	in	r26, 0x3d	; 61
    1984:	be b7       	in	r27, 0x3e	; 62
    1986:	12 96       	adiw	r26, 0x02	; 2
    1988:	fc 93       	st	X, r31
    198a:	ee 93       	st	-X, r30
    198c:	11 97       	sbiw	r26, 0x01	; 1
    198e:	8a e5       	ldi	r24, 0x5A	; 90
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	8c 0f       	add	r24, r28
    1994:	9d 1f       	adc	r25, r29
    1996:	14 96       	adiw	r26, 0x04	; 4
    1998:	9c 93       	st	X, r25
    199a:	8e 93       	st	-X, r24
    199c:	13 97       	sbiw	r26, 0x03	; 3
    199e:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>
			USART_getstring(ECHO, 25, commande);
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	69 e1       	ldi	r22, 0x19	; 25
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	a4 01       	movw	r20, r8
    19b2:	0e 94 42 13 	call	0x2684	; 0x2684 <USART_getstring>
			printf("\n\r");
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <__stack+0x1159>
    19b8:	ee ed       	ldi	r30, 0xDE	; 222
    19ba:	f1 e0       	ldi	r31, 0x01	; 1
    19bc:	ad b7       	in	r26, 0x3d	; 61
    19be:	be b7       	in	r27, 0x3e	; 62
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	fc 93       	st	X, r31
    19c4:	ee 93       	st	-X, r30
    19c6:	11 97       	sbiw	r26, 0x01	; 1
    19c8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <printf>

			if(mode==LOGON)
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	c9 56       	subi	r28, 0x69	; 105
    19d2:	de 4f       	sbci	r29, 0xFE	; 254
    19d4:	f8 81       	ld	r31, Y
    19d6:	c7 59       	subi	r28, 0x97	; 151
    19d8:	d1 40       	sbci	r29, 0x01	; 1
    19da:	f1 30       	cpi	r31, 0x01	; 1
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__stack+0x1181>
    19de:	0a cc       	rjmp	.-2028   	; 0x11f4 <__stack+0x995>
    19e0:	0c 94 89 04 	jmp	0x912	; 0x912 <__stack+0xb3>

000019e4 <EEPROM_write>:
 	Valeur retour:	Aucune.
**************************************************************************************************************/
/** @brief	Écriture sequentielle sur le EEPROM à partir d'un tampon.
**************************************************************************************************************/
void EEPROM_write(unsigned int adr, unsigned int len, char *buf)
{
    19e4:	dc 01       	movw	r26, r24
	unsigned int i;
	
	/** Attends si une écriture est en cours sur le eeprom */
	while(EECR & (1<<EEWE));
    19e6:	e1 99       	sbic	0x1c, 1	; 28
    19e8:	fe cf       	rjmp	.-4      	; 0x19e6 <EEPROM_write+0x2>
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	10 c0       	rjmp	.+32     	; 0x1a10 <EEPROM_write+0x2c>
    19f0:	c9 01       	movw	r24, r18
    19f2:	8a 0f       	add	r24, r26
    19f4:	9b 1f       	adc	r25, r27
	
	/** Envoie la chaine de caractères en mémoire eeprom */
	for(i=0;i<len;i++)
	{
		/** Place l'adresse et le data à mettre en EEPROM */
		EEAR = adr+i;
    19f6:	9f bb       	out	0x1f, r25	; 31
    19f8:	8e bb       	out	0x1e, r24	; 30
		EEDR = buf[i];
    19fa:	fa 01       	movw	r30, r20
    19fc:	e2 0f       	add	r30, r18
    19fe:	f3 1f       	adc	r31, r19
    1a00:	80 81       	ld	r24, Z
    1a02:	8d bb       	out	0x1d, r24	; 29
		
		/** Démarre l'écriture */
		EECR |= (1<<EEMWE);
    1a04:	e2 9a       	sbi	0x1c, 2	; 28
		EECR |= (1<<EEWE);
    1a06:	e1 9a       	sbi	0x1c, 1	; 28
		
		/** Attends si une écriture est en cours sur le eeprom */
		while(EECR & (1<<EEWE));	
    1a08:	e1 99       	sbic	0x1c, 1	; 28
    1a0a:	fe cf       	rjmp	.-4      	; 0x1a08 <EEPROM_write+0x24>
	
	/** Attends si une écriture est en cours sur le eeprom */
	while(EECR & (1<<EEWE));
	
	/** Envoie la chaine de caractères en mémoire eeprom */
	for(i=0;i<len;i++)
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	26 17       	cp	r18, r22
    1a12:	37 07       	cpc	r19, r23
    1a14:	68 f3       	brcs	.-38     	; 0x19f0 <EEPROM_write+0xc>
		EECR |= (1<<EEWE);
		
		/** Attends si une écriture est en cours sur le eeprom */
		while(EECR & (1<<EEWE));	
	}
}
    1a16:	08 95       	ret

00001a18 <EEPROM_read>:
 	Valeur retour:	Aucune.
**************************************************************************************************************/
/** @brief	Lecture sequentielle du EEPROM dans un tampon.
**************************************************************************************************************/
void EEPROM_read(unsigned int adr, unsigned int len, char *buf)
{
    1a18:	dc 01       	movw	r26, r24
	unsigned int i;
	
	/** Attends si une écriture est en cours sur le eeprom */
	while(EECR & (1<<EEWE));
    1a1a:	e1 99       	sbic	0x1c, 1	; 28
    1a1c:	fe cf       	rjmp	.-4      	; 0x1a1a <EEPROM_read+0x2>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	0d c0       	rjmp	.+26     	; 0x1a3e <EEPROM_read+0x26>
    1a24:	c9 01       	movw	r24, r18
    1a26:	8a 0f       	add	r24, r26
    1a28:	9b 1f       	adc	r25, r27
	
	/** Lis la chaine de caractères en mémoire eeprom */
	for(i=0;i<len;i++)
	{
		/** Place l'adresse à lire en EEPROM */
		EEAR = adr+i;
    1a2a:	9f bb       	out	0x1f, r25	; 31
    1a2c:	8e bb       	out	0x1e, r24	; 30
		
		/** Démarre la lecture */
		EECR |= (1<<EERE);
    1a2e:	e0 9a       	sbi	0x1c, 0	; 28
		
		/** Place le caractere dans la chaine */
		buf[i]=EEDR;
    1a30:	8d b3       	in	r24, 0x1d	; 29
    1a32:	fa 01       	movw	r30, r20
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	80 83       	st	Z, r24
	
	/** Attends si une écriture est en cours sur le eeprom */
	while(EECR & (1<<EEWE));
	
	/** Lis la chaine de caractères en mémoire eeprom */
	for(i=0;i<len;i++)
    1a3a:	2f 5f       	subi	r18, 0xFF	; 255
    1a3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3e:	26 17       	cp	r18, r22
    1a40:	37 07       	cpc	r19, r23
    1a42:	80 f3       	brcs	.-32     	; 0x1a24 <EEPROM_read+0xc>
		EECR |= (1<<EERE);
		
		/** Place le caractere dans la chaine */
		buf[i]=EEDR;
	}
}
    1a44:	08 95       	ret

00001a46 <format_mem>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Remise à zéro de la mémoire EEPROM.
**************************************************************************************************************/
void format_mem(void)
{
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	c9 58       	subi	r28, 0x89	; 137
    1a5c:	d0 40       	sbci	r29, 0x00	; 0
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61

	long_char eeadr;

	tx_type tx_frame[2];

	tx_frame[0].slave_adr = (I2CEEPROM_ADR+W)|((eeadr.var_char[2]&0x03)<<1);	/** Adresse du EEPROM, en écriture */
    1a68:	80 ea       	ldi	r24, 0xA0	; 160
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	tx_frame[0].size = 0x81;						/** Nombre de données à transmettre */
    1a6c:	81 e8       	ldi	r24, 0x81	; 129
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
	tx_frame[0].data_ptr = (unsigned char*)temp;		/** Fait pointer le pointeur sur le tampon temporaire */
    1a70:	ce 01       	movw	r24, r28
    1a72:	09 96       	adiw	r24, 0x09	; 9
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0;i<0x7F;i++)
		tx_frame[0].data_ptr[i+2] = 0xFF;			/** Passage des 0xFF */
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	e8 0f       	add	r30, r24
    1a84:	f9 1f       	adc	r31, r25
    1a86:	20 83       	st	Z, r18
    1a88:	01 96       	adiw	r24, 0x01	; 1
	tx_type tx_frame[2];

	tx_frame[0].slave_adr = (I2CEEPROM_ADR+W)|((eeadr.var_char[2]&0x03)<<1);	/** Adresse du EEPROM, en écriture */
	tx_frame[0].size = 0x81;						/** Nombre de données à transmettre */
	tx_frame[0].data_ptr = (unsigned char*)temp;		/** Fait pointer le pointeur sur le tampon temporaire */
	for(i=0;i<0x7F;i++)
    1a8a:	81 38       	cpi	r24, 0x81	; 129
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	b9 f7       	brne	.-18     	; 0x1a7e <format_mem+0x38>
		tx_frame[0].data_ptr[i+2] = 0xFF;			/** Passage des 0xFF */
	
	tx_frame[1].slave_adr = OWN_ADR;				/** Fin de la trame TWI */
    1a90:	8c e3       	ldi	r24, 0x3C	; 60
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	ee 24       	eor	r14, r14
    1a96:	ff 24       	eor	r15, r15
    1a98:	87 01       	movw	r16, r14
	{
		eeadr.var_long=adr;
		tx_frame[0].data_ptr[0] = eeadr.var_char[1];	 	/** Partie haute de l'adresse */
		tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
    1a9a:	6e 01       	movw	r12, r28
    1a9c:	08 94       	sec
    1a9e:	c1 1c       	adc	r12, r1
    1aa0:	d1 1c       	adc	r13, r1
	tx_frame[1].slave_adr = OWN_ADR;				/** Fin de la trame TWI */

	for(adr=0;adr<I2CEEPROM_TOP;adr+=0x7F)
	{
		eeadr.var_long=adr;
		tx_frame[0].data_ptr[0] = eeadr.var_char[1];	 	/** Partie haute de l'adresse */
    1aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa6:	f0 82       	st	Z, r15
		tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */
    1aa8:	e1 82       	std	Z+1, r14	; 0x01

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
    1aaa:	c6 01       	movw	r24, r12
    1aac:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
    1ab0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab2:	d9 f7       	brne	.-10     	; 0x1aaa <format_mem+0x64>
	for(i=0;i<0x7F;i++)
		tx_frame[0].data_ptr[i+2] = 0xFF;			/** Passage des 0xFF */
	
	tx_frame[1].slave_adr = OWN_ADR;				/** Fin de la trame TWI */

	for(adr=0;adr<I2CEEPROM_TOP;adr+=0x7F)
    1ab4:	8f e7       	ldi	r24, 0x7F	; 127
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e8 0e       	add	r14, r24
    1abe:	f9 1e       	adc	r15, r25
    1ac0:	0a 1f       	adc	r16, r26
    1ac2:	1b 1f       	adc	r17, r27
    1ac4:	9f e6       	ldi	r25, 0x6F	; 111
    1ac6:	e9 16       	cp	r14, r25
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	f9 06       	cpc	r15, r25
    1acc:	94 e0       	ldi	r25, 0x04	; 4
    1ace:	09 07       	cpc	r16, r25
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	19 07       	cpc	r17, r25
    1ad4:	31 f7       	brne	.-52     	; 0x1aa2 <format_mem+0x5c>
		tx_frame[0].data_ptr[0] = eeadr.var_char[1];	 	/** Partie haute de l'adresse */
		tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
	}
}
    1ad6:	c7 57       	subi	r28, 0x77	; 119
    1ad8:	df 4f       	sbci	r29, 0xFF	; 255
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	08 95       	ret

00001af6 <I2CEEPROM_read>:
 	Valeur retour:	État du TWI.
**************************************************************************************************************/
/** @brief	Lecture sequentielle du EEPROM dans un tampon.
**************************************************************************************************************/
char I2CEEPROM_read(unsigned long adr, unsigned int len, char *buf)
{
    1af6:	ef 92       	push	r14
    1af8:	ff 92       	push	r15
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	2e 97       	sbiw	r28, 0x0e	; 14
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	7b 01       	movw	r14, r22
    1b14:	8c 01       	movw	r16, r24
    1b16:	b9 01       	movw	r22, r18
	
	eeadr.var_long=adr;
	
	tx_type tx_frame[3];

	if((adr+len)>=I2CEEPROM_TOP) /** Lecture dépasse le I2CEEPROM, erreur */
    1b18:	ca 01       	movw	r24, r20
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	8e 0d       	add	r24, r14
    1b20:	9f 1d       	adc	r25, r15
    1b22:	a0 1f       	adc	r26, r16
    1b24:	b1 1f       	adc	r27, r17
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	a3 40       	sbci	r26, 0x03	; 3
    1b2c:	b0 40       	sbci	r27, 0x00	; 0
    1b2e:	10 f0       	brcs	.+4      	; 0x1b34 <I2CEEPROM_read+0x3e>
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	1d c0       	rjmp	.+58     	; 0x1b6e <I2CEEPROM_read+0x78>
	{
		return(0);
	}

	tx_frame[0].slave_adr = (I2CEEPROM_ADR+W)|((eeadr.var_char[2]&0x03)<<1);	/** Adresse du EEPROM, en écriture */
    1b34:	20 2f       	mov	r18, r16
    1b36:	22 0f       	add	r18, r18
    1b38:	26 70       	andi	r18, 0x06	; 6
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	80 6a       	ori	r24, 0xA0	; 160
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
	tx_frame[0].size = 2;						/** Nombre de données à transmettre */
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	8c 83       	std	Y+4, r24	; 0x04
	tx_frame[0].data_ptr = (unsigned char*)temp0;		/** Fait pointer le pointeur sur le tampon temporaire */
    1b44:	ce 01       	movw	r24, r28
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	8d 83       	std	Y+5, r24	; 0x05
	tx_frame[0].data_ptr[0] = eeadr.var_char[1];	 	/** Partie haute de l'adresse */
    1b4c:	f9 82       	std	Y+1, r15	; 0x01
	tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */
    1b4e:	ea 82       	std	Y+2, r14	; 0x02
	
	
	tx_frame[1].slave_adr = (I2CEEPROM_ADR+R)|((eeadr.var_char[2]&0x03)<<1);	/** Démarre une lecture maitre */
    1b50:	21 6a       	ori	r18, 0xA1	; 161
    1b52:	2f 83       	std	Y+7, r18	; 0x07
	tx_frame[1].size = len;						/** Nombre de données à lires */
    1b54:	48 87       	std	Y+8, r20	; 0x08
	tx_frame[1].data_ptr = (unsigned char*)buf;	/** Fait pointer le pointeur sur le tampon de réception */
    1b56:	7a 87       	std	Y+10, r23	; 0x0a
    1b58:	69 87       	std	Y+9, r22	; 0x09

	tx_frame[2].slave_adr = OWN_ADR;			/** Fin de la trame TWI */
    1b5a:	8c e3       	ldi	r24, 0x3C	; 60
    1b5c:	8b 87       	std	Y+11, r24	; 0x0b

	while(Send_to_TWI(tx_frame)!=SUCCESS);		/** Appelle la fonction d'envoi sur le TWI */
    1b5e:	8e 01       	movw	r16, r28
    1b60:	0d 5f       	subi	r16, 0xFD	; 253
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255
    1b64:	c8 01       	movw	r24, r16
    1b66:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
    1b6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6c:	d9 f7       	brne	.-10     	; 0x1b64 <I2CEEPROM_read+0x6e>
	
	return(SUCCESS);
}
    1b6e:	2e 96       	adiw	r28, 0x0e	; 14
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	ff 90       	pop	r15
    1b84:	ef 90       	pop	r14
    1b86:	08 95       	ret

00001b88 <I2CEEPROM_write>:
 	Valeur retour:	État du TWI.
**************************************************************************************************************/
/** @brief	Écriture sequentielle sur le EEPROM à partir d'un tampon.
**************************************************************************************************************/
char I2CEEPROM_write(unsigned long adr, unsigned int len, char *buf)
{
    1b88:	2f 92       	push	r2
    1b8a:	3f 92       	push	r3
    1b8c:	4f 92       	push	r4
    1b8e:	5f 92       	push	r5
    1b90:	6f 92       	push	r6
    1b92:	7f 92       	push	r7
    1b94:	8f 92       	push	r8
    1b96:	9f 92       	push	r9
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	2b 97       	sbiw	r28, 0x0b	; 11
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	7b 01       	movw	r14, r22
    1bbe:	8c 01       	movw	r16, r24
    1bc0:	4a 01       	movw	r8, r20
    1bc2:	39 01       	movw	r6, r18
	char temp[3];
	long_char eeadr;

	tx_type tx_frame[2];

	if((adr+len)>=I2CEEPROM_TOP) /** Écriture dépasse le I2CEEPROM, erreur */
    1bc4:	ca 01       	movw	r24, r20
    1bc6:	a0 e0       	ldi	r26, 0x00	; 0
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	8e 0d       	add	r24, r14
    1bcc:	9f 1d       	adc	r25, r15
    1bce:	a0 1f       	adc	r26, r16
    1bd0:	b1 1f       	adc	r27, r17
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	a3 40       	sbci	r26, 0x03	; 3
    1bd8:	b0 40       	sbci	r27, 0x00	; 0
    1bda:	10 f0       	brcs	.+4      	; 0x1be0 <I2CEEPROM_write+0x58>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	35 c0       	rjmp	.+106    	; 0x1c4a <I2CEEPROM_write+0xc2>
    1be0:	aa 24       	eor	r10, r10
    1be2:	bb 24       	eor	r11, r11
    1be4:	65 01       	movw	r12, r10
	{	
		eeadr.var_long=adr+(unsigned long)i;

		tx_frame[0].slave_adr = (I2CEEPROM_ADR+W)|((eeadr.var_char[2]&0x03)<<1);	/** Adresse du EEPROM, en écriture */
		tx_frame[0].size = 3;						/** Nombre de données à transmettre */
		tx_frame[0].data_ptr = (unsigned char*)temp;		/** Fait pointer le pointeur sur le tampon temporaire */
    1be6:	1e 01       	movw	r2, r28
    1be8:	08 94       	sec
    1bea:	21 1c       	adc	r2, r1
    1bec:	31 1c       	adc	r3, r1
		tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */
		tx_frame[0].data_ptr[2] = *(buf+i);	 		/** Donnée */
	
		tx_frame[1].slave_adr = OWN_ADR;				/** Fin de la trame TWI */

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
    1bee:	34 e0       	ldi	r19, 0x04	; 4
    1bf0:	43 2e       	mov	r4, r19
    1bf2:	51 2c       	mov	r5, r1
    1bf4:	4c 0e       	add	r4, r28
    1bf6:	5d 1e       	adc	r5, r29
    1bf8:	23 c0       	rjmp	.+70     	; 0x1c40 <I2CEEPROM_write+0xb8>

	for(i=0;i<len;i++)
	{	
		eeadr.var_long=adr+(unsigned long)i;

		tx_frame[0].slave_adr = (I2CEEPROM_ADR+W)|((eeadr.var_char[2]&0x03)<<1);	/** Adresse du EEPROM, en écriture */
    1bfa:	80 2f       	mov	r24, r16
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	83 70       	andi	r24, 0x03	; 3
    1c00:	90 70       	andi	r25, 0x00	; 0
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	80 6a       	ori	r24, 0xA0	; 160
    1c08:	8c 83       	std	Y+4, r24	; 0x04
		tx_frame[0].size = 3;						/** Nombre de données à transmettre */
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
		tx_frame[0].data_ptr = (unsigned char*)temp;		/** Fait pointer le pointeur sur le tampon temporaire */
    1c0e:	3f 82       	std	Y+7, r3	; 0x07
    1c10:	2e 82       	std	Y+6, r2	; 0x06
		tx_frame[0].data_ptr[0] = eeadr.var_char[1];	 	/** Partie haute de l'adresse */
    1c12:	f9 82       	std	Y+1, r15	; 0x01
		tx_frame[0].data_ptr[1] = eeadr.var_char[0]; 		/** Partie basse de l'adresse */
    1c14:	ea 82       	std	Y+2, r14	; 0x02
		tx_frame[0].data_ptr[2] = *(buf+i);	 		/** Donnée */
    1c16:	e6 0d       	add	r30, r6
    1c18:	f7 1d       	adc	r31, r7
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
	
		tx_frame[1].slave_adr = OWN_ADR;				/** Fin de la trame TWI */
    1c1e:	2c e3       	ldi	r18, 0x3C	; 60
    1c20:	28 87       	std	Y+8, r18	; 0x08

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
    1c22:	c2 01       	movw	r24, r4
    1c24:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
    1c28:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2a:	d9 f7       	brne	.-10     	; 0x1c22 <I2CEEPROM_write+0x9a>
    1c2c:	08 94       	sec
    1c2e:	e1 1c       	adc	r14, r1
    1c30:	f1 1c       	adc	r15, r1
    1c32:	01 1d       	adc	r16, r1
    1c34:	11 1d       	adc	r17, r1
    1c36:	08 94       	sec
    1c38:	a1 1c       	adc	r10, r1
    1c3a:	b1 1c       	adc	r11, r1
    1c3c:	c1 1c       	adc	r12, r1
    1c3e:	d1 1c       	adc	r13, r1
    1c40:	f5 01       	movw	r30, r10
	if((adr+len)>=I2CEEPROM_TOP) /** Écriture dépasse le I2CEEPROM, erreur */
	{
		return(0);
	}

	for(i=0;i<len;i++)
    1c42:	a8 14       	cp	r10, r8
    1c44:	b9 04       	cpc	r11, r9
    1c46:	c8 f2       	brcs	.-78     	; 0x1bfa <I2CEEPROM_write+0x72>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255

		while(Send_to_TWI(tx_frame)!=SUCCESS);			/** Appelle la fonction d'envoi sur le TWI */
	}
	
	return(SUCCESS);
}
    1c4a:	2b 96       	adiw	r28, 0x0b	; 11
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	bf 90       	pop	r11
    1c68:	af 90       	pop	r10
    1c6a:	9f 90       	pop	r9
    1c6c:	8f 90       	pop	r8
    1c6e:	7f 90       	pop	r7
    1c70:	6f 90       	pop	r6
    1c72:	5f 90       	pop	r5
    1c74:	4f 90       	pop	r4
    1c76:	3f 90       	pop	r3
    1c78:	2f 90       	pop	r2
    1c7a:	08 95       	ret

00001c7c <KB_Init>:
void KB_Init(void)
{
	unsigned int i;

	/** Initialisation des variables de clavier */
	DDRA = 0xF0;	/* PA0-PA3 input, PA4-PA7 output */
    1c7c:	80 ef       	ldi	r24, 0xF0	; 240
    1c7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xEF;	/* Pullup des inputs + ligne 0 (1110)*/
    1c80:	8f ee       	ldi	r24, 0xEF	; 239
    1c82:	8b bb       	out	0x1b, r24	; 27

	KB_scan_line=0; /* 0, 1, 2, 3 */
    1c84:	10 92 00 04 	sts	0x0400, r1
	KB_key=0; 		/* Clef appuyée  */
    1c88:	10 92 c9 04 	sts	0x04C9, r1
	KB_keypressed=0; /* FAUX=0, VRAI=n'importe quoi d'autre */
    1c8c:	10 92 f8 04 	sts	0x04F8, r1
	KB_ready=0; /* Pas de nouvelle clef */
    1c90:	10 92 01 05 	sts	0x0501, r1
	KB_timer=0; /* Pas de timer actif*/
    1c94:	10 92 cd 04 	sts	0x04CD, r1
    1c98:	10 92 cc 04 	sts	0x04CC, r1
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
	/** Remise à zéro de la chaine de caratères reçus */
    for(i=0;i<KB_CHARS;i++)
    {
        KB_buf[i]=0x00;
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e0 51       	subi	r30, 0x10	; 16
    1ca4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ca6:	10 82       	st	Z, r1
	KB_key=0; 		/* Clef appuyée  */
	KB_keypressed=0; /* FAUX=0, VRAI=n'importe quoi d'autre */
	KB_ready=0; /* Pas de nouvelle clef */
	KB_timer=0; /* Pas de timer actif*/
	/** Remise à zéro de la chaine de caratères reçus */
    for(i=0;i<KB_CHARS;i++)
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	80 31       	cpi	r24, 0x10	; 16
    1cac:	91 05       	cpc	r25, r1
    1cae:	c1 f7       	brne	.-16     	; 0x1ca0 <KB_Init+0x24>
    {
        KB_buf[i]=0x00;
    }
	KB_char_cnt=0; /* Nombre de caractères dans la chaine */
    1cb0:	10 92 f7 04 	sts	0x04F7, r1
	KB_in_read=FALSE; /* Pas en lecture de chaine*/
    1cb4:	10 92 fc 04 	sts	0x04FC, r1
}
    1cb8:	08 95       	ret

00001cba <KB_int_proc>:
**************************************************************************************************************/
void KB_int_proc(void)
{
	unsigned char key;

	key=~(0xF0|(PINA&0x0F)); /* Lecture de la ligne correspondante */
    1cba:	29 b3       	in	r18, 0x19	; 25
    1cbc:	20 6f       	ori	r18, 0xF0	; 240
    1cbe:	20 95       	com	r18
	if(key==4)
    1cc0:	24 30       	cpi	r18, 0x04	; 4
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <KB_int_proc+0xe>
    1cc4:	23 e0       	ldi	r18, 0x03	; 3
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <KB_int_proc+0x1a>
		key=3;
	if(key==8)
    1cc8:	28 30       	cpi	r18, 0x08	; 8
    1cca:	11 f4       	brne	.+4      	; 0x1cd0 <KB_int_proc+0x16>
    1ccc:	24 e0       	ldi	r18, 0x04	; 4
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <KB_int_proc+0x1a>
		key=4;
	
	if(key) /* Si une clef est appuyée */
    1cd0:	22 23       	and	r18, r18
    1cd2:	49 f1       	breq	.+82     	; 0x1d26 <KB_int_proc+0x6c>
	{
		key=key-1+(4*(KB_scan_line%4));
    1cd4:	80 91 00 04 	lds	r24, 0x0400

		/* Conversion de scan code à clef en passant par le keymap */
		KB_key=keymap[key];		
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	83 70       	andi	r24, 0x03	; 3
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	81 50       	subi	r24, 0x01	; 1
    1ce8:	82 0f       	add	r24, r18
    1cea:	e8 2f       	mov	r30, r24
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	ee 5f       	subi	r30, 0xFE	; 254
    1cf0:	fa 4f       	sbci	r31, 0xFA	; 250
    1cf2:	80 81       	ld	r24, Z
    1cf4:	80 93 c9 04 	sts	0x04C9, r24

		if(!KB_keypressed)
    1cf8:	80 91 f8 04 	lds	r24, 0x04F8
    1cfc:	88 23       	and	r24, r24
    1cfe:	19 f4       	brne	.+6      	; 0x1d06 <KB_int_proc+0x4c>
		{
			KB_ready=1; /* Nouvelle clef! */
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	80 93 01 05 	sts	0x0501, r24
		}

		KB_keypressed=KB_keypressed|(1<<(KB_scan_line%4)); /* Flag appuyé */
    1d06:	30 91 f8 04 	lds	r19, 0x04F8
    1d0a:	20 91 00 04 	lds	r18, 0x0400
    1d0e:	23 70       	andi	r18, 0x03	; 3
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <KB_int_proc+0x60>
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	2a 95       	dec	r18
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <KB_int_proc+0x5c>
    1d1e:	38 2b       	or	r19, r24
    1d20:	30 93 f8 04 	sts	0x04F8, r19
    1d24:	10 c0       	rjmp	.+32     	; 0x1d46 <KB_int_proc+0x8c>
	}
	else /* Sinon */
	{
		KB_keypressed=KB_keypressed&~(1<<(KB_scan_line%4)); /* Flag relâché */
    1d26:	30 91 f8 04 	lds	r19, 0x04F8
    1d2a:	20 91 00 04 	lds	r18, 0x0400
    1d2e:	23 70       	andi	r18, 0x03	; 3
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <KB_int_proc+0x80>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	2a 95       	dec	r18
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <KB_int_proc+0x7c>
    1d3e:	80 95       	com	r24
    1d40:	83 23       	and	r24, r19
    1d42:	80 93 f8 04 	sts	0x04F8, r24
	}

	/* Ligne suivante */
	KB_scan_line++;
    1d46:	80 91 00 04 	lds	r24, 0x0400
    1d4a:	8f 5f       	subi	r24, 0xFF	; 255
    1d4c:	80 93 00 04 	sts	0x0400, r24
	PORTA = (0x0F|(~(1<<(KB_scan_line%4)))<<4);
    1d50:	20 91 00 04 	lds	r18, 0x0400
    1d54:	23 70       	andi	r18, 0x03	; 3
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <KB_int_proc+0xa6>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	2a 95       	dec	r18
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <KB_int_proc+0xa2>
    1d64:	80 95       	com	r24
    1d66:	90 95       	com	r25
    1d68:	24 e0       	ldi	r18, 0x04	; 4
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	2a 95       	dec	r18
    1d70:	e1 f7       	brne	.-8      	; 0x1d6a <KB_int_proc+0xb0>
    1d72:	8f 60       	ori	r24, 0x0F	; 15
    1d74:	8b bb       	out	0x1b, r24	; 27
}
    1d76:	08 95       	ret

00001d78 <init_MAGTEK>:
void init_MAGTEK(void)
{
	unsigned int i;
	
	/* !CARD = PD3 * !STROBE = PB2 * !DATA = PD4 */
	DDRD &= ~((1<<3)|(1<<4));
    1d78:	81 b3       	in	r24, 0x11	; 17
    1d7a:	87 7e       	andi	r24, 0xE7	; 231
    1d7c:	81 bb       	out	0x11, r24	; 17
	DDRB &= ~((1<<2));
    1d7e:	ba 98       	cbi	0x17, 2	; 23
	/* Pull-ups */	
	PORTD |= ((1<<3)|(1<<4));
    1d80:	82 b3       	in	r24, 0x12	; 18
    1d82:	88 61       	ori	r24, 0x18	; 24
    1d84:	82 bb       	out	0x12, r24	; 18
	PORTB |= ((1<<2));
    1d86:	c2 9a       	sbi	0x18, 2	; 24
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
	
	/** Efface les chaines précédentes */
	for(i=0;i<MAGTEK_BITS;i++)
	{
		MAGTEK_bits[i]=0;
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	ef 5f       	subi	r30, 0xFF	; 255
    1d90:	fb 4f       	sbci	r31, 0xFB	; 251
    1d92:	10 82       	st	Z, r1
	/* Pull-ups */	
	PORTD |= ((1<<3)|(1<<4));
	PORTB |= ((1<<2));
	
	/** Efface les chaines précédentes */
	for(i=0;i<MAGTEK_BITS;i++)
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	88 3c       	cpi	r24, 0xC8	; 200
    1d98:	91 05       	cpc	r25, r1
    1d9a:	c1 f7       	brne	.-16     	; 0x1d8c <init_MAGTEK+0x14>
	{
		MAGTEK_bits[i]=0;
	}
	
	MAGTEK_str[0]=0x00;
    1d9c:	10 92 ce 04 	sts	0x04CE, r1
		
	/** Initialisation des status Read in Progress =0 et Read Ended =0 */
	MAGTEK_rip=0;
    1da0:	10 92 cb 04 	sts	0x04CB, r1
    1da4:	10 92 ca 04 	sts	0x04CA, r1
	MAGTEK_re=0;
    1da8:	10 92 14 05 	sts	0x0514, r1
    1dac:	10 92 13 05 	sts	0x0513, r1

	/** Initialisation du status StartSentinel Received */		
	MAGTEK_f_bit=0;
    1db0:	10 92 c1 03 	sts	0x03C1, r1
    1db4:	10 92 c0 03 	sts	0x03C0, r1
			
	/* Interruption sur changement de INT1(!CARD) */
	MCUCR |= (1<<ISC10);
    1db8:	85 b7       	in	r24, 0x35	; 53
    1dba:	84 60       	ori	r24, 0x04	; 4
    1dbc:	85 bf       	out	0x35, r24	; 53
	/* Interruption sur descente de INT2(!STROBE) */
	MCUCSR &= ~(1<<ISC2);
    1dbe:	84 b7       	in	r24, 0x34	; 52
    1dc0:	8f 7b       	andi	r24, 0xBF	; 191
    1dc2:	84 bf       	out	0x34, r24	; 52

	GICR |= ((1<<INT1)|(1<<INT2));
    1dc4:	8b b7       	in	r24, 0x3b	; 59
    1dc6:	80 6a       	ori	r24, 0xA0	; 160
    1dc8:	8b bf       	out	0x3b, r24	; 59
}
    1dca:	08 95       	ret

00001dcc <__vector_3>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Le signal !STROBE a été enclanché.
**************************************************************************************************************/
SIGNAL(SIG_INTERRUPT2)
{
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	2f 93       	push	r18
    1dd8:	3f 93       	push	r19
    1dda:	8f 93       	push	r24
    1ddc:	9f 93       	push	r25
    1dde:	ef 93       	push	r30
    1de0:	ff 93       	push	r31
	unsigned char bit_read;

	bit_read = (((~PIND) & (1<<4))>>4);	/** Lecture de la pin !DATA */
    1de2:	80 b3       	in	r24, 0x10	; 16
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	20 95       	com	r18
    1dea:	30 95       	com	r19
    1dec:	20 71       	andi	r18, 0x10	; 16
    1dee:	30 70       	andi	r19, 0x00	; 0
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	35 95       	asr	r19
    1df4:	27 95       	ror	r18
    1df6:	8a 95       	dec	r24
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <__vector_3+0x26>
	
	if(MAGTEK_f_bit!=0)
    1dfa:	80 91 c0 03 	lds	r24, 0x03C0
    1dfe:	90 91 c1 03 	lds	r25, 0x03C1
    1e02:	89 2b       	or	r24, r25
    1e04:	19 f1       	breq	.+70     	; 0x1e4c <__vector_3+0x80>
	{
		if(bit_read)
    1e06:	22 23       	and	r18, r18
    1e08:	49 f0       	breq	.+18     	; 0x1e1c <__vector_3+0x50>
		{
			MAGTEK_bits[MAGTEK_bit_cnt]=1;
    1e0a:	e0 91 ff 04 	lds	r30, 0x04FF
    1e0e:	f0 91 00 05 	lds	r31, 0x0500
    1e12:	ef 5f       	subi	r30, 0xFF	; 255
    1e14:	fb 4f       	sbci	r31, 0xFB	; 251
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	80 83       	st	Z, r24
    1e1a:	07 c0       	rjmp	.+14     	; 0x1e2a <__vector_3+0x5e>
		}
		else
		{
			MAGTEK_bits[MAGTEK_bit_cnt]=0;		
    1e1c:	e0 91 ff 04 	lds	r30, 0x04FF
    1e20:	f0 91 00 05 	lds	r31, 0x0500
    1e24:	ef 5f       	subi	r30, 0xFF	; 255
    1e26:	fb 4f       	sbci	r31, 0xFB	; 251
    1e28:	10 82       	st	Z, r1
		}
		
		if(MAGTEK_bit_cnt<MAGTEK_BITS)
    1e2a:	80 91 ff 04 	lds	r24, 0x04FF
    1e2e:	90 91 00 05 	lds	r25, 0x0500
    1e32:	88 3c       	cpi	r24, 0xC8	; 200
    1e34:	91 05       	cpc	r25, r1
    1e36:	c8 f4       	brcc	.+50     	; 0x1e6a <__vector_3+0x9e>
		{
			MAGTEK_bit_cnt++;
    1e38:	80 91 ff 04 	lds	r24, 0x04FF
    1e3c:	90 91 00 05 	lds	r25, 0x0500
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	90 93 00 05 	sts	0x0500, r25
    1e46:	80 93 ff 04 	sts	0x04FF, r24
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <__vector_3+0x9e>
		}
		
	}
	else
	{
		if(bit_read)
    1e4c:	22 23       	and	r18, r18
    1e4e:	69 f0       	breq	.+26     	; 0x1e6a <__vector_3+0x9e>
		{
			MAGTEK_bits[0]=1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	80 93 01 04 	sts	0x0401, r24
			MAGTEK_bit_cnt=1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	90 93 00 05 	sts	0x0500, r25
    1e5e:	80 93 ff 04 	sts	0x04FF, r24
			MAGTEK_f_bit=1;
    1e62:	90 93 c1 03 	sts	0x03C1, r25
    1e66:	80 93 c0 03 	sts	0x03C0, r24
		}
	}	
}
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	9f 91       	pop	r25
    1e70:	8f 91       	pop	r24
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	0f 90       	pop	r0
    1e7c:	1f 90       	pop	r1
    1e7e:	18 95       	reti

00001e80 <MAGTEK_analyse>:
 	Valeur retour:	Validité de la lecture (0 = Valide, 1 = Invalide )
**************************************************************************************************************/
/** @brief	Analyse des données scannées et construction de la chaine de caratères.
**************************************************************************************************************/
unsigned int MAGTEK_analyse(void)
{
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
	unsigned int ss_pos=0;
	unsigned int dir=0;
	
	unsigned int i,j,ii;

	if(MAGTEK_bits[0]==1 &&
    1e86:	80 91 01 04 	lds	r24, 0x0401
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	b9 f4       	brne	.+46     	; 0x1ebc <MAGTEK_analyse+0x3c>
    1e8e:	80 91 02 04 	lds	r24, 0x0402
    1e92:	81 30       	cpi	r24, 0x01	; 1
    1e94:	99 f4       	brne	.+38     	; 0x1ebc <MAGTEK_analyse+0x3c>
    1e96:	80 91 03 04 	lds	r24, 0x0403
    1e9a:	88 23       	and	r24, r24
    1e9c:	79 f4       	brne	.+30     	; 0x1ebc <MAGTEK_analyse+0x3c>
    1e9e:	80 91 04 04 	lds	r24, 0x0404
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	59 f4       	brne	.+22     	; 0x1ebc <MAGTEK_analyse+0x3c>
    1ea6:	80 91 05 04 	lds	r24, 0x0405
    1eaa:	88 23       	and	r24, r24
    1eac:	39 f4       	brne	.+14     	; 0x1ebc <MAGTEK_analyse+0x3c>
    1eae:	a0 e0       	ldi	r26, 0x00	; 0
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	70 e0       	ldi	r23, 0x00	; 0
			}			
						
			MAGTEK_str[i] = (MAGTEK_str[i]&(0x0F))+ (0x30); /** Byte lue &0x0F + 0x30 = ASCII */
			
			if(MAGTEK_str[i]=='<')
				 MAGTEK_str[i]='[';
    1eb6:	1b e5       	ldi	r17, 0x5B	; 91
			if(MAGTEK_str[i]=='>')
				 MAGTEK_str[i]=']';
    1eb8:	3d e5       	ldi	r19, 0x5D	; 93
    1eba:	73 c0       	rjmp	.+230    	; 0x1fa2 <MAGTEK_analyse+0x122>
	unsigned int ss_pos=0;
	unsigned int dir=0;
	
	unsigned int i,j,ii;

	if(MAGTEK_bits[0]==1 &&
    1ebc:	28 ec       	ldi	r18, 0xC8	; 200
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		for(i=MAGTEK_BITS;i>4;i--)	/** Recherche du Start Sentinel en sens inverse */
		{
			if(MAGTEK_bits[i]==1 &&
    1ec0:	f9 01       	movw	r30, r18
    1ec2:	ef 5f       	subi	r30, 0xFF	; 255
    1ec4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ec6:	80 81       	ld	r24, Z
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	f1 f4       	brne	.+60     	; 0x1f08 <MAGTEK_analyse+0x88>
    1ecc:	f9 01       	movw	r30, r18
    1ece:	e0 50       	subi	r30, 0x00	; 0
    1ed0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed2:	80 81       	ld	r24, Z
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	c1 f4       	brne	.+48     	; 0x1f08 <MAGTEK_analyse+0x88>
    1ed8:	f9 01       	movw	r30, r18
    1eda:	e1 50       	subi	r30, 0x01	; 1
    1edc:	fc 4f       	sbci	r31, 0xFC	; 252
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 23       	and	r24, r24
    1ee2:	91 f4       	brne	.+36     	; 0x1f08 <MAGTEK_analyse+0x88>
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	e2 50       	subi	r30, 0x02	; 2
    1ee8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eea:	80 81       	ld	r24, Z
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	61 f4       	brne	.+24     	; 0x1f08 <MAGTEK_analyse+0x88>
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	e3 50       	subi	r30, 0x03	; 3
    1ef4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef6:	80 81       	ld	r24, Z
    1ef8:	88 23       	and	r24, r24
    1efa:	31 f4       	brne	.+12     	; 0x1f08 <MAGTEK_analyse+0x88>
    1efc:	b9 01       	movw	r22, r18
    1efe:	a0 e0       	ldi	r26, 0x00	; 0
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
			}
						
			MAGTEK_str[i] = (MAGTEK_str[i]&(0x0F))+ (0x30); /** Byte lue &0x0F + 0x30 = ASCII */
			
			if(MAGTEK_str[i]=='<')
				 MAGTEK_str[i]='[';
    1f02:	1b e5       	ldi	r17, 0x5B	; 91
			if(MAGTEK_str[i]=='>')
				 MAGTEK_str[i]=']';
    1f04:	3d e5       	ldi	r19, 0x5D	; 93
    1f06:	96 c0       	rjmp	.+300    	; 0x2034 <MAGTEK_analyse+0x1b4>
		ss_pos=0;	/** Il est trouvé, fin du for */
		dir=0;	/** Direction = sens normal */
	}
	else
	{
		for(i=MAGTEK_BITS;i>4;i--)	/** Recherche du Start Sentinel en sens inverse */
    1f08:	21 50       	subi	r18, 0x01	; 1
    1f0a:	30 40       	sbci	r19, 0x00	; 0
    1f0c:	24 30       	cpi	r18, 0x04	; 4
    1f0e:	31 05       	cpc	r19, r1
    1f10:	b9 f6       	brne	.-82     	; 0x1ec0 <MAGTEK_analyse+0x40>
    1f12:	21 e0       	ldi	r18, 0x01	; 1
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	96 c0       	rjmp	.+300    	; 0x2044 <MAGTEK_analyse+0x1c4>
	{
		ii=ss_pos;
		
		for(i=0;i<MAGTEK_CAR && ii<MAGTEK_bit_cnt;i++)	/** On batit la chaine en sens normal à partir du SS */
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
    1f18:	fd 01       	movw	r30, r26
    1f1a:	e2 53       	subi	r30, 0x32	; 50
    1f1c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f1e:	10 82       	st	Z, r1
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	50 e0       	ldi	r21, 0x00	; 0
				
			for(j=0;j<5;j++)
			{			
				if(ii<MAGTEK_bit_cnt)
				{				
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);			
    1f24:	ef 01       	movw	r28, r30
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
				
			for(j=0;j<5;j++)
			{			
				if(ii<MAGTEK_bit_cnt)
    1f26:	80 91 ff 04 	lds	r24, 0x04FF
    1f2a:	90 91 00 05 	lds	r25, 0x0500
    1f2e:	68 17       	cp	r22, r24
    1f30:	79 07       	cpc	r23, r25
    1f32:	80 f4       	brcc	.+32     	; 0x1f54 <MAGTEK_analyse+0xd4>
				{				
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);			
    1f34:	28 81       	ld	r18, Y
    1f36:	fb 01       	movw	r30, r22
    1f38:	ef 5f       	subi	r30, 0xFF	; 255
    1f3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1f3c:	80 81       	ld	r24, Z
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	04 2e       	mov	r0, r20
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <MAGTEK_analyse+0xc8>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <MAGTEK_analyse+0xc4>
    1f4c:	28 2b       	or	r18, r24
    1f4e:	28 83       	st	Y, r18
					ii++;
    1f50:	6f 5f       	subi	r22, 0xFF	; 255
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
		
		for(i=0;i<MAGTEK_CAR && ii<MAGTEK_bit_cnt;i++)	/** On batit la chaine en sens normal à partir du SS */
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
				
			for(j=0;j<5;j++)
    1f54:	4f 5f       	subi	r20, 0xFF	; 255
    1f56:	5f 4f       	sbci	r21, 0xFF	; 255
    1f58:	45 30       	cpi	r20, 0x05	; 5
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	21 f7       	brne	.-56     	; 0x1f26 <MAGTEK_analyse+0xa6>
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);			
					ii++;
				}
			}			
						
			MAGTEK_str[i] = (MAGTEK_str[i]&(0x0F))+ (0x30); /** Byte lue &0x0F + 0x30 = ASCII */
    1f5e:	fd 01       	movw	r30, r26
    1f60:	e2 53       	subi	r30, 0x32	; 50
    1f62:	fb 4f       	sbci	r31, 0xFB	; 251
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 70       	andi	r24, 0x0F	; 15
    1f68:	80 5d       	subi	r24, 0xD0	; 208
    1f6a:	80 83       	st	Z, r24
			
			if(MAGTEK_str[i]=='<')
    1f6c:	80 81       	ld	r24, Z
    1f6e:	8c 33       	cpi	r24, 0x3C	; 60
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <MAGTEK_analyse+0xf4>
				 MAGTEK_str[i]='[';
    1f72:	10 83       	st	Z, r17
			if(MAGTEK_str[i]=='>')
    1f74:	fd 01       	movw	r30, r26
    1f76:	e2 53       	subi	r30, 0x32	; 50
    1f78:	fb 4f       	sbci	r31, 0xFB	; 251
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8e 33       	cpi	r24, 0x3E	; 62
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <MAGTEK_analyse+0x102>
				 MAGTEK_str[i]=']';
    1f80:	30 83       	st	Z, r19
			
			if(MAGTEK_str[i]=='?')	/** Si nous atteignons un End Sentinel */
    1f82:	fd 01       	movw	r30, r26
    1f84:	e2 53       	subi	r30, 0x32	; 50
    1f86:	fb 4f       	sbci	r31, 0xFB	; 251
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 33       	cpi	r24, 0x3F	; 63
    1f8c:	29 f4       	brne	.+10     	; 0x1f98 <MAGTEK_analyse+0x118>
			{
				MAGTEK_str[i+1]=0x00; /** Fin de chaine */
    1f8e:	a1 53       	subi	r26, 0x31	; 49
    1f90:	bb 4f       	sbci	r27, 0xFB	; 251
    1f92:	1c 92       	st	X, r1
    1f94:	a9 e2       	ldi	r26, 0x29	; 41
    1f96:	b0 e0       	ldi	r27, 0x00	; 0

	if(dir==0)	/** Si la position est en sens normal */
	{
		ii=ss_pos;
		
		for(i=0;i<MAGTEK_CAR && ii<MAGTEK_bit_cnt;i++)	/** On batit la chaine en sens normal à partir du SS */
    1f98:	11 96       	adiw	r26, 0x01	; 1
    1f9a:	a9 32       	cpi	r26, 0x29	; 41
    1f9c:	b1 05       	cpc	r27, r1
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <MAGTEK_analyse+0x122>
    1fa0:	4d c0       	rjmp	.+154    	; 0x203c <MAGTEK_analyse+0x1bc>
    1fa2:	80 91 ff 04 	lds	r24, 0x04FF
    1fa6:	90 91 00 05 	lds	r25, 0x0500
    1faa:	68 17       	cp	r22, r24
    1fac:	79 07       	cpc	r23, r25
    1fae:	08 f4       	brcc	.+2      	; 0x1fb2 <MAGTEK_analyse+0x132>
    1fb0:	b3 cf       	rjmp	.-154    	; 0x1f18 <MAGTEK_analyse+0x98>
    1fb2:	44 c0       	rjmp	.+136    	; 0x203c <MAGTEK_analyse+0x1bc>
	{
		ii=ss_pos;
		
		for(i=0;i<MAGTEK_CAR && ii>0;i++) /** On batit la chaine en sens inverse à partir du SS */
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
    1fb4:	fd 01       	movw	r30, r26
    1fb6:	e2 53       	subi	r30, 0x32	; 50
    1fb8:	fb 4f       	sbci	r31, 0xFB	; 251
    1fba:	10 82       	st	Z, r1
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	50 e0       	ldi	r21, 0x00	; 0
					
			for(j=0;j<5;j++)
			{			
				if(ii>0)
				{			
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);
    1fc0:	ef 01       	movw	r28, r30
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
					
			for(j=0;j<5;j++)
			{			
				if(ii>0)
    1fc2:	61 15       	cp	r22, r1
    1fc4:	71 05       	cpc	r23, r1
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <MAGTEK_analyse+0x168>
				{			
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);
    1fc8:	28 81       	ld	r18, Y
    1fca:	fb 01       	movw	r30, r22
    1fcc:	ef 5f       	subi	r30, 0xFF	; 255
    1fce:	fb 4f       	sbci	r31, 0xFB	; 251
    1fd0:	80 81       	ld	r24, Z
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	04 2e       	mov	r0, r20
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <MAGTEK_analyse+0x15c>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <MAGTEK_analyse+0x158>
    1fe0:	28 2b       	or	r18, r24
    1fe2:	28 83       	st	Y, r18
					ii--;
    1fe4:	61 50       	subi	r22, 0x01	; 1
    1fe6:	70 40       	sbci	r23, 0x00	; 0
		
		for(i=0;i<MAGTEK_CAR && ii>0;i++) /** On batit la chaine en sens inverse à partir du SS */
		{
			MAGTEK_str[i]=0x00; /** Initialisation du byte à écrire */
					
			for(j=0;j<5;j++)
    1fe8:	4f 5f       	subi	r20, 0xFF	; 255
    1fea:	5f 4f       	sbci	r21, 0xFF	; 255
    1fec:	45 30       	cpi	r20, 0x05	; 5
    1fee:	51 05       	cpc	r21, r1
    1ff0:	41 f7       	brne	.-48     	; 0x1fc2 <MAGTEK_analyse+0x142>
					MAGTEK_str[i] |= (MAGTEK_bits[ii]<<j);
					ii--;
				}
			}
						
			MAGTEK_str[i] = (MAGTEK_str[i]&(0x0F))+ (0x30); /** Byte lue &0x0F + 0x30 = ASCII */
    1ff2:	fd 01       	movw	r30, r26
    1ff4:	e2 53       	subi	r30, 0x32	; 50
    1ff6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 70       	andi	r24, 0x0F	; 15
    1ffc:	80 5d       	subi	r24, 0xD0	; 208
    1ffe:	80 83       	st	Z, r24
			
			if(MAGTEK_str[i]=='<')
    2000:	80 81       	ld	r24, Z
    2002:	8c 33       	cpi	r24, 0x3C	; 60
    2004:	09 f4       	brne	.+2      	; 0x2008 <MAGTEK_analyse+0x188>
				 MAGTEK_str[i]='[';
    2006:	10 83       	st	Z, r17
			if(MAGTEK_str[i]=='>')
    2008:	fd 01       	movw	r30, r26
    200a:	e2 53       	subi	r30, 0x32	; 50
    200c:	fb 4f       	sbci	r31, 0xFB	; 251
    200e:	80 81       	ld	r24, Z
    2010:	8e 33       	cpi	r24, 0x3E	; 62
    2012:	09 f4       	brne	.+2      	; 0x2016 <MAGTEK_analyse+0x196>
				 MAGTEK_str[i]=']';
    2014:	30 83       	st	Z, r19
			
			if(MAGTEK_str[i]=='?')	/** Si nous atteignons un End Sentinel */
    2016:	fd 01       	movw	r30, r26
    2018:	e2 53       	subi	r30, 0x32	; 50
    201a:	fb 4f       	sbci	r31, 0xFB	; 251
    201c:	80 81       	ld	r24, Z
    201e:	8f 33       	cpi	r24, 0x3F	; 63
    2020:	29 f4       	brne	.+10     	; 0x202c <MAGTEK_analyse+0x1ac>
			{
				MAGTEK_str[i+1]=0x00; /** Fin de chaine */
    2022:	a1 53       	subi	r26, 0x31	; 49
    2024:	bb 4f       	sbci	r27, 0xFB	; 251
    2026:	1c 92       	st	X, r1
    2028:	a9 e2       	ldi	r26, 0x29	; 41
    202a:	b0 e0       	ldi	r27, 0x00	; 0
	}
	else	/** Sinon la position est en sens inverse */
	{
		ii=ss_pos;
		
		for(i=0;i<MAGTEK_CAR && ii>0;i++) /** On batit la chaine en sens inverse à partir du SS */
    202c:	11 96       	adiw	r26, 0x01	; 1
    202e:	a9 32       	cpi	r26, 0x29	; 41
    2030:	b1 05       	cpc	r27, r1
    2032:	20 f4       	brcc	.+8      	; 0x203c <MAGTEK_analyse+0x1bc>
    2034:	61 15       	cp	r22, r1
    2036:	71 05       	cpc	r23, r1
    2038:	09 f0       	breq	.+2      	; 0x203c <MAGTEK_analyse+0x1bc>
    203a:	bc cf       	rjmp	.-136    	; 0x1fb4 <MAGTEK_analyse+0x134>
			{
				MAGTEK_str[i+1]=0x00; /** Fin de chaine */
				i=MAGTEK_CAR;	/** Sortie du for */
			}
		}
		MAGTEK_str[MAGTEK_CAR-1]=0x00;	/** Fin de chaine absolue */
    203c:	10 92 f6 04 	sts	0x04F6, r1
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return(0);	/** Scan valide */		
}
    2044:	c9 01       	movw	r24, r18
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	08 95       	ret

0000204e <__vector_2>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Le signal !CARD PRESENT change de bas en haut ou de haut en bas.
**************************************************************************************************************/
SIGNAL(SIG_INTERRUPT1)
{
    204e:	1f 92       	push	r1
    2050:	0f 92       	push	r0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	0f 92       	push	r0
    2056:	11 24       	eor	r1, r1
    2058:	2f 93       	push	r18
    205a:	3f 93       	push	r19
    205c:	4f 93       	push	r20
    205e:	5f 93       	push	r21
    2060:	6f 93       	push	r22
    2062:	7f 93       	push	r23
    2064:	8f 93       	push	r24
    2066:	9f 93       	push	r25
    2068:	af 93       	push	r26
    206a:	bf 93       	push	r27
    206c:	ef 93       	push	r30
    206e:	ff 93       	push	r31
	unsigned int i;
	
	if(PIND & (1<<3)) /** Le signal !CARD PRESENT signale une fin de lecture */
    2070:	83 9b       	sbis	0x10, 3	; 16
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <__vector_2+0x44>
	{
		if(!MAGTEK_analyse())	/** Si la lecture est valide */
    2074:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <MAGTEK_analyse>
    2078:	89 2b       	or	r24, r25
    207a:	31 f4       	brne	.+12     	; 0x2088 <__vector_2+0x3a>
		{
			MAGTEK_re=1;	/** Read Ended = 1 */
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	90 93 14 05 	sts	0x0514, r25
    2084:	80 93 13 05 	sts	0x0513, r24

		}

		/** Initialisation des status Read in Progress = 0 et First Bit = 0 */
		MAGTEK_rip=0;
    2088:	10 92 cb 04 	sts	0x04CB, r1
    208c:	10 92 ca 04 	sts	0x04CA, r1
    2090:	16 c0       	rjmp	.+44     	; 0x20be <__vector_2+0x70>
		MAGTEK_f_bit=0;
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
	else  /** Le signal !CARD PRESENT signale un debut de lecture */
	{
		/** Efface les chaines précédentes */
		for(i=0;i<MAGTEK_BITS;i++)
		{
			MAGTEK_bits[i]=0;
    2096:	fc 01       	movw	r30, r24
    2098:	ef 5f       	subi	r30, 0xFF	; 255
    209a:	fb 4f       	sbci	r31, 0xFB	; 251
    209c:	10 82       	st	Z, r1

	}
	else  /** Le signal !CARD PRESENT signale un debut de lecture */
	{
		/** Efface les chaines précédentes */
		for(i=0;i<MAGTEK_BITS;i++)
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	88 3c       	cpi	r24, 0xC8	; 200
    20a2:	91 05       	cpc	r25, r1
    20a4:	c1 f7       	brne	.-16     	; 0x2096 <__vector_2+0x48>
		{
			MAGTEK_bits[i]=0;
		}

		MAGTEK_str[0]=0x00;
    20a6:	10 92 ce 04 	sts	0x04CE, r1

		/** Initialisation des status Read in Progress = 1 et Read Ended = 0 */
		MAGTEK_rip=1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	90 93 cb 04 	sts	0x04CB, r25
    20b2:	80 93 ca 04 	sts	0x04CA, r24
		MAGTEK_re=0;
    20b6:	10 92 14 05 	sts	0x0514, r1
    20ba:	10 92 13 05 	sts	0x0513, r1

		/** Initialisation du status First Bit = 0 */		
		MAGTEK_f_bit=0;
    20be:	10 92 c1 03 	sts	0x03C1, r1
    20c2:	10 92 c0 03 	sts	0x03C0, r1

	}	
}
    20c6:	ff 91       	pop	r31
    20c8:	ef 91       	pop	r30
    20ca:	bf 91       	pop	r27
    20cc:	af 91       	pop	r26
    20ce:	9f 91       	pop	r25
    20d0:	8f 91       	pop	r24
    20d2:	7f 91       	pop	r23
    20d4:	6f 91       	pop	r22
    20d6:	5f 91       	pop	r21
    20d8:	4f 91       	pop	r20
    20da:	3f 91       	pop	r19
    20dc:	2f 91       	pop	r18
    20de:	0f 90       	pop	r0
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	0f 90       	pop	r0
    20e4:	1f 90       	pop	r1
    20e6:	18 95       	reti

000020e8 <bcd2dec>:
 	Valeur retour:	Nombre en décimal
**************************************************************************************************************/
/** @brief	Conversion BCD à décimal.
**************************************************************************************************************/
unsigned char bcd2dec(unsigned char bcd)
{
    20e8:	28 2f       	mov	r18, r24
    20ea:	22 95       	swap	r18
    20ec:	2f 70       	andi	r18, 0x0F	; 15
    20ee:	9a e0       	ldi	r25, 0x0A	; 10
    20f0:	29 9f       	mul	r18, r25
    20f2:	90 01       	movw	r18, r0
    20f4:	11 24       	eor	r1, r1
    20f6:	8f 70       	andi	r24, 0x0F	; 15
	return ((bcd>>4)*10)+bcd%16;
}
    20f8:	82 0f       	add	r24, r18
    20fa:	08 95       	ret

000020fc <dec2bcd>:
 	Valeur retour:	Nombre en BCD
**************************************************************************************************************/
/** @brief	Conversion décimal à BCD.
**************************************************************************************************************/
unsigned char dec2bcd(unsigned char dec)
{
    20fc:	28 2f       	mov	r18, r24
    20fe:	6a e0       	ldi	r22, 0x0A	; 10
    2100:	0e 94 34 1a 	call	0x3468	; 0x3468 <__udivmodqi4>
    2104:	38 2f       	mov	r19, r24
    2106:	32 95       	swap	r19
    2108:	30 7f       	andi	r19, 0xF0	; 240
    210a:	82 2f       	mov	r24, r18
    210c:	0e 94 34 1a 	call	0x3468	; 0x3468 <__udivmodqi4>
	return ((dec/10)<<4)+(dec%10);
}
    2110:	83 2f       	mov	r24, r19
    2112:	89 0f       	add	r24, r25
    2114:	08 95       	ret

00002116 <RTC_set_time>:
 	Valeur retour:	État du TWI.
**************************************************************************************************************/
/** @brief	Modification des variables de temps dans le RTC depuis la structure globale. 
**************************************************************************************************************/
unsigned char RTC_set_time(void)
{
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	67 97       	sbiw	r28, 0x17	; 23
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp0[8];
	unsigned char temp1[3];
	tx_type tx_frame[3];
	
	/** Ajustement de la variable siecle selon l'année recue */
	if(heure_actuelle.annee>=2000)
    212e:	80 91 c6 03 	lds	r24, 0x03C6
    2132:	90 91 c7 03 	lds	r25, 0x03C7
    2136:	27 e0       	ldi	r18, 0x07	; 7
    2138:	80 3d       	cpi	r24, 0xD0	; 208
    213a:	92 07       	cpc	r25, r18
    213c:	40 f0       	brcs	.+16     	; 0x214e <RTC_set_time+0x38>
	{
		heure_actuelle.annee=heure_actuelle.annee-2000;
    213e:	80 5d       	subi	r24, 0xD0	; 208
    2140:	97 40       	sbci	r25, 0x07	; 7
    2142:	90 93 c7 03 	sts	0x03C7, r25
    2146:	80 93 c6 03 	sts	0x03C6, r24
    214a:	00 e0       	ldi	r16, 0x00	; 0
    214c:	07 c0       	rjmp	.+14     	; 0x215c <RTC_set_time+0x46>
		siecle=0;
	}
	else
	{
		heure_actuelle.annee=heure_actuelle.annee-1900;
    214e:	8c 56       	subi	r24, 0x6C	; 108
    2150:	97 40       	sbci	r25, 0x07	; 7
    2152:	90 93 c7 03 	sts	0x03C7, r25
    2156:	80 93 c6 03 	sts	0x03C6, r24
    215a:	01 e0       	ldi	r16, 0x01	; 1
		siecle=1;
	}

	tx_frame[0].slave_adr = RTC_ADR+W;		/** Adresse du RTC DS1337, en écriture */
    215c:	10 ed       	ldi	r17, 0xD0	; 208
    215e:	1c 87       	std	Y+12, r17	; 0x0c
	tx_frame[0].size = 8;					/** Nombre de données à transmettre */
    2160:	88 e0       	ldi	r24, 0x08	; 8
    2162:	8d 87       	std	Y+13, r24	; 0x0d
	tx_frame[0].data_ptr = temp0;			/** Fait pointer le pointeur sur le tampon temporaire */
    2164:	ce 01       	movw	r24, r28
    2166:	04 96       	adiw	r24, 0x04	; 4
    2168:	9f 87       	std	Y+15, r25	; 0x0f
    216a:	8e 87       	std	Y+14, r24	; 0x0e
	tx_frame[0].data_ptr[0] = RTC_SECONDS;	/** Adresse de base des registres de temps du RTC */
    216c:	1c 82       	std	Y+4, r1	; 0x04
	tx_frame[0].data_ptr[1] = dec2bcd(heure_actuelle.seconde);		/** Régistre secondes */
    216e:	80 91 cd 03 	lds	r24, 0x03CD
    2172:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    2176:	8d 83       	std	Y+5, r24	; 0x05
	tx_frame[0].data_ptr[2] = dec2bcd(heure_actuelle.minute);		/** Régistre minutes */
    2178:	80 91 cc 03 	lds	r24, 0x03CC
    217c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    2180:	8e 83       	std	Y+6, r24	; 0x06
	tx_frame[0].data_ptr[3] = dec2bcd(heure_actuelle.heure);		/** Régistre heures */
    2182:	80 91 cb 03 	lds	r24, 0x03CB
    2186:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    218a:	8f 83       	std	Y+7, r24	; 0x07
	tx_frame[0].data_ptr[4] = dec2bcd(heure_actuelle.jour_semaine);			/** Régistre jours/semaine */
    218c:	80 91 ca 03 	lds	r24, 0x03CA
    2190:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    2194:	88 87       	std	Y+8, r24	; 0x08
	tx_frame[0].data_ptr[5] = dec2bcd(heure_actuelle.jour);			/** Régistre jours */
    2196:	80 91 c9 03 	lds	r24, 0x03C9
    219a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    219e:	89 87       	std	Y+9, r24	; 0x09
	tx_frame[0].data_ptr[6] = dec2bcd(heure_actuelle.mois)|(siecle<<7);		/** Régistre mois/siecle */
    21a0:	80 91 c8 03 	lds	r24, 0x03C8
    21a4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    21a8:	07 95       	ror	r16
    21aa:	00 27       	eor	r16, r16
    21ac:	07 95       	ror	r16
    21ae:	08 2b       	or	r16, r24
    21b0:	0a 87       	std	Y+10, r16	; 0x0a
	tx_frame[0].data_ptr[7] = dec2bcd((unsigned char)heure_actuelle.annee);	/** Régistre années */
    21b2:	80 91 c6 03 	lds	r24, 0x03C6
    21b6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <dec2bcd>
    21ba:	8b 87       	std	Y+11, r24	; 0x0b
	
	tx_frame[1].slave_adr = RTC_ADR+W;		/** Adresse du RTC DS1337, en écriture */
    21bc:	18 8b       	std	Y+16, r17	; 0x10
	tx_frame[1].size = 2;					/** Nombre de données à transmettre */
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	89 8b       	std	Y+17, r24	; 0x11
	tx_frame[1].data_ptr = temp1;			/** Fait pointer le pointeur sur le tampon temporaire */
    21c2:	ce 01       	movw	r24, r28
    21c4:	01 96       	adiw	r24, 0x01	; 1
    21c6:	9b 8b       	std	Y+19, r25	; 0x13
    21c8:	8a 8b       	std	Y+18, r24	; 0x12
	tx_frame[1].data_ptr[0] = RTC_STATUS;	/** Adresse de base des registres de statut du RTC */
    21ca:	8f e0       	ldi	r24, 0x0F	; 15
    21cc:	89 83       	std	Y+1, r24	; 0x01
	tx_frame[1].data_ptr[1] = 0x00;			/** Valeurs toutes à zéro (descente des flags) */
    21ce:	1a 82       	std	Y+2, r1	; 0x02

	tx_frame[2].slave_adr = OWN_ADR;		/** Fin de la trame TWI */
    21d0:	8c e3       	ldi	r24, 0x3C	; 60
    21d2:	8c 8b       	std	Y+20, r24	; 0x14

	return(Send_to_TWI(tx_frame));			/** Appelle la fonction d'envoi sur le TWI */
    21d4:	ce 01       	movw	r24, r28
    21d6:	0c 96       	adiw	r24, 0x0c	; 12
    21d8:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
}
    21dc:	67 96       	adiw	r28, 0x17	; 23
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <RTC_get_time>:
 	Valeur retour:	État du TWI.
**************************************************************************************************************/
/** @brief	Lecture des variables de temps contenues dans le RTC vers la structure globale. 
**************************************************************************************************************/
unsigned char RTC_get_time(void)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	6d 97       	sbiw	r28, 0x1d	; 29
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
	
	tx_type tx_frame[3];

	etat = SUCCESS;
	
	tx_frame[0].slave_adr = RTC_ADR+W;		/** Adresse du RTC DS1338C, en écriture */
    2206:	80 ed       	ldi	r24, 0xD0	; 208
    2208:	8a 83       	std	Y+2, r24	; 0x02
	tx_frame[0].size = 1;					/** Nombre de données à transmettre */
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	8b 83       	std	Y+3, r24	; 0x03
	tx_frame[0].data_ptr = &temp0;			/** Fait pointer le pointeur sur le tampon temporaire */
    220e:	ce 01       	movw	r24, r28
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	9d 83       	std	Y+5, r25	; 0x05
    2214:	8c 83       	std	Y+4, r24	; 0x04
	tx_frame[0].data_ptr[0] = RTC_SECONDS; 	/** Passe l'adresse de base du DS1337 pour la lecture */
    2216:	19 82       	std	Y+1, r1	; 0x01
	
	tx_frame[1].slave_adr = RTC_ADR+R;		/** Démarre une lecture maitre */
    2218:	81 ed       	ldi	r24, 0xD1	; 209
    221a:	8e 83       	std	Y+6, r24	; 0x06
	tx_frame[1].size = 16;					/** Nombre de données à lires */
    221c:	80 e1       	ldi	r24, 0x10	; 16
    221e:	8f 83       	std	Y+7, r24	; 0x07
	tx_frame[1].data_ptr = temp1;			/** Fait pointer le pointeur sur le tampon temporaire */
    2220:	ce 01       	movw	r24, r28
    2222:	0e 96       	adiw	r24, 0x0e	; 14
    2224:	99 87       	std	Y+9, r25	; 0x09
    2226:	88 87       	std	Y+8, r24	; 0x08

	tx_frame[2].slave_adr = OWN_ADR;		/** Fin de la trame TWI */
    2228:	8c e3       	ldi	r24, 0x3C	; 60
    222a:	8a 87       	std	Y+10, r24	; 0x0a

	etat = Send_to_TWI(tx_frame);			/** Appelle la fonction d'envoi sur le TWI */
    222c:	ce 01       	movw	r24, r28
    222e:	02 96       	adiw	r24, 0x02	; 2
    2230:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
    2234:	78 2f       	mov	r23, r24

	if(etat != SUCCESS)						/** En cas d'erreur, retourner le code d'erreur, fin */
    2236:	8f 3f       	cpi	r24, 0xFF	; 255
    2238:	09 f0       	breq	.+2      	; 0x223c <RTC_get_time+0x4a>
    223a:	5d c0       	rjmp	.+186    	; 0x22f6 <RTC_get_time+0x104>
		return etat;	
	
	if(temp1[RTC_MONTHS_C]>>7)			/** Calcul à partir de la variable siècle (0=2000 1=1900) */
    223c:	6b 89       	ldd	r22, Y+19	; 0x13
    223e:	67 fd       	sbrc	r22, 7
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <RTC_get_time+0x56>
    2242:	40 ed       	ldi	r20, 0xD0	; 208
    2244:	57 e0       	ldi	r21, 0x07	; 7
    2246:	02 c0       	rjmp	.+4      	; 0x224c <RTC_get_time+0x5a>
    2248:	4c e6       	ldi	r20, 0x6C	; 108
    224a:	57 e0       	ldi	r21, 0x07	; 7
		an=1900;
	else
		an=2000;
	
	/** Conversions et placement des variable de temps dans la structure de temps globale */
	heure_actuelle.heure=bcd2dec(temp1[RTC_HOURS]&0x3F);
    224c:	28 89       	ldd	r18, Y+16	; 0x10
    224e:	82 2f       	mov	r24, r18
    2250:	8f 73       	andi	r24, 0x3F	; 63
    2252:	82 95       	swap	r24
    2254:	8f 70       	andi	r24, 0x0F	; 15
    2256:	3a e0       	ldi	r19, 0x0A	; 10
    2258:	83 9f       	mul	r24, r19
    225a:	c0 01       	movw	r24, r0
    225c:	11 24       	eor	r1, r1
    225e:	2f 70       	andi	r18, 0x0F	; 15
    2260:	28 0f       	add	r18, r24
    2262:	20 93 cb 03 	sts	0x03CB, r18
	heure_actuelle.minute=bcd2dec(temp1[RTC_MINUTES]&0x7F);
    2266:	2f 85       	ldd	r18, Y+15	; 0x0f
    2268:	82 2f       	mov	r24, r18
    226a:	8f 77       	andi	r24, 0x7F	; 127
    226c:	82 95       	swap	r24
    226e:	8f 70       	andi	r24, 0x0F	; 15
    2270:	83 9f       	mul	r24, r19
    2272:	c0 01       	movw	r24, r0
    2274:	11 24       	eor	r1, r1
    2276:	2f 70       	andi	r18, 0x0F	; 15
    2278:	28 0f       	add	r18, r24
    227a:	20 93 cc 03 	sts	0x03CC, r18
	heure_actuelle.seconde=bcd2dec(temp1[RTC_SECONDS]&0x7F);
    227e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2280:	82 2f       	mov	r24, r18
    2282:	8f 77       	andi	r24, 0x7F	; 127
    2284:	82 95       	swap	r24
    2286:	8f 70       	andi	r24, 0x0F	; 15
    2288:	83 9f       	mul	r24, r19
    228a:	c0 01       	movw	r24, r0
    228c:	11 24       	eor	r1, r1
    228e:	2f 70       	andi	r18, 0x0F	; 15
    2290:	28 0f       	add	r18, r24
    2292:	20 93 cd 03 	sts	0x03CD, r18

	heure_actuelle.annee=an+bcd2dec(temp1[RTC_YEARS]);
    2296:	2c 89       	ldd	r18, Y+20	; 0x14
    2298:	82 2f       	mov	r24, r18
    229a:	82 95       	swap	r24
    229c:	8f 70       	andi	r24, 0x0F	; 15
    229e:	83 9f       	mul	r24, r19
    22a0:	c0 01       	movw	r24, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	2f 70       	andi	r18, 0x0F	; 15
    22a6:	28 0f       	add	r18, r24
    22a8:	42 0f       	add	r20, r18
    22aa:	51 1d       	adc	r21, r1
    22ac:	50 93 c7 03 	sts	0x03C7, r21
    22b0:	40 93 c6 03 	sts	0x03C6, r20
	heure_actuelle.mois=bcd2dec(temp1[RTC_MONTHS_C]&0x1F);
    22b4:	86 2f       	mov	r24, r22
    22b6:	8f 71       	andi	r24, 0x1F	; 31
    22b8:	82 95       	swap	r24
    22ba:	8f 70       	andi	r24, 0x0F	; 15
    22bc:	83 9f       	mul	r24, r19
    22be:	c0 01       	movw	r24, r0
    22c0:	11 24       	eor	r1, r1
    22c2:	6f 70       	andi	r22, 0x0F	; 15
    22c4:	68 0f       	add	r22, r24
    22c6:	60 93 c8 03 	sts	0x03C8, r22
	heure_actuelle.jour=bcd2dec(temp1[RTC_DAYS]&0x3F);
    22ca:	2a 89       	ldd	r18, Y+18	; 0x12
    22cc:	82 2f       	mov	r24, r18
    22ce:	8f 73       	andi	r24, 0x3F	; 63
    22d0:	82 95       	swap	r24
    22d2:	8f 70       	andi	r24, 0x0F	; 15
    22d4:	83 9f       	mul	r24, r19
    22d6:	c0 01       	movw	r24, r0
    22d8:	11 24       	eor	r1, r1
    22da:	2f 70       	andi	r18, 0x0F	; 15
    22dc:	28 0f       	add	r18, r24
    22de:	20 93 c9 03 	sts	0x03C9, r18

	heure_actuelle.jour_semaine=bcd2dec(temp1[RTC_WEEKDAYS]&0x07);
    22e2:	89 89       	ldd	r24, Y+17	; 0x11
    22e4:	87 70       	andi	r24, 0x07	; 7
    22e6:	80 93 ca 03 	sts	0x03CA, r24

	heure_actuelle.batt_low=temp1[RTC_STATUS]>>7;
    22ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ec:	88 1f       	adc	r24, r24
    22ee:	88 27       	eor	r24, r24
    22f0:	88 1f       	adc	r24, r24
    22f2:	80 93 ce 03 	sts	0x03CE, r24
	
	return(etat);			/** Retourne l'état du TWI */
}
    22f6:	87 2f       	mov	r24, r23
    22f8:	6d 96       	adiw	r28, 0x1d	; 29
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <RTC_init>:
 	Valeur retour:	État du TWI.
**************************************************************************************************************/
/** @brief	Fonction permettant d'initialiser le RTC.
**************************************************************************************************************/
unsigned char RTC_init(void)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	2a 97       	sbiw	r28, 0x0a	; 10
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
	unsigned char temp[2];
	tx_type tx_frame[2];

	tx_frame[0].slave_adr = RTC_ADR+W;		/** Adresse du RTC DS1337, en écriture */
    231e:	80 ed       	ldi	r24, 0xD0	; 208
    2320:	8b 83       	std	Y+3, r24	; 0x03
	tx_frame[0].size = 2;					/** Nombre de données à transmettre */
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	8c 83       	std	Y+4, r24	; 0x04
	tx_frame[0].data_ptr = temp;			/** Fait pointer le pointeur sur le tampon temporaire */
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
	tx_frame[0].data_ptr[0] = RTC_CONTROL;	/** Adresse de base des registres de controle du RTC */
    232e:	8e e0       	ldi	r24, 0x0E	; 14
    2330:	89 83       	std	Y+1, r24	; 0x01
	tx_frame[0].data_ptr[1] = 0x08;			/** Valeurs par défaut, 4.096KHz clock pulse vers int0 */
    2332:	88 e0       	ldi	r24, 0x08	; 8
    2334:	8a 83       	std	Y+2, r24	; 0x02
	
	tx_frame[1].slave_adr = OWN_ADR;		/** Fin de la trame TWI */
    2336:	8c e3       	ldi	r24, 0x3C	; 60
    2338:	8f 83       	std	Y+7, r24	; 0x07

	return(Send_to_TWI(tx_frame));			/** Appelle la fonction d'envoi sur le TWI */
    233a:	ce 01       	movw	r24, r28
    233c:	03 96       	adiw	r24, 0x03	; 3
    233e:	0e 94 1a 12 	call	0x2434	; 0x2434 <Send_to_TWI>
}
    2342:	2a 96       	adiw	r28, 0x0a	; 10
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <Init_TWI>:
 	Valeur retour:	aucun
**************************************************************************************************************/
/** @brief	Fonction permettant d'initialiser le TWI.
**************************************************************************************************************/
void Init_TWI(unsigned long twi_freq)
{
    2354:	9b 01       	movw	r18, r22
    2356:	ac 01       	movw	r20, r24
	TWAR = OWN_ADR;								/** Assigne sa propre adresse */
    2358:	8c e3       	ldi	r24, 0x3C	; 60
    235a:	82 b9       	out	0x02, r24	; 2
	TWSR = 0;									/** Prescaler = 1 */							 
    235c:	11 b8       	out	0x01, r1	; 1
	TWBR = ((TWI_CPU / twi_freq - 16) / 2); /* Ajuste la vitesse du BUS TWI */
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	70 e8       	ldi	r23, 0x80	; 128
    2362:	80 e7       	ldi	r24, 0x70	; 112
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 40 1a 	call	0x3480	; 0x3480 <__udivmodsi4>
    236a:	20 51       	subi	r18, 0x10	; 16
    236c:	30 40       	sbci	r19, 0x00	; 0
    236e:	40 40       	sbci	r20, 0x00	; 0
    2370:	50 40       	sbci	r21, 0x00	; 0
    2372:	56 95       	lsr	r21
    2374:	47 95       	ror	r20
    2376:	37 95       	ror	r19
    2378:	27 95       	ror	r18
    237a:	20 b9       	out	0x00, r18	; 0
//	TWCR = (1<<TWEN);							/** Démarre l'interface TWI */
}    
    237c:	08 95       	ret

0000237e <Wait_TWI_int>:
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    237e:	06 b6       	in	r0, 0x36	; 54
    2380:	07 fe       	sbrs	r0, 7
    2382:	fd cf       	rjmp	.-6      	; 0x237e <Wait_TWI_int>
}    
    2384:	08 95       	ret

00002386 <Send_start>:
**************************************************************************************************************/
/** @brief	Envoi la commande de démmarage de séquence sur le bus TWI et attends la réponse.
**************************************************************************************************************/
unsigned char	Send_start(void)
{
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN));	/** Envoi de la commande START */
    2386:	84 ea       	ldi	r24, 0xA4	; 164
    2388:	86 bf       	out	0x36, r24	; 54
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    238a:	06 b6       	in	r0, 0x36	; 54
    238c:	07 fe       	sbrs	r0, 7
    238e:	fd cf       	rjmp	.-6      	; 0x238a <Send_start+0x4>
{
	TWCR = ((1<<TWINT)|(1<<TWSTA)|(1<<TWEN));	/** Envoi de la commande START */
	
	Wait_TWI_int();								/** Attends le drapeau d'interruption TWI */

    if(((TWSR & 0xF8) != START)&&((TWSR & 0xF8) != REP_START))
    2390:	81 b1       	in	r24, 0x01	; 1
    2392:	88 7f       	andi	r24, 0xF8	; 248
    2394:	88 30       	cpi	r24, 0x08	; 8
    2396:	31 f0       	breq	.+12     	; 0x23a4 <Send_start+0x1e>
    2398:	81 b1       	in	r24, 0x01	; 1
    239a:	88 7f       	andi	r24, 0xF8	; 248
    239c:	80 31       	cpi	r24, 0x10	; 16
    239e:	11 f0       	breq	.+4      	; 0x23a4 <Send_start+0x1e>
		return TWSR;						
    23a0:	81 b1       	in	r24, 0x01	; 1
    23a2:	08 95       	ret
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
	return SUCCESS;								/** Retourne l'état du bus TWI */    										
}
    23a6:	08 95       	ret

000023a8 <Send_stop>:
**************************************************************************************************************/
/** @brief	Envoi la commande d'arrêt de séquence sur le bus TWI.
**************************************************************************************************************/
void Send_stop(void)
{
	TWCR = ((1<<TWEN)|(1<<TWINT)|(1<<TWSTO));	/** Envoi de la commande STOP */
    23a8:	84 e9       	ldi	r24, 0x94	; 148
    23aa:	86 bf       	out	0x36, r24	; 54
}        
    23ac:	08 95       	ret

000023ae <Send_byte>:
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    23ae:	06 b6       	in	r0, 0x36	; 54
    23b0:	07 fe       	sbrs	r0, 7
    23b2:	fd cf       	rjmp	.-6      	; 0x23ae <Send_byte>
**************************************************************************************************************/
unsigned char Send_byte(unsigned char data)
{
	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	TWDR = data;
    23b4:	83 b9       	out	0x03, r24	; 3
 	TWCR = ((1<<TWINT)|(1<<TWEN));   		/** Descends le drapeau pour envoyer la donnée */ 
    23b6:	84 e8       	ldi	r24, 0x84	; 132
    23b8:	86 bf       	out	0x36, r24	; 54
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    23ba:	06 b6       	in	r0, 0x36	; 54
    23bc:	07 fe       	sbrs	r0, 7
    23be:	fd cf       	rjmp	.-6      	; 0x23ba <Send_byte+0xc>
	TWDR = data;
 	TWCR = ((1<<TWINT)|(1<<TWEN));   		/** Descends le drapeau pour envoyer la donnée */ 

	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	if((TWSR & 0xF8) != MTX_DATA_ACK)				
    23c0:	81 b1       	in	r24, 0x01	; 1
    23c2:	88 7f       	andi	r24, 0xF8	; 248
    23c4:	88 32       	cpi	r24, 0x28	; 40
    23c6:	11 f4       	brne	.+4      	; 0x23cc <Send_byte+0x1e>
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	08 95       	ret
		return TWSR;																
    23cc:	81 b1       	in	r24, 0x01	; 1
	return SUCCESS;							/** Retourne l'état du bus TWI */
}	
    23ce:	08 95       	ret

000023d0 <Send_adr>:
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    23d0:	06 b6       	in	r0, 0x36	; 54
    23d2:	07 fe       	sbrs	r0, 7
    23d4:	fd cf       	rjmp	.-6      	; 0x23d0 <Send_adr>
**************************************************************************************************************/
unsigned char Send_adr(unsigned char adr)
{
	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	TWDR = adr;
    23d6:	83 b9       	out	0x03, r24	; 3
	TWCR = ((1<<TWINT)|(1<<TWEN));   		/** Descends le drapeau pour envoyer l'adresse */  
    23d8:	84 e8       	ldi	r24, 0x84	; 132
    23da:	86 bf       	out	0x36, r24	; 54
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    23dc:	06 b6       	in	r0, 0x36	; 54
    23de:	07 fe       	sbrs	r0, 7
    23e0:	fd cf       	rjmp	.-6      	; 0x23dc <Send_adr+0xc>
	TWDR = adr;
	TWCR = ((1<<TWINT)|(1<<TWEN));   		/** Descends le drapeau pour envoyer l'adresse */  

	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	if(((TWSR & 0xF8) != MTX_ADR_ACK)&&((TWSR & 0xF8) != MRX_ADR_ACK))
    23e2:	81 b1       	in	r24, 0x01	; 1
    23e4:	88 7f       	andi	r24, 0xF8	; 248
    23e6:	88 31       	cpi	r24, 0x18	; 24
    23e8:	31 f0       	breq	.+12     	; 0x23f6 <Send_adr+0x26>
    23ea:	81 b1       	in	r24, 0x01	; 1
    23ec:	88 7f       	andi	r24, 0xF8	; 248
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	11 f0       	breq	.+4      	; 0x23f6 <Send_adr+0x26>
		return TWSR;
    23f2:	81 b1       	in	r24, 0x01	; 1
    23f4:	08 95       	ret
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
	return SUCCESS;							/** Retourne l'état du bus TWI */
}	
    23f8:	08 95       	ret

000023fa <Get_byte>:
 	Valeur retour:	État du bus TWI
**************************************************************************************************************/
/** @brief	Réception d'un octet de données sur le bus TWI.
**************************************************************************************************************/
unsigned char Get_byte(unsigned char *rx_ptr,char last_byte)
{
    23fa:	fc 01       	movw	r30, r24
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    23fc:	06 b6       	in	r0, 0x36	; 54
    23fe:	07 fe       	sbrs	r0, 7
    2400:	fd cf       	rjmp	.-6      	; 0x23fc <Get_byte+0x2>
**************************************************************************************************************/
unsigned char Get_byte(unsigned char *rx_ptr,char last_byte)
{
	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	if(last_byte)							/** Si ce n'est pas la dernière donnée à recevoir... */	
    2402:	66 23       	and	r22, r22
    2404:	11 f0       	breq	.+4      	; 0x240a <Get_byte+0x10>
		TWCR = ((1<<TWINT)|(1<<TWEA)|(1<<TWEN));	/** Descends le drapeau pour recevoir la donnée + ACK */	
    2406:	84 ec       	ldi	r24, 0xC4	; 196
    2408:	01 c0       	rjmp	.+2      	; 0x240c <Get_byte+0x12>
	else									/** Si c'est la dernière donnée à recevoir... */
		TWCR = ((1<<TWINT)|(1<<TWEN)); 			/** Descends le drapeau pour recevoir la donnée sans ACK */	
    240a:	84 e8       	ldi	r24, 0x84	; 132
    240c:	86 bf       	out	0x36, r24	; 54
**************************************************************************************************************/
/** @brief	Attends le drapeau d'interruption du TWI. (mode polling)
**************************************************************************************************************/
void Wait_TWI_int(void)
{
	while (!(TWCR & (1<<TWINT))); 
    240e:	06 b6       	in	r0, 0x36	; 54
    2410:	07 fe       	sbrs	r0, 7
    2412:	fd cf       	rjmp	.-6      	; 0x240e <Get_byte+0x14>
		TWCR = ((1<<TWINT)|(1<<TWEA)|(1<<TWEN));	/** Descends le drapeau pour recevoir la donnée + ACK */	
	else									/** Si c'est la dernière donnée à recevoir... */
		TWCR = ((1<<TWINT)|(1<<TWEN)); 			/** Descends le drapeau pour recevoir la donnée sans ACK */	
	Wait_TWI_int();							/** Attends le drapeau d'interruption TWI */

	*rx_ptr = TWDR;							/** Écris la donnée reçue au pointeur */
    2414:	83 b1       	in	r24, 0x03	; 3
    2416:	80 83       	st	Z, r24
	
 	if((((TWSR & 0xF8) == MRX_DATA_NACK)&&(last_byte == 0))||((TWSR & 0xF8) == MRX_DATA_ACK))
    2418:	81 b1       	in	r24, 0x01	; 1
    241a:	88 7f       	andi	r24, 0xF8	; 248
    241c:	88 35       	cpi	r24, 0x58	; 88
    241e:	11 f4       	brne	.+4      	; 0x2424 <Get_byte+0x2a>
    2420:	66 23       	and	r22, r22
    2422:	31 f0       	breq	.+12     	; 0x2430 <Get_byte+0x36>
    2424:	81 b1       	in	r24, 0x01	; 1
    2426:	88 7f       	andi	r24, 0xF8	; 248
    2428:	80 35       	cpi	r24, 0x50	; 80
    242a:	11 f0       	breq	.+4      	; 0x2430 <Get_byte+0x36>
		return SUCCESS;	  
	return TWSR;							/** Retourne l'état du bus TWI */
    242c:	81 b1       	in	r24, 0x01	; 1
    242e:	08 95       	ret
    2430:	8f ef       	ldi	r24, 0xFF	; 255
}
    2432:	08 95       	ret

00002434 <Send_to_TWI>:
 	Valeur retour:	État du bus TWI
**************************************************************************************************************/
/** @brief	Envoi d'une séquence sur le bus TWI.
**************************************************************************************************************/    
unsigned char Send_to_TWI(tx_type *data_pack)
{
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	7c 01       	movw	r14, r24
    2442:	9f ef       	ldi	r25, 0xFF	; 255
    2444:	00 e0       	ldi	r16, 0x00	; 0
    2446:	31 c0       	rjmp	.+98     	; 0x24aa <Send_to_TWI+0x76>

	state = SUCCESS;
	
	for(i=0;(data_pack[i].slave_adr != OWN_ADR)&&(state == SUCCESS);i++)
	{
		state = Send_start();								/** Envoi de la commande START */
    2448:	0e 94 c3 11 	call	0x2386	; 0x2386 <Send_start>
    244c:	98 2f       	mov	r25, r24
		if (state == SUCCESS)				
    244e:	8f 3f       	cpi	r24, 0xFF	; 255
    2450:	21 f4       	brne	.+8      	; 0x245a <Send_to_TWI+0x26>
			state = Send_adr(data_pack[i].slave_adr);		/** Envoi de l'adresse esclave I2C + !W/R */
    2452:	88 81       	ld	r24, Y
    2454:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <Send_adr>
    2458:	98 2f       	mov	r25, r24
		
		/** Envoi ou recoit des données, selon !W/R fourni à la fonction */
		if(!(data_pack[i].slave_adr & R))					/** Si on désire écrire vers l'esclave... */
    245a:	88 81       	ld	r24, Y
    245c:	80 ff       	sbrs	r24, 0
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <Send_to_TWI+0x30>
    2460:	10 e0       	ldi	r17, 0x00	; 0
    2462:	1d c0       	rjmp	.+58     	; 0x249e <Send_to_TWI+0x6a>
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	09 c0       	rjmp	.+18     	; 0x247a <Send_to_TWI+0x46>
		{
			 /** Transmission des données en boucle */
			for(j=0;((j<data_pack[i].size)&&(state == SUCCESS));j++)
				state = Send_byte(data_pack[i].data_ptr[j]);
    2468:	ea 81       	ldd	r30, Y+2	; 0x02
    246a:	fb 81       	ldd	r31, Y+3	; 0x03
    246c:	e1 0f       	add	r30, r17
    246e:	f1 1d       	adc	r31, r1
    2470:	80 81       	ld	r24, Z
    2472:	0e 94 d7 11 	call	0x23ae	; 0x23ae <Send_byte>
    2476:	98 2f       	mov	r25, r24
		
		/** Envoi ou recoit des données, selon !W/R fourni à la fonction */
		if(!(data_pack[i].slave_adr & R))					/** Si on désire écrire vers l'esclave... */
		{
			 /** Transmission des données en boucle */
			for(j=0;((j<data_pack[i].size)&&(state == SUCCESS));j++)
    2478:	1f 5f       	subi	r17, 0xFF	; 255
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	18 17       	cp	r17, r24
    247e:	a0 f4       	brcc	.+40     	; 0x24a8 <Send_to_TWI+0x74>
    2480:	9f 3f       	cpi	r25, 0xFF	; 255
    2482:	91 f3       	breq	.-28     	; 0x2468 <Send_to_TWI+0x34>
    2484:	11 c0       	rjmp	.+34     	; 0x24a8 <Send_to_TWI+0x74>
		}	
		else												/** Sinon, on désire lire de l'esclave... */ 
		{
			 /** Réception des données en boucle */
			for(j=0;((j<data_pack[i].size)&&(state == SUCCESS));j++)
				state = Get_byte(data_pack[i].data_ptr++,data_pack[i].size-j-1);
    2486:	8a 81       	ldd	r24, Y+2	; 0x02
    2488:	9b 81       	ldd	r25, Y+3	; 0x03
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	9b 83       	std	Y+3, r25	; 0x03
    248e:	8a 83       	std	Y+2, r24	; 0x02
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	61 50       	subi	r22, 0x01	; 1
    2494:	61 1b       	sub	r22, r17
    2496:	0e 94 fd 11 	call	0x23fa	; 0x23fa <Get_byte>
    249a:	98 2f       	mov	r25, r24
				state = Send_byte(data_pack[i].data_ptr[j]);
		}	
		else												/** Sinon, on désire lire de l'esclave... */ 
		{
			 /** Réception des données en boucle */
			for(j=0;((j<data_pack[i].size)&&(state == SUCCESS));j++)
    249c:	1f 5f       	subi	r17, 0xFF	; 255
    249e:	69 81       	ldd	r22, Y+1	; 0x01
    24a0:	16 17       	cp	r17, r22
    24a2:	10 f4       	brcc	.+4      	; 0x24a8 <Send_to_TWI+0x74>
    24a4:	9f 3f       	cpi	r25, 0xFF	; 255
    24a6:	79 f3       	breq	.-34     	; 0x2486 <Send_to_TWI+0x52>
{
	unsigned char state,i,j;

	state = SUCCESS;
	
	for(i=0;(data_pack[i].slave_adr != OWN_ADR)&&(state == SUCCESS);i++)
    24a8:	0f 5f       	subi	r16, 0xFF	; 255
    24aa:	c0 2f       	mov	r28, r16
    24ac:	d0 e0       	ldi	r29, 0x00	; 0
    24ae:	cc 0f       	add	r28, r28
    24b0:	dd 1f       	adc	r29, r29
    24b2:	cc 0f       	add	r28, r28
    24b4:	dd 1f       	adc	r29, r29
    24b6:	ce 0d       	add	r28, r14
    24b8:	df 1d       	adc	r29, r15
    24ba:	88 81       	ld	r24, Y
    24bc:	8c 33       	cpi	r24, 0x3C	; 60
    24be:	11 f0       	breq	.+4      	; 0x24c4 <Send_to_TWI+0x90>
    24c0:	9f 3f       	cpi	r25, 0xFF	; 255
    24c2:	11 f2       	breq	.-124    	; 0x2448 <Send_to_TWI+0x14>
**************************************************************************************************************/
/** @brief	Envoi la commande d'arrêt de séquence sur le bus TWI.
**************************************************************************************************************/
void Send_stop(void)
{
	TWCR = ((1<<TWEN)|(1<<TWINT)|(1<<TWSTO));	/** Envoi de la commande STOP */
    24c4:	84 e9       	ldi	r24, 0x94	; 148
    24c6:	86 bf       	out	0x36, r24	; 54
		}					
	}
  	Send_stop();											/** Envoi de la commande STOP */
  	  
	return state;											/** Retourne l'état du bus TWI */  
}
    24c8:	89 2f       	mov	r24, r25
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	08 95       	ret

000024d8 <strtoi>:
 	Valeur retour:	Nombre entier.
**************************************************************************************************************/
/** @brief	Conversion d'une chaine de caractère en nombre entier.
**************************************************************************************************************/
unsigned int strtoi(char *str)
{
    24d8:	fc 01       	movw	r30, r24
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	13 c0       	rjmp	.+38     	; 0x2506 <strtoi+0x2e>
   unsigned int val = 0, digit;
   char c;

   while ((c = *str++) != 0x00) 
   {
        if (c >= '0' && c <= '9')
    24e0:	84 2f       	mov	r24, r20
    24e2:	80 53       	subi	r24, 0x30	; 48
    24e4:	8a 30       	cpi	r24, 0x0A	; 10
    24e6:	90 f4       	brcc	.+36     	; 0x250c <strtoi+0x34>
            digit = (unsigned int) (c - '0');
        else
            break;

        val = (val * 10) + digit;
    24e8:	c9 01       	movw	r24, r18
    24ea:	63 e0       	ldi	r22, 0x03	; 3
    24ec:	88 0f       	add	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	6a 95       	dec	r22
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <strtoi+0x14>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	28 0f       	add	r18, r24
    24fa:	39 1f       	adc	r19, r25
    24fc:	84 2f       	mov	r24, r20
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	c0 97       	sbiw	r24, 0x30	; 48
    2502:	28 0f       	add	r18, r24
    2504:	39 1f       	adc	r19, r25
unsigned int strtoi(char *str)
{
   unsigned int val = 0, digit;
   char c;

   while ((c = *str++) != 0x00) 
    2506:	41 91       	ld	r20, Z+
    2508:	44 23       	and	r20, r20
    250a:	51 f7       	brne	.-44     	; 0x24e0 <strtoi+0x8>

        val = (val * 10) + digit;
    }

    return val;
}
    250c:	c9 01       	movw	r24, r18
    250e:	08 95       	ret

00002510 <stringcomp>:
 	Valeur retour:	0 = pareilles, 1 = différentes
**************************************************************************************************************/
/** @brief	Comparaison de deux chaines de caractères.
**************************************************************************************************************/
int stringcomp(char *a, char *b)
{
    2510:	dc 01       	movw	r26, r24
    2512:	fb 01       	movw	r30, r22
    2514:	04 c0       	rjmp	.+8      	; 0x251e <stringcomp+0xe>
	char *aa=a;
	char *bb=b;

	while(*aa !=0x00 && *bb !=0x00)
	{
		if(*aa!=*bb)
    2516:	98 17       	cp	r25, r24
    2518:	69 f4       	brne	.+26     	; 0x2534 <stringcomp+0x24>
			return(1);
		aa++;
    251a:	11 96       	adiw	r26, 0x01	; 1
		bb++;
    251c:	31 96       	adiw	r30, 0x01	; 1
int stringcomp(char *a, char *b)
{
	char *aa=a;
	char *bb=b;

	while(*aa !=0x00 && *bb !=0x00)
    251e:	9c 91       	ld	r25, X
    2520:	99 23       	and	r25, r25
    2522:	19 f0       	breq	.+6      	; 0x252a <stringcomp+0x1a>
    2524:	80 81       	ld	r24, Z
    2526:	88 23       	and	r24, r24
    2528:	b1 f7       	brne	.-20     	; 0x2516 <stringcomp+0x6>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	98 17       	cp	r25, r24
    2532:	11 f0       	breq	.+4      	; 0x2538 <stringcomp+0x28>
    2534:	21 e0       	ldi	r18, 0x01	; 1
    2536:	30 e0       	ldi	r19, 0x00	; 0
	}
	if(*aa!=*bb)
		return(1);

	return(0);
}
    2538:	c9 01       	movw	r24, r18
    253a:	08 95       	ret

0000253c <stringcpy>:
 	Valeur retour:	rien
**************************************************************************************************************/
/** @brief	Copie d'une chaine de caractères dans une autre.
**************************************************************************************************************/
void stringcpy(char *dst, char *src, int n)
{
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	8c 01       	movw	r16, r24
    2546:	eb 01       	movw	r28, r22
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	0a c0       	rjmp	.+20     	; 0x2562 <stringcpy+0x26>
	int i;
	
	for(i=0;i<n && *src !=0x00;i++)
		*(dst+i)=*(src+i);
    254e:	f8 01       	movw	r30, r16
    2550:	e2 0f       	add	r30, r18
    2552:	f3 1f       	adc	r31, r19
    2554:	de 01       	movw	r26, r28
    2556:	a2 0f       	add	r26, r18
    2558:	b3 1f       	adc	r27, r19
    255a:	8c 91       	ld	r24, X
    255c:	80 83       	st	Z, r24
**************************************************************************************************************/
void stringcpy(char *dst, char *src, int n)
{
	int i;
	
	for(i=0;i<n && *src !=0x00;i++)
    255e:	2f 5f       	subi	r18, 0xFF	; 255
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	24 17       	cp	r18, r20
    2564:	35 07       	cpc	r19, r21
    2566:	1c f4       	brge	.+6      	; 0x256e <stringcpy+0x32>
    2568:	88 81       	ld	r24, Y
    256a:	88 23       	and	r24, r24
    256c:	81 f7       	brne	.-32     	; 0x254e <stringcpy+0x12>
		*(dst+i)=*(src+i);
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	0f 91       	pop	r16
    2576:	08 95       	ret

00002578 <wait>:
**************************************************************************************************************/
/** @brief	Attente.
**************************************************************************************************************/
void wait(unsigned int t)
{
	delai=t;
    2578:	90 93 fa 04 	sts	0x04FA, r25
    257c:	80 93 f9 04 	sts	0x04F9, r24

	while(delai);
    2580:	80 91 f9 04 	lds	r24, 0x04F9
    2584:	90 91 fa 04 	lds	r25, 0x04FA
    2588:	89 2b       	or	r24, r25
    258a:	d1 f7       	brne	.-12     	; 0x2580 <wait+0x8>
}
    258c:	08 95       	ret

0000258e <crcccitt>:
 	Valeur retour:	CRC16 (CCITT)
**************************************************************************************************************/
/** @brief	Attente.
**************************************************************************************************************/
unsigned int crcccitt(unsigned int crc_init, char donnee[], unsigned long int size)
{
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	dc 01       	movw	r26, r24
    25a0:	eb 01       	movw	r28, r22
    25a2:	79 01       	movw	r14, r18
    25a4:	8a 01       	movw	r16, r20
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    		crc_init = (unsigned int)(crc_init ^ (donnee[i] << 8));
 
     		for(index = 0; index <= 7; index++)
     		{
      			if(crc_init & 0x8000)
       				crc_init = (unsigned int)((crc_init << 1) ^ 0x1021);
    25ae:	e1 e2       	ldi	r30, 0x21	; 33
    25b0:	ce 2e       	mov	r12, r30
    25b2:	e0 e1       	ldi	r30, 0x10	; 16
    25b4:	de 2e       	mov	r13, r30
    25b6:	19 c0       	rjmp	.+50     	; 0x25ea <crcccitt+0x5c>
	char index;
 	unsigned long int i;

  	for(i = 0; i < size; i++)
   	{
    		crc_init = (unsigned int)(crc_init ^ (donnee[i] << 8));
    25b8:	fe 01       	movw	r30, r28
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	f0 81       	ld	r31, Z
    25c0:	e0 e0       	ldi	r30, 0x00	; 0
    25c2:	ae 27       	eor	r26, r30
    25c4:	bf 27       	eor	r27, r31
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	cd 01       	movw	r24, r26
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
 
     		for(index = 0; index <= 7; index++)
     		{
      			if(crc_init & 0x8000)
    25ce:	b7 ff       	sbrs	r27, 7
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <crcccitt+0x4c>
       				crc_init = (unsigned int)((crc_init << 1) ^ 0x1021);
    25d2:	dc 01       	movw	r26, r24
    25d4:	ac 25       	eor	r26, r12
    25d6:	bd 25       	eor	r27, r13
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <crcccitt+0x4e>
      			else
       				crc_init = (unsigned int)(crc_init << 1);
    25da:	dc 01       	movw	r26, r24

  	for(i = 0; i < size; i++)
   	{
    		crc_init = (unsigned int)(crc_init ^ (donnee[i] << 8));
 
     		for(index = 0; index <= 7; index++)
    25dc:	6f 5f       	subi	r22, 0xFF	; 255
    25de:	68 30       	cpi	r22, 0x08	; 8
    25e0:	99 f7       	brne	.-26     	; 0x25c8 <crcccitt+0x3a>
unsigned int crcccitt(unsigned int crc_init, char donnee[], unsigned long int size)
{
	char index;
 	unsigned long int i;

  	for(i = 0; i < size; i++)
    25e2:	2f 5f       	subi	r18, 0xFF	; 255
    25e4:	3f 4f       	sbci	r19, 0xFF	; 255
    25e6:	4f 4f       	sbci	r20, 0xFF	; 255
    25e8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ea:	2e 15       	cp	r18, r14
    25ec:	3f 05       	cpc	r19, r15
    25ee:	40 07       	cpc	r20, r16
    25f0:	51 07       	cpc	r21, r17
    25f2:	10 f3       	brcs	.-60     	; 0x25b8 <crcccitt+0x2a>
      			else
       				crc_init = (unsigned int)(crc_init << 1);
       		}
  	}
 	return crc_init;
}
    25f4:	cd 01       	movw	r24, r26
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	1f 91       	pop	r17
    25fc:	0f 91       	pop	r16
    25fe:	ff 90       	pop	r15
    2600:	ef 90       	pop	r14
    2602:	df 90       	pop	r13
    2604:	cf 90       	pop	r12
    2606:	08 95       	ret

00002608 <write_eeptr>:
 	Valeur retour:	unsigned long pointeur sur la mémoire EEPROM
**************************************************************************************************************/
/** @brief	Mise en mémoire du pointeur d'insertion en mémoire EEPROM.
**************************************************************************************************************/
void write_eeptr(unsigned long eeptr)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <write_eeptr+0x6>
    260e:	00 d0       	rcall	.+0      	; 0x2610 <write_eeptr+0x8>
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
	long_char eeadr;
	
	eeadr.var_long=eeptr;
    2614:	69 83       	std	Y+1, r22	; 0x01
    2616:	7a 83       	std	Y+2, r23	; 0x02
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	9c 83       	std	Y+4, r25	; 0x04
		
	EEPROM_write(200, 4, (char *)&eeadr);
    261c:	88 ec       	ldi	r24, 0xC8	; 200
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	64 e0       	ldi	r22, 0x04	; 4
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	ae 01       	movw	r20, r28
    2626:	4f 5f       	subi	r20, 0xFF	; 255
    2628:	5f 4f       	sbci	r21, 0xFF	; 255
    262a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <read_eeptr>:
 	Valeur retour:	unsigned long pointeur sur la mémoire EEPROM
**************************************************************************************************************/
/** @brief	Lecture du pointeur d'insertion en mémoire EEPROM.
**************************************************************************************************************/
void read_eeptr(unsigned long *eeptr)
{
    263c:	0f 93       	push	r16
    263e:	1f 93       	push	r17
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <read_eeptr+0xa>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <read_eeptr+0xc>
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	8c 01       	movw	r16, r24
	long_char eeadr;
	
	EEPROM_read(200, 4, (char *)&eeadr);
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	70 e0       	ldi	r23, 0x00	; 0
    2656:	ae 01       	movw	r20, r28
    2658:	4f 5f       	subi	r20, 0xFF	; 255
    265a:	5f 4f       	sbci	r21, 0xFF	; 255
    265c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <EEPROM_read>
	
	*eeptr=eeadr.var_long;
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	ab 81       	ldd	r26, Y+3	; 0x03
    2666:	bc 81       	ldd	r27, Y+4	; 0x04
    2668:	f8 01       	movw	r30, r16
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <USART_getstring>:
 	Valeur retour:	Nombre de caractères
**************************************************************************************************************/
/** @brief	Fonction évoluée de gets, adaptée à nos besoins.
**************************************************************************************************************/
unsigned int USART_getstring(unsigned char echo, unsigned int nbcarmax, char* chaine)
{
    2684:	af 92       	push	r10
    2686:	bf 92       	push	r11
    2688:	cf 92       	push	r12
    268a:	df 92       	push	r13
    268c:	ef 92       	push	r14
    268e:	ff 92       	push	r15
    2690:	0f 93       	push	r16
    2692:	1f 93       	push	r17
    2694:	cf 93       	push	r28
    2696:	df 93       	push	r29
    2698:	a8 2e       	mov	r10, r24
    269a:	7b 01       	movw	r14, r22
    269c:	8a 01       	movw	r16, r20
    269e:	c0 e0       	ldi	r28, 0x00	; 0
    26a0:	d0 e0       	ldi	r29, 0x00	; 0
    26a2:	bb 24       	eor	r11, r11
				}
				fini=VRAI;
			}
			break;
		default:
			if(c>=32 && c<=126 && nbcar<(nbcarmax-1))	//Si c'est un caractère ASCII imprimable
    26a4:	6b 01       	movw	r12, r22
    26a6:	08 94       	sec
    26a8:	c1 08       	sbc	r12, r1
    26aa:	d1 08       	sbc	r13, r1
    26ac:	32 c0       	rjmp	.+100    	; 0x2712 <USART_getstring+0x8e>
	unsigned int nbcar=0;
	unsigned char fini=FAUX;
		
	while(nbcar<nbcarmax && !fini)
	{
		c = USART_getchar(NULL);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_getchar>
    26b6:	98 2f       	mov	r25, r24
		switch(c)
    26b8:	88 30       	cpi	r24, 0x08	; 8
    26ba:	19 f0       	breq	.+6      	; 0x26c2 <USART_getstring+0x3e>
    26bc:	8d 30       	cpi	r24, 0x0D	; 13
    26be:	79 f4       	brne	.+30     	; 0x26de <USART_getstring+0x5a>
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <USART_getstring+0x48>
		{
			case 0x08:	// BackSpace
			{
				if(nbcar>0)	// Au moins un caractère dans la chaine
    26c2:	20 97       	sbiw	r28, 0x00	; 0
    26c4:	09 f1       	breq	.+66     	; 0x2708 <USART_getstring+0x84>
				{
					nbcar--;
    26c6:	21 97       	sbiw	r28, 0x01	; 1
					USART_putchar(0x08, NULL);
    26c8:	88 e0       	ldi	r24, 0x08	; 8
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <USART_getstring+0x86>
					USART_putchar(0x07, NULL);	// Sinon, DING!
				break;
			}
			case 0x0D:	// Return ou enter
			{
				chaine[nbcar]=0;
    26cc:	f8 01       	movw	r30, r16
    26ce:	ec 0f       	add	r30, r28
    26d0:	fd 1f       	adc	r31, r29
    26d2:	10 82       	st	Z, r1
				if(nbcar==0)
    26d4:	20 97       	sbiw	r28, 0x00	; 0
    26d6:	11 f1       	breq	.+68     	; 0x271c <USART_getstring+0x98>
    26d8:	bb 24       	eor	r11, r11
    26da:	b3 94       	inc	r11
    26dc:	1a c0       	rjmp	.+52     	; 0x2712 <USART_getstring+0x8e>
				}
				fini=VRAI;
			}
			break;
		default:
			if(c>=32 && c<=126 && nbcar<(nbcarmax-1))	//Si c'est un caractère ASCII imprimable
    26de:	80 52       	subi	r24, 0x20	; 32
    26e0:	8f 35       	cpi	r24, 0x5F	; 95
    26e2:	90 f4       	brcc	.+36     	; 0x2708 <USART_getstring+0x84>
    26e4:	cc 15       	cp	r28, r12
    26e6:	dd 05       	cpc	r29, r13
    26e8:	78 f4       	brcc	.+30     	; 0x2708 <USART_getstring+0x84>
			{
				chaine[nbcar]=c;
    26ea:	f8 01       	movw	r30, r16
    26ec:	ec 0f       	add	r30, r28
    26ee:	fd 1f       	adc	r31, r29
    26f0:	90 83       	st	Z, r25
				nbcar++;
    26f2:	21 96       	adiw	r28, 0x01	; 1
				if(echo==ECHO)	// Echo!
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	a8 16       	cp	r10, r24
    26f8:	11 f4       	brne	.+4      	; 0x26fe <USART_getstring+0x7a>
					USART_putchar(c, NULL);
    26fa:	89 2f       	mov	r24, r25
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <USART_getstring+0x86>
				else if(echo==STAR_ECHO)	//Echo étoilé!
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	a8 16       	cp	r10, r24
    2702:	39 f4       	brne	.+14     	; 0x2712 <USART_getstring+0x8e>
					USART_putchar('*', NULL);
    2704:	8a e2       	ldi	r24, 0x2A	; 42
    2706:	01 c0       	rjmp	.+2      	; 0x270a <USART_getstring+0x86>
			}
			else
				USART_putchar(0x07, NULL);	// Sinon, DING!
    2708:	87 e0       	ldi	r24, 0x07	; 7
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	0e 94 b3 00 	call	0x166	; 0x166 <USART_putchar>
{
	char c;
	unsigned int nbcar=0;
	unsigned char fini=FAUX;
		
	while(nbcar<nbcarmax && !fini)
    2712:	ce 15       	cp	r28, r14
    2714:	df 05       	cpc	r29, r15
    2716:	10 f4       	brcc	.+4      	; 0x271c <USART_getstring+0x98>
    2718:	bb 20       	and	r11, r11
    271a:	49 f2       	breq	.-110    	; 0x26ae <USART_getstring+0x2a>
		}
		
	}
	
	return(nbcar);
}
    271c:	ce 01       	movw	r24, r28
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	08 95       	ret

00002734 <rcon>:
 	Valeur retour:	Constante de round
**************************************************************************************************************/
/** @brief	Calcule la constante de round, renvoie, pour i valeur d'entree, la valeur 2 ** (i - 1).
**************************************************************************************************************/
unsigned char rcon(int i)
{
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	41 e0       	ldi	r20, 0x01	; 1
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <rcon+0x10>
		j = j*2;
    273e:	44 0f       	add	r20, r20
unsigned char rcon(int i)
{
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
    2740:	2f 5f       	subi	r18, 0xFF	; 255
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	28 17       	cp	r18, r24
    2746:	39 07       	cpc	r19, r25
    2748:	d4 f3       	brlt	.-12     	; 0x273e <rcon+0xa>
		j = j*2;
	return j;
}
    274a:	84 2f       	mov	r24, r20
    274c:	08 95       	ret

0000274e <sub_s_box>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue le produit matriciel de l'octet c passe en parametre avec la matrice de la s_box.
**************************************************************************************************************/
unsigned char sub_s_box(unsigned char c, unsigned char cmd)
{
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	68 97       	sbiw	r28, 0x18	; 24
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	98 2f       	mov	r25, r24
	int i,nb_1 = 0;
	unsigned char s_box[8];
	unsigned char temp[8];
	unsigned char r[8];

	if (cmd == 'c')
    2764:	63 36       	cpi	r22, 0x63	; 99
    2766:	c9 f4       	brne	.+50     	; 0x279a <sub_s_box+0x4c>
	{
		s_box[0] = 143;	//matrice de la s_box (une case du tableau correspond a une ligne de la matrice)
    2768:	8f e8       	ldi	r24, 0x8F	; 143
    276a:	89 83       	std	Y+1, r24	; 0x01
		s_box[1] = 199;
    276c:	87 ec       	ldi	r24, 0xC7	; 199
    276e:	8a 83       	std	Y+2, r24	; 0x02
		s_box[2] = 227;
    2770:	83 ee       	ldi	r24, 0xE3	; 227
    2772:	8b 83       	std	Y+3, r24	; 0x03
		s_box[3] = 241;
    2774:	81 ef       	ldi	r24, 0xF1	; 241
    2776:	8c 83       	std	Y+4, r24	; 0x04
		s_box[4] = 248;
    2778:	88 ef       	ldi	r24, 0xF8	; 248
    277a:	8d 83       	std	Y+5, r24	; 0x05
		s_box[5] = 124;
    277c:	8c e7       	ldi	r24, 0x7C	; 124
    277e:	8e 83       	std	Y+6, r24	; 0x06
		s_box[6] = 62;
    2780:	8e e3       	ldi	r24, 0x3E	; 62
    2782:	8f 83       	std	Y+7, r24	; 0x07
		s_box[7] = 31;
    2784:	8f e1       	ldi	r24, 0x1F	; 31
    2786:	88 87       	std	Y+8, r24	; 0x08
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
		s_box[6] = 148;
		s_box[7] = 74;
	}

	for (i = 0; i < 8; i++) 
		temp[i] = s_box[i] & c; //ET bit a bit
    278c:	ae 01       	movw	r20, r28
    278e:	47 5f       	subi	r20, 0xF7	; 247
    2790:	5f 4f       	sbci	r21, 0xFF	; 255
    2792:	be 01       	movw	r22, r28
    2794:	6f 5f       	subi	r22, 0xFF	; 255
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
    2798:	10 c0       	rjmp	.+32     	; 0x27ba <sub_s_box+0x6c>
		s_box[6] = 62;
		s_box[7] = 31;
	}
	else
	{
		s_box[0] = 37;	//matrice inverse de la s_box (decryptage)
    279a:	85 e2       	ldi	r24, 0x25	; 37
    279c:	89 83       	std	Y+1, r24	; 0x01
		s_box[1] = 146;
    279e:	82 e9       	ldi	r24, 0x92	; 146
    27a0:	8a 83       	std	Y+2, r24	; 0x02
		s_box[2] = 73;
    27a2:	89 e4       	ldi	r24, 0x49	; 73
    27a4:	8b 83       	std	Y+3, r24	; 0x03
		s_box[3] = 164;
    27a6:	84 ea       	ldi	r24, 0xA4	; 164
    27a8:	8c 83       	std	Y+4, r24	; 0x04
		s_box[4] = 82;
    27aa:	82 e5       	ldi	r24, 0x52	; 82
    27ac:	8d 83       	std	Y+5, r24	; 0x05
		s_box[5] = 41;
    27ae:	89 e2       	ldi	r24, 0x29	; 41
    27b0:	8e 83       	std	Y+6, r24	; 0x06
		s_box[6] = 148;
    27b2:	84 e9       	ldi	r24, 0x94	; 148
    27b4:	8f 83       	std	Y+7, r24	; 0x07
		s_box[7] = 74;
    27b6:	8a e4       	ldi	r24, 0x4A	; 74
    27b8:	e6 cf       	rjmp	.-52     	; 0x2786 <sub_s_box+0x38>
	}

	for (i = 0; i < 8; i++) 
		temp[i] = s_box[i] & c; //ET bit a bit
    27ba:	fa 01       	movw	r30, r20
    27bc:	e2 0f       	add	r30, r18
    27be:	f3 1f       	adc	r31, r19
    27c0:	db 01       	movw	r26, r22
    27c2:	a2 0f       	add	r26, r18
    27c4:	b3 1f       	adc	r27, r19
    27c6:	8c 91       	ld	r24, X
    27c8:	89 23       	and	r24, r25
    27ca:	80 83       	st	Z, r24
		s_box[5] = 41;
		s_box[6] = 148;
		s_box[7] = 74;
	}

	for (i = 0; i < 8; i++) 
    27cc:	2f 5f       	subi	r18, 0xFF	; 255
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	28 30       	cpi	r18, 0x08	; 8
    27d2:	31 05       	cpc	r19, r1
    27d4:	91 f7       	brne	.-28     	; 0x27ba <sub_s_box+0x6c>
    27d6:	fa 01       	movw	r30, r20
    27d8:	de 01       	movw	r26, r28
    27da:	51 96       	adiw	r26, 0x11	; 17
		temp[i] = s_box[i] & c; //ET bit a bit

	for (i = 0; i < 8; i++)
    27dc:	ad 01       	movw	r20, r26
		s_box[5] = 41;
		s_box[6] = 148;
		s_box[7] = 74;
	}

	for (i = 0; i < 8; i++) 
    27de:	20 81       	ld	r18, Z
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
	for (i = 0; i < 8; i++)
	{
		nb_1=0;
		do
		{
			if (temp[i] % 2 != 0)
    27e4:	20 ff       	sbrs	r18, 0
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <sub_s_box+0x9e>
			{
				temp[i] -= 1;
    27e8:	21 50       	subi	r18, 0x01	; 1
				nb_1++; //calcul du nombre de '1' dans le code binaire de temp[i]
    27ea:	01 96       	adiw	r24, 0x01	; 1
			}

			temp[i] /= 2;
    27ec:	26 95       	lsr	r18
		} while (temp[i]>0);
    27ee:	d1 f7       	brne	.-12     	; 0x27e4 <sub_s_box+0x96>
    27f0:	11 92       	st	Z+, r1

		r[i] = nb_1 % 2;
    27f2:	81 70       	andi	r24, 0x01	; 1
    27f4:	90 70       	andi	r25, 0x00	; 0
    27f6:	8d 93       	st	X+, r24
	}

	for (i = 0; i < 8; i++) 
		temp[i] = s_box[i] & c; //ET bit a bit

	for (i = 0; i < 8; i++)
    27f8:	e4 17       	cp	r30, r20
    27fa:	f5 07       	cpc	r31, r21
    27fc:	81 f7       	brne	.-32     	; 0x27de <sub_s_box+0x90>

		r[i] = nb_1 % 2;
	}

	//generation du résultat de la multiplication matricielle
	return (r[0]*rcon(8) + r[1]*rcon(7) + r[2]*rcon(6) + r[3]*rcon(5) + r[4]*rcon(4) + r[5]*rcon(3) + r[6]*rcon(2) + r[7]*rcon(1));
    27fe:	39 89       	ldd	r19, Y+17	; 0x11
    2800:	21 e0       	ldi	r18, 0x01	; 1
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	90 e0       	ldi	r25, 0x00	; 0
{
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
		j = j*2;
    2806:	22 0f       	add	r18, r18
unsigned char rcon(int i)
{
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
    2808:	01 96       	adiw	r24, 0x01	; 1
    280a:	87 30       	cpi	r24, 0x07	; 7
    280c:	91 05       	cpc	r25, r1
    280e:	d9 f7       	brne	.-10     	; 0x2806 <sub_s_box+0xb8>
    2810:	8f 89       	ldd	r24, Y+23	; 0x17
    2812:	88 0f       	add	r24, r24
    2814:	98 8d       	ldd	r25, Y+24	; 0x18
    2816:	89 0f       	add	r24, r25
    2818:	9e 89       	ldd	r25, Y+22	; 0x16
    281a:	99 0f       	add	r25, r25
    281c:	99 0f       	add	r25, r25
    281e:	89 0f       	add	r24, r25
    2820:	9d 89       	ldd	r25, Y+21	; 0x15
    2822:	99 0f       	add	r25, r25
    2824:	99 0f       	add	r25, r25
    2826:	99 0f       	add	r25, r25
    2828:	89 0f       	add	r24, r25
    282a:	9c 89       	ldd	r25, Y+20	; 0x14
    282c:	92 95       	swap	r25
    282e:	90 7f       	andi	r25, 0xF0	; 240
    2830:	89 0f       	add	r24, r25
    2832:	9b 89       	ldd	r25, Y+19	; 0x13
    2834:	92 95       	swap	r25
    2836:	99 0f       	add	r25, r25
    2838:	90 7e       	andi	r25, 0xE0	; 224
    283a:	89 0f       	add	r24, r25
    283c:	9a 89       	ldd	r25, Y+18	; 0x12
    283e:	92 95       	swap	r25
    2840:	99 0f       	add	r25, r25
    2842:	99 0f       	add	r25, r25
    2844:	90 7c       	andi	r25, 0xC0	; 192
    2846:	89 0f       	add	r24, r25
    2848:	23 9f       	mul	r18, r19
    284a:	90 2d       	mov	r25, r0
    284c:	11 24       	eor	r1, r1
		r[i] = nb_1 % 2;
	}

	//generation du résultat de la multiplication matricielle
	return (r[0]*rcon(8) + r[1]*rcon(7) + r[2]*rcon(6) + r[3]*rcon(5) + r[4]*rcon(4) + r[5]*rcon(3) + r[6]*rcon(2) + r[7]*rcon(1));
}
    284e:	89 0f       	add	r24, r25
    2850:	68 96       	adiw	r28, 0x18	; 24
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <multi>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue la multiplication bijective des deux caractères passés en paramètre.
**************************************************************************************************************/
unsigned char multi(char a, char b)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	2c 97       	sbiw	r28, 0x0c	; 12
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	28 2f       	mov	r18, r24
	int bb[4] = {0,0,0,0}, p = 0, intemp;
    2878:	fe 01       	movw	r30, r28
    287a:	35 96       	adiw	r30, 0x05	; 5
    287c:	88 e0       	ldi	r24, 0x08	; 8
    287e:	df 01       	movw	r26, r30
    2880:	1d 92       	st	X+, r1
    2882:	8a 95       	dec	r24
    2884:	e9 f7       	brne	.-6      	; 0x2880 <multi+0x1e>
	do
	{
		if (temp[0] % 2 != 0) 
		{
			temp[0] -= 1;
			bb[p] = 1;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
	En fait, l'octet le plus élevé (si on le regarde comme une valeur décimale) 
	que l'on passe dans b est 14 (cf. fonction mix_column) */
	
	do
	{
		if (temp[0] % 2 != 0) 
    288a:	60 ff       	sbrs	r22, 0
    288c:	03 c0       	rjmp	.+6      	; 0x2894 <multi+0x32>
		{
			temp[0] -= 1;
    288e:	61 50       	subi	r22, 0x01	; 1
			bb[p] = 1;
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
		}

		p++;
		temp[0] /= 2;
    2894:	66 95       	lsr	r22
    2896:	32 96       	adiw	r30, 0x02	; 2
	} while (temp[0] > 0);
    2898:	66 23       	and	r22, r22
    289a:	b9 f7       	brne	.-18     	; 0x288a <multi+0x28>

	temp[0] = a;
    289c:	29 83       	std	Y+1, r18	; 0x01
	temp[1] = a;
    289e:	2a 83       	std	Y+2, r18	; 0x02
    28a0:	fe 01       	movw	r30, r28
    28a2:	32 96       	adiw	r30, 0x02	; 2
    28a4:	21 e0       	ldi	r18, 0x01	; 1
    28a6:	30 e0       	ldi	r19, 0x00	; 0

	/* on calcule les 4 multiples succéssifs de a */
	for(p = 1; p < 4; p++)	
	{
		intemp = temp[p] * 2;
		if (intemp > 255) temp[p] = (intemp - 256) ^ 27;
    28a8:	4b e1       	ldi	r20, 0x1B	; 27
	temp[1] = a;

	/* on calcule les 4 multiples succéssifs de a */
	for(p = 1; p < 4; p++)	
	{
		intemp = temp[p] * 2;
    28aa:	80 81       	ld	r24, Z
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
		if (intemp > 255) temp[p] = (intemp - 256) ^ 27;
    28b2:	8f 3f       	cpi	r24, 0xFF	; 255
    28b4:	91 05       	cpc	r25, r1
    28b6:	11 f0       	breq	.+4      	; 0x28bc <multi+0x5a>
    28b8:	0c f0       	brlt	.+2      	; 0x28bc <multi+0x5a>
    28ba:	84 27       	eor	r24, r20
		else temp[p] = intemp;
    28bc:	80 83       	st	Z, r24
		if (p < 3) temp[p + 1] = temp[p];
    28be:	23 30       	cpi	r18, 0x03	; 3
    28c0:	31 05       	cpc	r19, r1
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <multi+0x66>
    28c4:	80 81       	ld	r24, Z
    28c6:	81 83       	std	Z+1, r24	; 0x01

	temp[0] = a;
	temp[1] = a;

	/* on calcule les 4 multiples succéssifs de a */
	for(p = 1; p < 4; p++)	
    28c8:	2f 5f       	subi	r18, 0xFF	; 255
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	31 96       	adiw	r30, 0x01	; 1
    28ce:	24 30       	cpi	r18, 0x04	; 4
    28d0:	31 05       	cpc	r19, r1
    28d2:	59 f7       	brne	.-42     	; 0x28aa <multi+0x48>
	}

	/* on met à 0 les cases de temp correspondant aux 0 du code binaire de b */
	for(p = 0; p < 4; p++)
	{
		if (bb[p] == 0) temp[p] = 0;
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	89 2b       	or	r24, r25
    28da:	09 f4       	brne	.+2      	; 0x28de <multi+0x7c>
    28dc:	19 82       	std	Y+1, r1	; 0x01
    28de:	8f 81       	ldd	r24, Y+7	; 0x07
    28e0:	98 85       	ldd	r25, Y+8	; 0x08
    28e2:	89 2b       	or	r24, r25
    28e4:	09 f4       	brne	.+2      	; 0x28e8 <multi+0x86>
    28e6:	1a 82       	std	Y+2, r1	; 0x02
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	89 2b       	or	r24, r25
    28ee:	09 f4       	brne	.+2      	; 0x28f2 <multi+0x90>
    28f0:	1b 82       	std	Y+3, r1	; 0x03
    28f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    28f6:	89 2b       	or	r24, r25
    28f8:	09 f4       	brne	.+2      	; 0x28fc <multi+0x9a>
    28fa:	1c 82       	std	Y+4, r1	; 0x04
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	99 81       	ldd	r25, Y+1	; 0x01
    2900:	89 27       	eor	r24, r25
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	89 27       	eor	r24, r25
    2906:	9c 81       	ldd	r25, Y+4	; 0x04
	}
	
	/* on somme (OU EXCLUSIF) les cases de temp pour générer le résultat de la multiplication */
	return temp[0] ^ temp[1] ^ temp[2] ^ temp[3];
}
    2908:	89 27       	eor	r24, r25
    290a:	2c 96       	adiw	r28, 0x0c	; 12
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	08 95       	ret

0000291c <expand_key>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue l'expansion de la clé. 
**************************************************************************************************************/
int expand_key(unsigned char key[4*4], unsigned char w[4*4*11])
{
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	9c 01       	movw	r18, r24
    2926:	c0 e0       	ldi	r28, 0x00	; 0
    2928:	d0 e0       	ldi	r29, 0x00	; 0
	int i,j;
	unsigned char temp=0;

	for(i = 0; i < 16; i++)
		w[i] = key[i];
    292a:	fb 01       	movw	r30, r22
    292c:	ec 0f       	add	r30, r28
    292e:	fd 1f       	adc	r31, r29
    2930:	d9 01       	movw	r26, r18
    2932:	ac 0f       	add	r26, r28
    2934:	bd 1f       	adc	r27, r29
    2936:	8c 91       	ld	r24, X
    2938:	80 83       	st	Z, r24
int expand_key(unsigned char key[4*4], unsigned char w[4*4*11])
{
	int i,j;
	unsigned char temp=0;

	for(i = 0; i < 16; i++)
    293a:	21 96       	adiw	r28, 0x01	; 1
    293c:	c0 31       	cpi	r28, 0x10	; 16
    293e:	d1 05       	cpc	r29, r1
    2940:	a1 f7       	brne	.-24     	; 0x292a <expand_key+0xe>
    2942:	8b 01       	movw	r16, r22
    2944:	50 e0       	ldi	r21, 0x00	; 0
		w[i] = key[i];

	for(i = 16; i < 4*4*11; i++)
	{
		if (i % 16 < 4)
    2946:	ce 01       	movw	r24, r28
    2948:	8f 70       	andi	r24, 0x0F	; 15
    294a:	90 70       	andi	r25, 0x00	; 0
    294c:	04 97       	sbiw	r24, 0x04	; 4
    294e:	2c f5       	brge	.+74     	; 0x299a <expand_key+0x7e>
		{
			j = i % 4;
			if (j == 3) temp = w[i - 7];
    2950:	ce 01       	movw	r24, r28
    2952:	83 70       	andi	r24, 0x03	; 3
    2954:	90 70       	andi	r25, 0x00	; 0
    2956:	03 97       	sbiw	r24, 0x03	; 3
    2958:	19 f4       	brne	.+6      	; 0x2960 <expand_key+0x44>
    295a:	f8 01       	movw	r30, r16
    295c:	81 85       	ldd	r24, Z+9	; 0x09
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <expand_key+0x48>
			else temp = w[i - 3];
    2960:	f8 01       	movw	r30, r16
    2962:	85 85       	ldd	r24, Z+13	; 0x0d
			temp = sub_s_box(temp, 'c');
    2964:	63 e6       	ldi	r22, 0x63	; 99
    2966:	0e 94 a7 13 	call	0x274e	; 0x274e <sub_s_box>
    296a:	58 2f       	mov	r21, r24
			if (i % 16 == 0) temp = temp ^ rcon(i/16);
    296c:	ce 01       	movw	r24, r28
    296e:	8f 70       	andi	r24, 0x0F	; 15
    2970:	90 70       	andi	r25, 0x00	; 0
    2972:	89 2b       	or	r24, r25
    2974:	91 f4       	brne	.+36     	; 0x299a <expand_key+0x7e>
    2976:	9e 01       	movw	r18, r28
    2978:	64 e0       	ldi	r22, 0x04	; 4
    297a:	35 95       	asr	r19
    297c:	27 95       	ror	r18
    297e:	6a 95       	dec	r22
    2980:	e1 f7       	brne	.-8      	; 0x297a <expand_key+0x5e>
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
unsigned char rcon(int i)
{
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
    2988:	21 50       	subi	r18, 0x01	; 1
    298a:	30 40       	sbci	r19, 0x00	; 0
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <expand_key+0x76>
		j = j*2;
    298e:	44 0f       	add	r20, r20
unsigned char rcon(int i)
{
	int p;
	unsigned char j=1;

	for (p = 0; p < i - 1; p++)
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	82 17       	cp	r24, r18
    2994:	93 07       	cpc	r25, r19
    2996:	dc f3       	brlt	.-10     	; 0x298e <expand_key+0x72>
		{
			j = i % 4;
			if (j == 3) temp = w[i - 7];
			else temp = w[i - 3];
			temp = sub_s_box(temp, 'c');
			if (i % 16 == 0) temp = temp ^ rcon(i/16);
    2998:	54 27       	eor	r21, r20
		}
		w[i] = w[i - 16] ^ temp;
    299a:	f8 01       	movw	r30, r16
    299c:	80 81       	ld	r24, Z
    299e:	85 27       	eor	r24, r21
    29a0:	80 8b       	std	Z+16, r24	; 0x10
	unsigned char temp=0;

	for(i = 0; i < 16; i++)
		w[i] = key[i];

	for(i = 16; i < 4*4*11; i++)
    29a2:	21 96       	adiw	r28, 0x01	; 1
    29a4:	0f 5f       	subi	r16, 0xFF	; 255
    29a6:	1f 4f       	sbci	r17, 0xFF	; 255
    29a8:	c0 3b       	cpi	r28, 0xB0	; 176
    29aa:	d1 05       	cpc	r29, r1
    29ac:	61 f6       	brne	.-104    	; 0x2946 <expand_key+0x2a>
		}
		w[i] = w[i - 16] ^ temp;
	}

	return 0;
}
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	df 91       	pop	r29
    29b4:	cf 91       	pop	r28
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <select_key>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Applique simplement une partie de la expanded_key (du tableau du meme nom) a un round.
**************************************************************************************************************/
int select_key(unsigned char expanded_key[4*4*11], unsigned char round_key[4][4], int round)
{
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	e4 e0       	ldi	r30, 0x04	; 4
    29c2:	44 0f       	add	r20, r20
    29c4:	55 1f       	adc	r21, r21
    29c6:	ea 95       	dec	r30
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <select_key+0x6>
    29ca:	48 0f       	add	r20, r24
    29cc:	59 1f       	adc	r21, r25
    29ce:	a0 e0       	ldi	r26, 0x00	; 0
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	0e c0       	rjmp	.+28     	; 0x29f0 <select_key+0x34>

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
		{
			round_key[j][i] = expanded_key[(round * 16) + (4 * i) + j];
    29d4:	89 91       	ld	r24, Y+
    29d6:	80 83       	st	Z, r24
{
	int i,j;

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
    29d8:	2f 5f       	subi	r18, 0xFF	; 255
    29da:	3f 4f       	sbci	r19, 0xFF	; 255
    29dc:	34 96       	adiw	r30, 0x04	; 4
    29de:	24 30       	cpi	r18, 0x04	; 4
    29e0:	31 05       	cpc	r19, r1
    29e2:	c1 f7       	brne	.-16     	; 0x29d4 <select_key+0x18>
**************************************************************************************************************/
int select_key(unsigned char expanded_key[4*4*11], unsigned char round_key[4][4], int round)
{
	int i,j;

	for(i = 0; i < 4; i++)
    29e4:	11 96       	adiw	r26, 0x01	; 1
    29e6:	4c 5f       	subi	r20, 0xFC	; 252
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	a4 30       	cpi	r26, 0x04	; 4
    29ec:	b1 05       	cpc	r27, r1
    29ee:	39 f0       	breq	.+14     	; 0x29fe <select_key+0x42>
    29f0:	fb 01       	movw	r30, r22
    29f2:	ea 0f       	add	r30, r26
    29f4:	fb 1f       	adc	r31, r27
    29f6:	ea 01       	movw	r28, r20
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	eb cf       	rjmp	.-42     	; 0x29d4 <select_key+0x18>
			round_key[j][i] = expanded_key[(round * 16) + (4 * i) + j];
		}
	}

	return 0;
}
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <byte_sub>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue l'opération byte_sub.
**************************************************************************************************************/
int byte_sub(unsigned char state[4][4], unsigned char cmd)
{
    2a08:	8f 92       	push	r8
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	bf 92       	push	r11
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	96 2e       	mov	r9, r22
    2a22:	6c 01       	movw	r12, r24
    2a24:	aa 24       	eor	r10, r10
    2a26:	bb 24       	eor	r11, r11

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if(cmd == 'd') state[i][j] ^= 198; //ajout du vecteur constant (décryptage)
    2a28:	f6 ec       	ldi	r31, 0xC6	; 198
    2a2a:	8f 2e       	mov	r8, r31
    2a2c:	26 c0       	rjmp	.+76     	; 0x2a7a <byte_sub+0x72>
    2a2e:	84 e6       	ldi	r24, 0x64	; 100
    2a30:	98 16       	cp	r9, r24
    2a32:	21 f4       	brne	.+8      	; 0x2a3c <byte_sub+0x34>
    2a34:	f8 01       	movw	r30, r16
    2a36:	80 81       	ld	r24, Z
    2a38:	88 25       	eor	r24, r8
    2a3a:	80 83       	st	Z, r24
			state[i][j] = sub_s_box(state[i][j], cmd);
    2a3c:	88 81       	ld	r24, Y
    2a3e:	69 2d       	mov	r22, r9
    2a40:	0e 94 a7 13 	call	0x274e	; 0x274e <sub_s_box>
    2a44:	88 83       	st	Y, r24
			if(cmd == 'c') state[i][j] ^= 198; //ajout du vecteur constant (cryptage)
    2a46:	f3 e6       	ldi	r31, 0x63	; 99
    2a48:	9f 16       	cp	r9, r31
    2a4a:	11 f4       	brne	.+4      	; 0x2a50 <byte_sub+0x48>
    2a4c:	88 25       	eor	r24, r8
    2a4e:	88 83       	st	Y, r24
{
	int i,j;

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
    2a50:	08 94       	sec
    2a52:	e1 1c       	adc	r14, r1
    2a54:	f1 1c       	adc	r15, r1
    2a56:	21 96       	adiw	r28, 0x01	; 1
    2a58:	0f 5f       	subi	r16, 0xFF	; 255
    2a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5c:	84 e0       	ldi	r24, 0x04	; 4
    2a5e:	e8 16       	cp	r14, r24
    2a60:	f1 04       	cpc	r15, r1
    2a62:	29 f7       	brne	.-54     	; 0x2a2e <byte_sub+0x26>
**************************************************************************************************************/
int byte_sub(unsigned char state[4][4], unsigned char cmd)
{
	int i,j;

	for (i = 0; i < 4; i++)
    2a64:	08 94       	sec
    2a66:	a1 1c       	adc	r10, r1
    2a68:	b1 1c       	adc	r11, r1
    2a6a:	e4 e0       	ldi	r30, 0x04	; 4
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	ce 0e       	add	r12, r30
    2a70:	df 1e       	adc	r13, r31
    2a72:	f4 e0       	ldi	r31, 0x04	; 4
    2a74:	af 16       	cp	r10, r31
    2a76:	b1 04       	cpc	r11, r1
    2a78:	29 f0       	breq	.+10     	; 0x2a84 <byte_sub+0x7c>
    2a7a:	e6 01       	movw	r28, r12
    2a7c:	86 01       	movw	r16, r12
    2a7e:	ee 24       	eor	r14, r14
    2a80:	ff 24       	eor	r15, r15
    2a82:	d5 cf       	rjmp	.-86     	; 0x2a2e <byte_sub+0x26>
			if(cmd == 'c') state[i][j] ^= 198; //ajout du vecteur constant (cryptage)
		}
	}

	return 0;
}
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
    2a9c:	9f 90       	pop	r9
    2a9e:	8f 90       	pop	r8
    2aa0:	08 95       	ret

00002aa2 <shift_row>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue l'opération shift_row.
**************************************************************************************************************/
int shift_row(unsigned char state[4][4], unsigned char cmd)
{
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	34 96       	adiw	r30, 0x04	; 4
    2aac:	ec 01       	movw	r28, r24
    2aae:	28 96       	adiw	r28, 0x08	; 8
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	24 5f       	subi	r18, 0xF4	; 244
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned char temp;

	if (cmd == 'c') //cryptage
    2ab6:	63 36       	cpi	r22, 0x63	; 99
    2ab8:	29 f5       	brne	.+74     	; 0x2b04 <shift_row+0x62>
	{
		temp = state[1][0];
    2aba:	14 96       	adiw	r26, 0x04	; 4
    2abc:	9c 91       	ld	r25, X
    2abe:	14 97       	sbiw	r26, 0x04	; 4
		state[1][0] = state[1][1];
    2ac0:	81 81       	ldd	r24, Z+1	; 0x01
    2ac2:	14 96       	adiw	r26, 0x04	; 4
    2ac4:	8c 93       	st	X, r24
    2ac6:	14 97       	sbiw	r26, 0x04	; 4
		state[1][1] = state[1][2];
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	81 83       	std	Z+1, r24	; 0x01
		state[1][2] = state[1][3];
    2acc:	83 81       	ldd	r24, Z+3	; 0x03
    2ace:	82 83       	std	Z+2, r24	; 0x02
		state[1][3] = temp;
    2ad0:	93 83       	std	Z+3, r25	; 0x03

		temp = state[2][0];
    2ad2:	18 96       	adiw	r26, 0x08	; 8
    2ad4:	9c 91       	ld	r25, X
    2ad6:	18 97       	sbiw	r26, 0x08	; 8
		state[2][0] = state[2][2];
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	18 96       	adiw	r26, 0x08	; 8
    2adc:	8c 93       	st	X, r24
    2ade:	18 97       	sbiw	r26, 0x08	; 8
		state[2][2] = temp;
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
		temp = state[2][1];
    2ae2:	99 81       	ldd	r25, Y+1	; 0x01
		state[2][1] = state[2][3];
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	89 83       	std	Y+1, r24	; 0x01
		state[2][3] = temp;
    2ae8:	9b 83       	std	Y+3, r25	; 0x03

		temp = state[3][3];
    2aea:	f9 01       	movw	r30, r18
    2aec:	93 81       	ldd	r25, Z+3	; 0x03
		state[3][3] = state[3][2];
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	83 83       	std	Z+3, r24	; 0x03
		state[3][2] = state[3][1];
    2af2:	81 81       	ldd	r24, Z+1	; 0x01
    2af4:	82 83       	std	Z+2, r24	; 0x02
		state[3][1] = state[3][0];
    2af6:	1c 96       	adiw	r26, 0x0c	; 12
    2af8:	8c 91       	ld	r24, X
    2afa:	1c 97       	sbiw	r26, 0x0c	; 12
    2afc:	81 83       	std	Z+1, r24	; 0x01
		state[3][0] = temp;
    2afe:	1c 96       	adiw	r26, 0x0c	; 12
    2b00:	9c 93       	st	X, r25
    2b02:	24 c0       	rjmp	.+72     	; 0x2b4c <shift_row+0xaa>
	}
		
	else //décryptage
	{
		temp = state[1][3];
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
		state[1][3] = state[1][2];
    2b06:	82 81       	ldd	r24, Z+2	; 0x02
    2b08:	83 83       	std	Z+3, r24	; 0x03
		state[1][2] = state[1][1];
    2b0a:	81 81       	ldd	r24, Z+1	; 0x01
    2b0c:	82 83       	std	Z+2, r24	; 0x02
		state[1][1] = state[1][0];
    2b0e:	14 96       	adiw	r26, 0x04	; 4
    2b10:	8c 91       	ld	r24, X
    2b12:	14 97       	sbiw	r26, 0x04	; 4
    2b14:	81 83       	std	Z+1, r24	; 0x01
		state[1][0] = temp;
    2b16:	14 96       	adiw	r26, 0x04	; 4
    2b18:	9c 93       	st	X, r25
    2b1a:	14 97       	sbiw	r26, 0x04	; 4

		temp = state[2][0];
    2b1c:	18 96       	adiw	r26, 0x08	; 8
    2b1e:	9c 91       	ld	r25, X
    2b20:	18 97       	sbiw	r26, 0x08	; 8
		state[2][0] = state[2][2];
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	18 96       	adiw	r26, 0x08	; 8
    2b26:	8c 93       	st	X, r24
    2b28:	18 97       	sbiw	r26, 0x08	; 8
		state[2][2] = temp;
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
		temp = state[2][1];
    2b2c:	99 81       	ldd	r25, Y+1	; 0x01
		state[2][1] = state[2][3];
    2b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b30:	89 83       	std	Y+1, r24	; 0x01
		state[2][3] = temp;
    2b32:	9b 83       	std	Y+3, r25	; 0x03

		temp = state[3][0];
    2b34:	1c 96       	adiw	r26, 0x0c	; 12
    2b36:	9c 91       	ld	r25, X
    2b38:	1c 97       	sbiw	r26, 0x0c	; 12
		state[3][0] = state[3][1];
    2b3a:	f9 01       	movw	r30, r18
    2b3c:	81 81       	ldd	r24, Z+1	; 0x01
    2b3e:	1c 96       	adiw	r26, 0x0c	; 12
    2b40:	8c 93       	st	X, r24
		state[3][1] = state[3][2];
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	81 83       	std	Z+1, r24	; 0x01
		state[3][2] = state[3][3];
    2b46:	83 81       	ldd	r24, Z+3	; 0x03
    2b48:	82 83       	std	Z+2, r24	; 0x02
		state[3][3] = temp;
    2b4a:	93 83       	std	Z+3, r25	; 0x03
	}

	return 0;
}
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	08 95       	ret

00002b56 <mix_column>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue l'opération mix_column.
**************************************************************************************************************/
int mix_column(unsigned char state[4][4], unsigned char cmd)
{
    2b56:	2f 92       	push	r2
    2b58:	3f 92       	push	r3
    2b5a:	4f 92       	push	r4
    2b5c:	5f 92       	push	r5
    2b5e:	6f 92       	push	r6
    2b60:	7f 92       	push	r7
    2b62:	8f 92       	push	r8
    2b64:	9f 92       	push	r9
    2b66:	bf 92       	push	r11
    2b68:	cf 92       	push	r12
    2b6a:	df 92       	push	r13
    2b6c:	ef 92       	push	r14
    2b6e:	ff 92       	push	r15
    2b70:	0f 93       	push	r16
    2b72:	1f 93       	push	r17
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
    2b7c:	60 97       	sbiw	r28, 0x10	; 16
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	4c 01       	movw	r8, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	31 96       	adiw	r30, 0x01	; 1
    2b8e:	dc 01       	movw	r26, r24
	int i,j;
	unsigned char temp[4][4];

	for (i = 0; i < 4; i++)
    2b90:	9e 01       	movw	r18, r28
    2b92:	2f 5e       	subi	r18, 0xEF	; 239
    2b94:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		for (j = 0; j < 4; j++) temp[i][j] = state[i][j];
    2b96:	8c 91       	ld	r24, X
    2b98:	80 83       	st	Z, r24
    2b9a:	11 96       	adiw	r26, 0x01	; 1
    2b9c:	8c 91       	ld	r24, X
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	81 83       	std	Z+1, r24	; 0x01
    2ba2:	12 96       	adiw	r26, 0x02	; 2
    2ba4:	8c 91       	ld	r24, X
    2ba6:	12 97       	sbiw	r26, 0x02	; 2
    2ba8:	82 83       	std	Z+2, r24	; 0x02
    2baa:	13 96       	adiw	r26, 0x03	; 3
    2bac:	8c 91       	ld	r24, X
    2bae:	13 97       	sbiw	r26, 0x03	; 3
    2bb0:	83 83       	std	Z+3, r24	; 0x03
    2bb2:	34 96       	adiw	r30, 0x04	; 4
    2bb4:	14 96       	adiw	r26, 0x04	; 4
int mix_column(unsigned char state[4][4], unsigned char cmd)
{
	int i,j;
	unsigned char temp[4][4];

	for (i = 0; i < 4; i++)
    2bb6:	e2 17       	cp	r30, r18
    2bb8:	f3 07       	cpc	r31, r19
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <mix_column+0x40>
    2bbc:	b9 80       	ldd	r11, Y+1	; 0x01
    2bbe:	14 e0       	ldi	r17, 0x04	; 4
    2bc0:	61 2e       	mov	r6, r17
    2bc2:	71 2c       	mov	r7, r1
    2bc4:	68 0c       	add	r6, r8
    2bc6:	79 1c       	adc	r7, r9
    2bc8:	b8 e0       	ldi	r27, 0x08	; 8
    2bca:	4b 2e       	mov	r4, r27
    2bcc:	51 2c       	mov	r5, r1
    2bce:	48 0c       	add	r4, r8
    2bd0:	59 1c       	adc	r5, r9
    2bd2:	ac e0       	ldi	r26, 0x0C	; 12
    2bd4:	2a 2e       	mov	r2, r26
    2bd6:	31 2c       	mov	r3, r1
    2bd8:	28 0c       	add	r2, r8
    2bda:	39 1c       	adc	r3, r9
	{
		for (j = 0; j < 4; j++) temp[i][j] = state[i][j];
	}

	if (cmd == 'c') //cryptage
    2bdc:	63 36       	cpi	r22, 0x63	; 99
    2bde:	09 f0       	breq	.+2      	; 0x2be2 <mix_column+0x8c>
    2be0:	89 c1       	rjmp	.+786    	; 0x2ef4 <mix_column+0x39e>
	{
		state[0][0] = multi(temp[0][0],2) ^ multi(temp[1][0],3) ^ multi(temp[2][0],1) ^ multi(temp[3][0],1);
    2be2:	8b 2d       	mov	r24, r11
    2be4:	62 e0       	ldi	r22, 0x02	; 2
    2be6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2bea:	c8 2e       	mov	r12, r24
    2bec:	dd 80       	ldd	r13, Y+5	; 0x05
    2bee:	8d 2d       	mov	r24, r13
    2bf0:	63 e0       	ldi	r22, 0x03	; 3
    2bf2:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2bf6:	18 2f       	mov	r17, r24
    2bf8:	e9 84       	ldd	r14, Y+9	; 0x09
    2bfa:	8e 2d       	mov	r24, r14
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c02:	08 2f       	mov	r16, r24
    2c04:	fd 84       	ldd	r15, Y+13	; 0x0d
    2c06:	8f 2d       	mov	r24, r15
    2c08:	61 e0       	ldi	r22, 0x01	; 1
    2c0a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c0e:	1c 25       	eor	r17, r12
    2c10:	10 27       	eor	r17, r16
    2c12:	18 27       	eor	r17, r24
    2c14:	f4 01       	movw	r30, r8
    2c16:	10 83       	st	Z, r17
		state[1][0] = multi(temp[0][0],1) ^ multi(temp[1][0],2) ^ multi(temp[2][0],3) ^ multi(temp[3][0],1);
    2c18:	8b 2d       	mov	r24, r11
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c20:	c8 2e       	mov	r12, r24
    2c22:	8d 2d       	mov	r24, r13
    2c24:	62 e0       	ldi	r22, 0x02	; 2
    2c26:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c2a:	18 2f       	mov	r17, r24
    2c2c:	8e 2d       	mov	r24, r14
    2c2e:	63 e0       	ldi	r22, 0x03	; 3
    2c30:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c34:	08 2f       	mov	r16, r24
    2c36:	8f 2d       	mov	r24, r15
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c3e:	1c 25       	eor	r17, r12
    2c40:	10 27       	eor	r17, r16
    2c42:	18 27       	eor	r17, r24
    2c44:	f4 01       	movw	r30, r8
    2c46:	14 83       	std	Z+4, r17	; 0x04
		state[2][0] = multi(temp[0][0],1) ^ multi(temp[1][0],1) ^ multi(temp[2][0],2) ^ multi(temp[3][0],3);
    2c48:	8b 2d       	mov	r24, r11
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c50:	c8 2e       	mov	r12, r24
    2c52:	8d 2d       	mov	r24, r13
    2c54:	61 e0       	ldi	r22, 0x01	; 1
    2c56:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c5a:	18 2f       	mov	r17, r24
    2c5c:	8e 2d       	mov	r24, r14
    2c5e:	62 e0       	ldi	r22, 0x02	; 2
    2c60:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c64:	08 2f       	mov	r16, r24
    2c66:	8f 2d       	mov	r24, r15
    2c68:	63 e0       	ldi	r22, 0x03	; 3
    2c6a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c6e:	1c 25       	eor	r17, r12
    2c70:	10 27       	eor	r17, r16
    2c72:	18 27       	eor	r17, r24
    2c74:	f4 01       	movw	r30, r8
    2c76:	10 87       	std	Z+8, r17	; 0x08
		state[3][0] = multi(temp[0][0],3) ^ multi(temp[1][0],1) ^ multi(temp[2][0],1) ^ multi(temp[3][0],2);
    2c78:	8b 2d       	mov	r24, r11
    2c7a:	63 e0       	ldi	r22, 0x03	; 3
    2c7c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c80:	c8 2e       	mov	r12, r24
    2c82:	8d 2d       	mov	r24, r13
    2c84:	61 e0       	ldi	r22, 0x01	; 1
    2c86:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c8a:	18 2f       	mov	r17, r24
    2c8c:	8e 2d       	mov	r24, r14
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c94:	08 2f       	mov	r16, r24
    2c96:	8f 2d       	mov	r24, r15
    2c98:	62 e0       	ldi	r22, 0x02	; 2
    2c9a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2c9e:	1c 25       	eor	r17, r12
    2ca0:	10 27       	eor	r17, r16
    2ca2:	18 27       	eor	r17, r24
    2ca4:	f4 01       	movw	r30, r8
    2ca6:	14 87       	std	Z+12, r17	; 0x0c

		state[0][1] = multi(temp[0][1],2) ^ multi(temp[1][1],3) ^ multi(temp[2][1],1) ^ multi(temp[3][1],1);
    2ca8:	ba 80       	ldd	r11, Y+2	; 0x02
    2caa:	8b 2d       	mov	r24, r11
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cb2:	c8 2e       	mov	r12, r24
    2cb4:	de 80       	ldd	r13, Y+6	; 0x06
    2cb6:	8d 2d       	mov	r24, r13
    2cb8:	63 e0       	ldi	r22, 0x03	; 3
    2cba:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cbe:	18 2f       	mov	r17, r24
    2cc0:	ea 84       	ldd	r14, Y+10	; 0x0a
    2cc2:	8e 2d       	mov	r24, r14
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cca:	08 2f       	mov	r16, r24
    2ccc:	fe 84       	ldd	r15, Y+14	; 0x0e
    2cce:	8f 2d       	mov	r24, r15
    2cd0:	61 e0       	ldi	r22, 0x01	; 1
    2cd2:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cd6:	1c 25       	eor	r17, r12
    2cd8:	10 27       	eor	r17, r16
    2cda:	18 27       	eor	r17, r24
    2cdc:	f4 01       	movw	r30, r8
    2cde:	11 83       	std	Z+1, r17	; 0x01
		state[1][1] = multi(temp[0][1],1) ^ multi(temp[1][1],2) ^ multi(temp[2][1],3) ^ multi(temp[3][1],1);
    2ce0:	8b 2d       	mov	r24, r11
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ce8:	c8 2e       	mov	r12, r24
    2cea:	8d 2d       	mov	r24, r13
    2cec:	62 e0       	ldi	r22, 0x02	; 2
    2cee:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cf2:	18 2f       	mov	r17, r24
    2cf4:	8e 2d       	mov	r24, r14
    2cf6:	63 e0       	ldi	r22, 0x03	; 3
    2cf8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2cfc:	08 2f       	mov	r16, r24
    2cfe:	8f 2d       	mov	r24, r15
    2d00:	61 e0       	ldi	r22, 0x01	; 1
    2d02:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d06:	1c 25       	eor	r17, r12
    2d08:	10 27       	eor	r17, r16
    2d0a:	18 27       	eor	r17, r24
    2d0c:	f3 01       	movw	r30, r6
    2d0e:	11 83       	std	Z+1, r17	; 0x01
		state[2][1] = multi(temp[0][1],1) ^ multi(temp[1][1],1) ^ multi(temp[2][1],2) ^ multi(temp[3][1],3);
    2d10:	8b 2d       	mov	r24, r11
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d18:	c8 2e       	mov	r12, r24
    2d1a:	8d 2d       	mov	r24, r13
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d22:	18 2f       	mov	r17, r24
    2d24:	8e 2d       	mov	r24, r14
    2d26:	62 e0       	ldi	r22, 0x02	; 2
    2d28:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d2c:	08 2f       	mov	r16, r24
    2d2e:	8f 2d       	mov	r24, r15
    2d30:	63 e0       	ldi	r22, 0x03	; 3
    2d32:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d36:	1c 25       	eor	r17, r12
    2d38:	10 27       	eor	r17, r16
    2d3a:	18 27       	eor	r17, r24
    2d3c:	f2 01       	movw	r30, r4
    2d3e:	11 83       	std	Z+1, r17	; 0x01
		state[3][1] = multi(temp[0][1],3) ^ multi(temp[1][1],1) ^ multi(temp[2][1],1) ^ multi(temp[3][1],2);
    2d40:	8b 2d       	mov	r24, r11
    2d42:	63 e0       	ldi	r22, 0x03	; 3
    2d44:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d48:	c8 2e       	mov	r12, r24
    2d4a:	8d 2d       	mov	r24, r13
    2d4c:	61 e0       	ldi	r22, 0x01	; 1
    2d4e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d52:	18 2f       	mov	r17, r24
    2d54:	8e 2d       	mov	r24, r14
    2d56:	61 e0       	ldi	r22, 0x01	; 1
    2d58:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d5c:	08 2f       	mov	r16, r24
    2d5e:	8f 2d       	mov	r24, r15
    2d60:	62 e0       	ldi	r22, 0x02	; 2
    2d62:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d66:	1c 25       	eor	r17, r12
    2d68:	10 27       	eor	r17, r16
    2d6a:	18 27       	eor	r17, r24
    2d6c:	f1 01       	movw	r30, r2
    2d6e:	11 83       	std	Z+1, r17	; 0x01

		state[0][2] = multi(temp[0][2],2) ^ multi(temp[1][2],3) ^ multi(temp[2][2],1) ^ multi(temp[3][2],1);
    2d70:	bb 80       	ldd	r11, Y+3	; 0x03
    2d72:	8b 2d       	mov	r24, r11
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d7a:	c8 2e       	mov	r12, r24
    2d7c:	df 80       	ldd	r13, Y+7	; 0x07
    2d7e:	8d 2d       	mov	r24, r13
    2d80:	63 e0       	ldi	r22, 0x03	; 3
    2d82:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d86:	18 2f       	mov	r17, r24
    2d88:	eb 84       	ldd	r14, Y+11	; 0x0b
    2d8a:	8e 2d       	mov	r24, r14
    2d8c:	61 e0       	ldi	r22, 0x01	; 1
    2d8e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d92:	08 2f       	mov	r16, r24
    2d94:	ff 84       	ldd	r15, Y+15	; 0x0f
    2d96:	8f 2d       	mov	r24, r15
    2d98:	61 e0       	ldi	r22, 0x01	; 1
    2d9a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2d9e:	1c 25       	eor	r17, r12
    2da0:	10 27       	eor	r17, r16
    2da2:	18 27       	eor	r17, r24
    2da4:	f4 01       	movw	r30, r8
    2da6:	12 83       	std	Z+2, r17	; 0x02
		state[1][2] = multi(temp[0][2],1) ^ multi(temp[1][2],2) ^ multi(temp[2][2],3) ^ multi(temp[3][2],1);
    2da8:	8b 2d       	mov	r24, r11
    2daa:	61 e0       	ldi	r22, 0x01	; 1
    2dac:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2db0:	c8 2e       	mov	r12, r24
    2db2:	8d 2d       	mov	r24, r13
    2db4:	62 e0       	ldi	r22, 0x02	; 2
    2db6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2dba:	18 2f       	mov	r17, r24
    2dbc:	8e 2d       	mov	r24, r14
    2dbe:	63 e0       	ldi	r22, 0x03	; 3
    2dc0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2dc4:	08 2f       	mov	r16, r24
    2dc6:	8f 2d       	mov	r24, r15
    2dc8:	61 e0       	ldi	r22, 0x01	; 1
    2dca:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2dce:	1c 25       	eor	r17, r12
    2dd0:	10 27       	eor	r17, r16
    2dd2:	18 27       	eor	r17, r24
    2dd4:	f3 01       	movw	r30, r6
    2dd6:	12 83       	std	Z+2, r17	; 0x02
		state[2][2] = multi(temp[0][2],1) ^ multi(temp[1][2],1) ^ multi(temp[2][2],2) ^ multi(temp[3][2],3);
    2dd8:	8b 2d       	mov	r24, r11
    2dda:	61 e0       	ldi	r22, 0x01	; 1
    2ddc:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2de0:	c8 2e       	mov	r12, r24
    2de2:	8d 2d       	mov	r24, r13
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2dea:	18 2f       	mov	r17, r24
    2dec:	8e 2d       	mov	r24, r14
    2dee:	62 e0       	ldi	r22, 0x02	; 2
    2df0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2df4:	08 2f       	mov	r16, r24
    2df6:	8f 2d       	mov	r24, r15
    2df8:	63 e0       	ldi	r22, 0x03	; 3
    2dfa:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2dfe:	1c 25       	eor	r17, r12
    2e00:	10 27       	eor	r17, r16
    2e02:	18 27       	eor	r17, r24
    2e04:	f2 01       	movw	r30, r4
    2e06:	12 83       	std	Z+2, r17	; 0x02
		state[3][2] = multi(temp[0][2],3) ^ multi(temp[1][2],1) ^ multi(temp[2][2],1) ^ multi(temp[3][2],2);
    2e08:	8b 2d       	mov	r24, r11
    2e0a:	63 e0       	ldi	r22, 0x03	; 3
    2e0c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e10:	c8 2e       	mov	r12, r24
    2e12:	8d 2d       	mov	r24, r13
    2e14:	61 e0       	ldi	r22, 0x01	; 1
    2e16:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e1a:	18 2f       	mov	r17, r24
    2e1c:	8e 2d       	mov	r24, r14
    2e1e:	61 e0       	ldi	r22, 0x01	; 1
    2e20:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e24:	08 2f       	mov	r16, r24
    2e26:	8f 2d       	mov	r24, r15
    2e28:	62 e0       	ldi	r22, 0x02	; 2
    2e2a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e2e:	1c 25       	eor	r17, r12
    2e30:	10 27       	eor	r17, r16
    2e32:	18 27       	eor	r17, r24
    2e34:	f1 01       	movw	r30, r2
    2e36:	12 83       	std	Z+2, r17	; 0x02

		state[0][3] = multi(temp[0][3],2) ^ multi(temp[1][3],3) ^ multi(temp[2][3],1) ^ multi(temp[3][3],1);
    2e38:	bc 80       	ldd	r11, Y+4	; 0x04
    2e3a:	8b 2d       	mov	r24, r11
    2e3c:	62 e0       	ldi	r22, 0x02	; 2
    2e3e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e42:	c8 2e       	mov	r12, r24
    2e44:	d8 84       	ldd	r13, Y+8	; 0x08
    2e46:	8d 2d       	mov	r24, r13
    2e48:	63 e0       	ldi	r22, 0x03	; 3
    2e4a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e4e:	18 2f       	mov	r17, r24
    2e50:	ec 84       	ldd	r14, Y+12	; 0x0c
    2e52:	8e 2d       	mov	r24, r14
    2e54:	61 e0       	ldi	r22, 0x01	; 1
    2e56:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e5a:	08 2f       	mov	r16, r24
    2e5c:	f8 88       	ldd	r15, Y+16	; 0x10
    2e5e:	8f 2d       	mov	r24, r15
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e66:	1c 25       	eor	r17, r12
    2e68:	10 27       	eor	r17, r16
    2e6a:	18 27       	eor	r17, r24
    2e6c:	f4 01       	movw	r30, r8
    2e6e:	13 83       	std	Z+3, r17	; 0x03
		state[1][3] = multi(temp[0][3],1) ^ multi(temp[1][3],2) ^ multi(temp[2][3],3) ^ multi(temp[3][3],1);
    2e70:	8b 2d       	mov	r24, r11
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e78:	c8 2e       	mov	r12, r24
    2e7a:	8d 2d       	mov	r24, r13
    2e7c:	62 e0       	ldi	r22, 0x02	; 2
    2e7e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e82:	18 2f       	mov	r17, r24
    2e84:	8e 2d       	mov	r24, r14
    2e86:	63 e0       	ldi	r22, 0x03	; 3
    2e88:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e8c:	08 2f       	mov	r16, r24
    2e8e:	8f 2d       	mov	r24, r15
    2e90:	61 e0       	ldi	r22, 0x01	; 1
    2e92:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2e96:	1c 25       	eor	r17, r12
    2e98:	10 27       	eor	r17, r16
    2e9a:	18 27       	eor	r17, r24
    2e9c:	f3 01       	movw	r30, r6
    2e9e:	13 83       	std	Z+3, r17	; 0x03
		state[2][3] = multi(temp[0][3],1) ^ multi(temp[1][3],1) ^ multi(temp[2][3],2) ^ multi(temp[3][3],3);
    2ea0:	8b 2d       	mov	r24, r11
    2ea2:	61 e0       	ldi	r22, 0x01	; 1
    2ea4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ea8:	c8 2e       	mov	r12, r24
    2eaa:	8d 2d       	mov	r24, r13
    2eac:	61 e0       	ldi	r22, 0x01	; 1
    2eae:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2eb2:	18 2f       	mov	r17, r24
    2eb4:	8e 2d       	mov	r24, r14
    2eb6:	62 e0       	ldi	r22, 0x02	; 2
    2eb8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ebc:	08 2f       	mov	r16, r24
    2ebe:	8f 2d       	mov	r24, r15
    2ec0:	63 e0       	ldi	r22, 0x03	; 3
    2ec2:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ec6:	1c 25       	eor	r17, r12
    2ec8:	10 27       	eor	r17, r16
    2eca:	18 27       	eor	r17, r24
    2ecc:	f2 01       	movw	r30, r4
    2ece:	13 83       	std	Z+3, r17	; 0x03
		state[3][3] = multi(temp[0][3],3) ^ multi(temp[1][3],1) ^ multi(temp[2][3],1) ^ multi(temp[3][3],2);
    2ed0:	8b 2d       	mov	r24, r11
    2ed2:	63 e0       	ldi	r22, 0x03	; 3
    2ed4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ed8:	c8 2e       	mov	r12, r24
    2eda:	8d 2d       	mov	r24, r13
    2edc:	61 e0       	ldi	r22, 0x01	; 1
    2ede:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ee2:	18 2f       	mov	r17, r24
    2ee4:	8e 2d       	mov	r24, r14
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2eec:	08 2f       	mov	r16, r24
    2eee:	8f 2d       	mov	r24, r15
    2ef0:	62 e0       	ldi	r22, 0x02	; 2
    2ef2:	88 c1       	rjmp	.+784    	; 0x3204 <mix_column+0x6ae>
	}
		
	else //décryptage
	{
		state[0][0] = multi(temp[0][0],14) ^ multi(temp[1][0],11) ^ multi(temp[2][0],13) ^ multi(temp[3][0],9);
    2ef4:	8b 2d       	mov	r24, r11
    2ef6:	6e e0       	ldi	r22, 0x0E	; 14
    2ef8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2efc:	c8 2e       	mov	r12, r24
    2efe:	dd 80       	ldd	r13, Y+5	; 0x05
    2f00:	8d 2d       	mov	r24, r13
    2f02:	6b e0       	ldi	r22, 0x0B	; 11
    2f04:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f08:	18 2f       	mov	r17, r24
    2f0a:	e9 84       	ldd	r14, Y+9	; 0x09
    2f0c:	8e 2d       	mov	r24, r14
    2f0e:	6d e0       	ldi	r22, 0x0D	; 13
    2f10:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f14:	08 2f       	mov	r16, r24
    2f16:	fd 84       	ldd	r15, Y+13	; 0x0d
    2f18:	8f 2d       	mov	r24, r15
    2f1a:	69 e0       	ldi	r22, 0x09	; 9
    2f1c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f20:	1c 25       	eor	r17, r12
    2f22:	10 27       	eor	r17, r16
    2f24:	18 27       	eor	r17, r24
    2f26:	f4 01       	movw	r30, r8
    2f28:	10 83       	st	Z, r17
		state[1][0] = multi(temp[0][0],9) ^ multi(temp[1][0],14) ^ multi(temp[2][0],11) ^ multi(temp[3][0],13);
    2f2a:	8b 2d       	mov	r24, r11
    2f2c:	69 e0       	ldi	r22, 0x09	; 9
    2f2e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f32:	c8 2e       	mov	r12, r24
    2f34:	8d 2d       	mov	r24, r13
    2f36:	6e e0       	ldi	r22, 0x0E	; 14
    2f38:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f3c:	18 2f       	mov	r17, r24
    2f3e:	8e 2d       	mov	r24, r14
    2f40:	6b e0       	ldi	r22, 0x0B	; 11
    2f42:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f46:	08 2f       	mov	r16, r24
    2f48:	8f 2d       	mov	r24, r15
    2f4a:	6d e0       	ldi	r22, 0x0D	; 13
    2f4c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f50:	1c 25       	eor	r17, r12
    2f52:	10 27       	eor	r17, r16
    2f54:	18 27       	eor	r17, r24
    2f56:	f4 01       	movw	r30, r8
    2f58:	14 83       	std	Z+4, r17	; 0x04
		state[2][0] = multi(temp[0][0],13) ^ multi(temp[1][0],9) ^ multi(temp[2][0],14) ^ multi(temp[3][0],11);
    2f5a:	8b 2d       	mov	r24, r11
    2f5c:	6d e0       	ldi	r22, 0x0D	; 13
    2f5e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f62:	c8 2e       	mov	r12, r24
    2f64:	8d 2d       	mov	r24, r13
    2f66:	69 e0       	ldi	r22, 0x09	; 9
    2f68:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f6c:	18 2f       	mov	r17, r24
    2f6e:	8e 2d       	mov	r24, r14
    2f70:	6e e0       	ldi	r22, 0x0E	; 14
    2f72:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f76:	08 2f       	mov	r16, r24
    2f78:	8f 2d       	mov	r24, r15
    2f7a:	6b e0       	ldi	r22, 0x0B	; 11
    2f7c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f80:	1c 25       	eor	r17, r12
    2f82:	10 27       	eor	r17, r16
    2f84:	18 27       	eor	r17, r24
    2f86:	f4 01       	movw	r30, r8
    2f88:	10 87       	std	Z+8, r17	; 0x08
		state[3][0] = multi(temp[0][0],11) ^ multi(temp[1][0],13) ^ multi(temp[2][0],9) ^ multi(temp[3][0],14);
    2f8a:	8b 2d       	mov	r24, r11
    2f8c:	6b e0       	ldi	r22, 0x0B	; 11
    2f8e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f92:	c8 2e       	mov	r12, r24
    2f94:	8d 2d       	mov	r24, r13
    2f96:	6d e0       	ldi	r22, 0x0D	; 13
    2f98:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2f9c:	18 2f       	mov	r17, r24
    2f9e:	8e 2d       	mov	r24, r14
    2fa0:	69 e0       	ldi	r22, 0x09	; 9
    2fa2:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fa6:	08 2f       	mov	r16, r24
    2fa8:	8f 2d       	mov	r24, r15
    2faa:	6e e0       	ldi	r22, 0x0E	; 14
    2fac:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fb0:	1c 25       	eor	r17, r12
    2fb2:	10 27       	eor	r17, r16
    2fb4:	18 27       	eor	r17, r24
    2fb6:	f4 01       	movw	r30, r8
    2fb8:	14 87       	std	Z+12, r17	; 0x0c

		state[0][1] = multi(temp[0][1],14) ^ multi(temp[1][1],11) ^ multi(temp[2][1],13) ^ multi(temp[3][1],9);
    2fba:	ba 80       	ldd	r11, Y+2	; 0x02
    2fbc:	8b 2d       	mov	r24, r11
    2fbe:	6e e0       	ldi	r22, 0x0E	; 14
    2fc0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fc4:	c8 2e       	mov	r12, r24
    2fc6:	de 80       	ldd	r13, Y+6	; 0x06
    2fc8:	8d 2d       	mov	r24, r13
    2fca:	6b e0       	ldi	r22, 0x0B	; 11
    2fcc:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fd0:	18 2f       	mov	r17, r24
    2fd2:	ea 84       	ldd	r14, Y+10	; 0x0a
    2fd4:	8e 2d       	mov	r24, r14
    2fd6:	6d e0       	ldi	r22, 0x0D	; 13
    2fd8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fdc:	08 2f       	mov	r16, r24
    2fde:	fe 84       	ldd	r15, Y+14	; 0x0e
    2fe0:	8f 2d       	mov	r24, r15
    2fe2:	69 e0       	ldi	r22, 0x09	; 9
    2fe4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2fe8:	1c 25       	eor	r17, r12
    2fea:	10 27       	eor	r17, r16
    2fec:	18 27       	eor	r17, r24
    2fee:	f4 01       	movw	r30, r8
    2ff0:	11 83       	std	Z+1, r17	; 0x01
		state[1][1] = multi(temp[0][1],9) ^ multi(temp[1][1],14) ^ multi(temp[2][1],11) ^ multi(temp[3][1],13);
    2ff2:	8b 2d       	mov	r24, r11
    2ff4:	69 e0       	ldi	r22, 0x09	; 9
    2ff6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    2ffa:	c8 2e       	mov	r12, r24
    2ffc:	8d 2d       	mov	r24, r13
    2ffe:	6e e0       	ldi	r22, 0x0E	; 14
    3000:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3004:	18 2f       	mov	r17, r24
    3006:	8e 2d       	mov	r24, r14
    3008:	6b e0       	ldi	r22, 0x0B	; 11
    300a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    300e:	08 2f       	mov	r16, r24
    3010:	8f 2d       	mov	r24, r15
    3012:	6d e0       	ldi	r22, 0x0D	; 13
    3014:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3018:	1c 25       	eor	r17, r12
    301a:	10 27       	eor	r17, r16
    301c:	18 27       	eor	r17, r24
    301e:	f3 01       	movw	r30, r6
    3020:	11 83       	std	Z+1, r17	; 0x01
		state[2][1] = multi(temp[0][1],13) ^ multi(temp[1][1],9) ^ multi(temp[2][1],14) ^ multi(temp[3][1],11);
    3022:	8b 2d       	mov	r24, r11
    3024:	6d e0       	ldi	r22, 0x0D	; 13
    3026:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    302a:	c8 2e       	mov	r12, r24
    302c:	8d 2d       	mov	r24, r13
    302e:	69 e0       	ldi	r22, 0x09	; 9
    3030:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3034:	18 2f       	mov	r17, r24
    3036:	8e 2d       	mov	r24, r14
    3038:	6e e0       	ldi	r22, 0x0E	; 14
    303a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    303e:	08 2f       	mov	r16, r24
    3040:	8f 2d       	mov	r24, r15
    3042:	6b e0       	ldi	r22, 0x0B	; 11
    3044:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3048:	1c 25       	eor	r17, r12
    304a:	10 27       	eor	r17, r16
    304c:	18 27       	eor	r17, r24
    304e:	f2 01       	movw	r30, r4
    3050:	11 83       	std	Z+1, r17	; 0x01
		state[3][1] = multi(temp[0][1],11) ^ multi(temp[1][1],13) ^ multi(temp[2][1],9) ^ multi(temp[3][1],14);
    3052:	8b 2d       	mov	r24, r11
    3054:	6b e0       	ldi	r22, 0x0B	; 11
    3056:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    305a:	c8 2e       	mov	r12, r24
    305c:	8d 2d       	mov	r24, r13
    305e:	6d e0       	ldi	r22, 0x0D	; 13
    3060:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3064:	18 2f       	mov	r17, r24
    3066:	8e 2d       	mov	r24, r14
    3068:	69 e0       	ldi	r22, 0x09	; 9
    306a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    306e:	08 2f       	mov	r16, r24
    3070:	8f 2d       	mov	r24, r15
    3072:	6e e0       	ldi	r22, 0x0E	; 14
    3074:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3078:	1c 25       	eor	r17, r12
    307a:	10 27       	eor	r17, r16
    307c:	18 27       	eor	r17, r24
    307e:	f1 01       	movw	r30, r2
    3080:	11 83       	std	Z+1, r17	; 0x01

		state[0][2] = multi(temp[0][2],14) ^ multi(temp[1][2],11) ^ multi(temp[2][2],13) ^ multi(temp[3][2],9);
    3082:	bb 80       	ldd	r11, Y+3	; 0x03
    3084:	8b 2d       	mov	r24, r11
    3086:	6e e0       	ldi	r22, 0x0E	; 14
    3088:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    308c:	c8 2e       	mov	r12, r24
    308e:	df 80       	ldd	r13, Y+7	; 0x07
    3090:	8d 2d       	mov	r24, r13
    3092:	6b e0       	ldi	r22, 0x0B	; 11
    3094:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3098:	18 2f       	mov	r17, r24
    309a:	eb 84       	ldd	r14, Y+11	; 0x0b
    309c:	8e 2d       	mov	r24, r14
    309e:	6d e0       	ldi	r22, 0x0D	; 13
    30a0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30a4:	08 2f       	mov	r16, r24
    30a6:	ff 84       	ldd	r15, Y+15	; 0x0f
    30a8:	8f 2d       	mov	r24, r15
    30aa:	69 e0       	ldi	r22, 0x09	; 9
    30ac:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30b0:	1c 25       	eor	r17, r12
    30b2:	10 27       	eor	r17, r16
    30b4:	18 27       	eor	r17, r24
    30b6:	f4 01       	movw	r30, r8
    30b8:	12 83       	std	Z+2, r17	; 0x02
		state[1][2] = multi(temp[0][2],9) ^ multi(temp[1][2],14) ^ multi(temp[2][2],11) ^ multi(temp[3][2],13);
    30ba:	8b 2d       	mov	r24, r11
    30bc:	69 e0       	ldi	r22, 0x09	; 9
    30be:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30c2:	c8 2e       	mov	r12, r24
    30c4:	8d 2d       	mov	r24, r13
    30c6:	6e e0       	ldi	r22, 0x0E	; 14
    30c8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30cc:	18 2f       	mov	r17, r24
    30ce:	8e 2d       	mov	r24, r14
    30d0:	6b e0       	ldi	r22, 0x0B	; 11
    30d2:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30d6:	08 2f       	mov	r16, r24
    30d8:	8f 2d       	mov	r24, r15
    30da:	6d e0       	ldi	r22, 0x0D	; 13
    30dc:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30e0:	1c 25       	eor	r17, r12
    30e2:	10 27       	eor	r17, r16
    30e4:	18 27       	eor	r17, r24
    30e6:	f3 01       	movw	r30, r6
    30e8:	12 83       	std	Z+2, r17	; 0x02
		state[2][2] = multi(temp[0][2],13) ^ multi(temp[1][2],9) ^ multi(temp[2][2],14) ^ multi(temp[3][2],11);
    30ea:	8b 2d       	mov	r24, r11
    30ec:	6d e0       	ldi	r22, 0x0D	; 13
    30ee:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30f2:	c8 2e       	mov	r12, r24
    30f4:	8d 2d       	mov	r24, r13
    30f6:	69 e0       	ldi	r22, 0x09	; 9
    30f8:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    30fc:	18 2f       	mov	r17, r24
    30fe:	8e 2d       	mov	r24, r14
    3100:	6e e0       	ldi	r22, 0x0E	; 14
    3102:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3106:	08 2f       	mov	r16, r24
    3108:	8f 2d       	mov	r24, r15
    310a:	6b e0       	ldi	r22, 0x0B	; 11
    310c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3110:	1c 25       	eor	r17, r12
    3112:	10 27       	eor	r17, r16
    3114:	18 27       	eor	r17, r24
    3116:	f2 01       	movw	r30, r4
    3118:	12 83       	std	Z+2, r17	; 0x02
		state[3][2] = multi(temp[0][2],11) ^ multi(temp[1][2],13) ^ multi(temp[2][2],9) ^ multi(temp[3][2],14);
    311a:	8b 2d       	mov	r24, r11
    311c:	6b e0       	ldi	r22, 0x0B	; 11
    311e:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3122:	c8 2e       	mov	r12, r24
    3124:	8d 2d       	mov	r24, r13
    3126:	6d e0       	ldi	r22, 0x0D	; 13
    3128:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    312c:	18 2f       	mov	r17, r24
    312e:	8e 2d       	mov	r24, r14
    3130:	69 e0       	ldi	r22, 0x09	; 9
    3132:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3136:	08 2f       	mov	r16, r24
    3138:	8f 2d       	mov	r24, r15
    313a:	6e e0       	ldi	r22, 0x0E	; 14
    313c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3140:	1c 25       	eor	r17, r12
    3142:	10 27       	eor	r17, r16
    3144:	18 27       	eor	r17, r24
    3146:	f1 01       	movw	r30, r2
    3148:	12 83       	std	Z+2, r17	; 0x02

		state[0][3] = multi(temp[0][3],14) ^ multi(temp[1][3],11) ^ multi(temp[2][3],13) ^ multi(temp[3][3],9);
    314a:	bc 80       	ldd	r11, Y+4	; 0x04
    314c:	8b 2d       	mov	r24, r11
    314e:	6e e0       	ldi	r22, 0x0E	; 14
    3150:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3154:	c8 2e       	mov	r12, r24
    3156:	d8 84       	ldd	r13, Y+8	; 0x08
    3158:	8d 2d       	mov	r24, r13
    315a:	6b e0       	ldi	r22, 0x0B	; 11
    315c:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3160:	18 2f       	mov	r17, r24
    3162:	ec 84       	ldd	r14, Y+12	; 0x0c
    3164:	8e 2d       	mov	r24, r14
    3166:	6d e0       	ldi	r22, 0x0D	; 13
    3168:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    316c:	08 2f       	mov	r16, r24
    316e:	f8 88       	ldd	r15, Y+16	; 0x10
    3170:	8f 2d       	mov	r24, r15
    3172:	69 e0       	ldi	r22, 0x09	; 9
    3174:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3178:	1c 25       	eor	r17, r12
    317a:	10 27       	eor	r17, r16
    317c:	18 27       	eor	r17, r24
    317e:	f4 01       	movw	r30, r8
    3180:	13 83       	std	Z+3, r17	; 0x03
		state[1][3] = multi(temp[0][3],9) ^ multi(temp[1][3],14) ^ multi(temp[2][3],11) ^ multi(temp[3][3],13);
    3182:	8b 2d       	mov	r24, r11
    3184:	69 e0       	ldi	r22, 0x09	; 9
    3186:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    318a:	c8 2e       	mov	r12, r24
    318c:	8d 2d       	mov	r24, r13
    318e:	6e e0       	ldi	r22, 0x0E	; 14
    3190:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3194:	18 2f       	mov	r17, r24
    3196:	8e 2d       	mov	r24, r14
    3198:	6b e0       	ldi	r22, 0x0B	; 11
    319a:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    319e:	08 2f       	mov	r16, r24
    31a0:	8f 2d       	mov	r24, r15
    31a2:	6d e0       	ldi	r22, 0x0D	; 13
    31a4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31a8:	1c 25       	eor	r17, r12
    31aa:	10 27       	eor	r17, r16
    31ac:	18 27       	eor	r17, r24
    31ae:	f3 01       	movw	r30, r6
    31b0:	13 83       	std	Z+3, r17	; 0x03
		state[2][3] = multi(temp[0][3],13) ^ multi(temp[1][3],9) ^ multi(temp[2][3],14) ^ multi(temp[3][3],11);
    31b2:	8b 2d       	mov	r24, r11
    31b4:	6d e0       	ldi	r22, 0x0D	; 13
    31b6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31ba:	c8 2e       	mov	r12, r24
    31bc:	8d 2d       	mov	r24, r13
    31be:	69 e0       	ldi	r22, 0x09	; 9
    31c0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31c4:	18 2f       	mov	r17, r24
    31c6:	8e 2d       	mov	r24, r14
    31c8:	6e e0       	ldi	r22, 0x0E	; 14
    31ca:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31ce:	08 2f       	mov	r16, r24
    31d0:	8f 2d       	mov	r24, r15
    31d2:	6b e0       	ldi	r22, 0x0B	; 11
    31d4:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31d8:	1c 25       	eor	r17, r12
    31da:	10 27       	eor	r17, r16
    31dc:	18 27       	eor	r17, r24
    31de:	f2 01       	movw	r30, r4
    31e0:	13 83       	std	Z+3, r17	; 0x03
		state[3][3] = multi(temp[0][3],11) ^ multi(temp[1][3],13) ^ multi(temp[2][3],9) ^ multi(temp[3][3],14);
    31e2:	8b 2d       	mov	r24, r11
    31e4:	6b e0       	ldi	r22, 0x0B	; 11
    31e6:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31ea:	c8 2e       	mov	r12, r24
    31ec:	8d 2d       	mov	r24, r13
    31ee:	6d e0       	ldi	r22, 0x0D	; 13
    31f0:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31f4:	18 2f       	mov	r17, r24
    31f6:	8e 2d       	mov	r24, r14
    31f8:	69 e0       	ldi	r22, 0x09	; 9
    31fa:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    31fe:	08 2f       	mov	r16, r24
    3200:	8f 2d       	mov	r24, r15
    3202:	6e e0       	ldi	r22, 0x0E	; 14
    3204:	0e 94 31 14 	call	0x2862	; 0x2862 <multi>
    3208:	1c 25       	eor	r17, r12
    320a:	10 27       	eor	r17, r16
    320c:	18 27       	eor	r17, r24
    320e:	f1 01       	movw	r30, r2
    3210:	13 83       	std	Z+3, r17	; 0x03
	}
	return 0;
}
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	60 96       	adiw	r28, 0x10	; 16
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
    322a:	ff 90       	pop	r15
    322c:	ef 90       	pop	r14
    322e:	df 90       	pop	r13
    3230:	cf 90       	pop	r12
    3232:	bf 90       	pop	r11
    3234:	9f 90       	pop	r9
    3236:	8f 90       	pop	r8
    3238:	7f 90       	pop	r7
    323a:	6f 90       	pop	r6
    323c:	5f 90       	pop	r5
    323e:	4f 90       	pop	r4
    3240:	3f 90       	pop	r3
    3242:	2f 90       	pop	r2
    3244:	08 95       	ret

00003246 <add_round_key>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue l'opération add_round_key.
**************************************************************************************************************/
int add_round_key(unsigned char state[4][4], unsigned char round_key[4][4])
{
    3246:	0f 93       	push	r16
    3248:	1f 93       	push	r17
    324a:	cf 93       	push	r28
    324c:	df 93       	push	r29
    324e:	8c 01       	movw	r16, r24
    3250:	eb 01       	movw	r28, r22
    3252:	40 e0       	ldi	r20, 0x00	; 0
    3254:	50 e0       	ldi	r21, 0x00	; 0
    3256:	11 c0       	rjmp	.+34     	; 0x327a <add_round_key+0x34>

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
		{
			state[i][j] ^= round_key[i][j];
    3258:	fb 01       	movw	r30, r22
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	8c 91       	ld	r24, X
    3260:	90 81       	ld	r25, Z
    3262:	89 27       	eor	r24, r25
    3264:	8d 93       	st	X+, r24
{
	int i,j;

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
    3266:	2f 5f       	subi	r18, 0xFF	; 255
    3268:	3f 4f       	sbci	r19, 0xFF	; 255
    326a:	24 30       	cpi	r18, 0x04	; 4
    326c:	31 05       	cpc	r19, r1
    326e:	a1 f7       	brne	.-24     	; 0x3258 <add_round_key+0x12>
    3270:	4c 5f       	subi	r20, 0xFC	; 252
    3272:	5f 4f       	sbci	r21, 0xFF	; 255
**************************************************************************************************************/
int add_round_key(unsigned char state[4][4], unsigned char round_key[4][4])
{
	int i,j;

	for(i = 0; i < 4; i++)
    3274:	40 31       	cpi	r20, 0x10	; 16
    3276:	51 05       	cpc	r21, r1
    3278:	49 f0       	breq	.+18     	; 0x328c <add_round_key+0x46>
    327a:	be 01       	movw	r22, r28
    327c:	64 0f       	add	r22, r20
    327e:	75 1f       	adc	r23, r21
    3280:	d8 01       	movw	r26, r16
    3282:	a4 0f       	add	r26, r20
    3284:	b5 1f       	adc	r27, r21
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	e6 cf       	rjmp	.-52     	; 0x3258 <add_round_key+0x12>
			state[i][j] ^= round_key[i][j];
		}
	}

	return 0;
}
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	08 95       	ret

0000329a <aes_round>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue un round comprenant les 4 opérations.
**************************************************************************************************************/
int aes_round(unsigned char state[4][4], unsigned char round_key[4][4], int round, unsigned char cmd)
{
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
    32aa:	6b 01       	movw	r12, r22
    32ac:	7a 01       	movw	r14, r20
    32ae:	12 2f       	mov	r17, r18
	if (cmd == 'c')
    32b0:	23 36       	cpi	r18, 0x63	; 99
    32b2:	a1 f4       	brne	.+40     	; 0x32dc <aes_round+0x42>
	{
		byte_sub(state, cmd);
    32b4:	63 e6       	ldi	r22, 0x63	; 99
    32b6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <byte_sub>
		shift_row(state, cmd);
    32ba:	ce 01       	movw	r24, r28
    32bc:	63 e6       	ldi	r22, 0x63	; 99
    32be:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <shift_row>
		if (round != 9) mix_column(state, cmd);
    32c2:	89 e0       	ldi	r24, 0x09	; 9
    32c4:	e8 16       	cp	r14, r24
    32c6:	f1 04       	cpc	r15, r1
    32c8:	21 f0       	breq	.+8      	; 0x32d2 <aes_round+0x38>
    32ca:	ce 01       	movw	r24, r28
    32cc:	63 e6       	ldi	r22, 0x63	; 99
    32ce:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <mix_column>
		add_round_key(state, round_key);
    32d2:	ce 01       	movw	r24, r28
    32d4:	b6 01       	movw	r22, r12
    32d6:	0e 94 23 19 	call	0x3246	; 0x3246 <add_round_key>
    32da:	12 c0       	rjmp	.+36     	; 0x3300 <aes_round+0x66>
	}
	else
	{
		add_round_key(state, round_key);
    32dc:	0e 94 23 19 	call	0x3246	; 0x3246 <add_round_key>
		if (round != 9) mix_column(state, cmd);
    32e0:	89 e0       	ldi	r24, 0x09	; 9
    32e2:	e8 16       	cp	r14, r24
    32e4:	f1 04       	cpc	r15, r1
    32e6:	21 f0       	breq	.+8      	; 0x32f0 <aes_round+0x56>
    32e8:	ce 01       	movw	r24, r28
    32ea:	61 2f       	mov	r22, r17
    32ec:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <mix_column>
		shift_row(state, cmd);
    32f0:	ce 01       	movw	r24, r28
    32f2:	61 2f       	mov	r22, r17
    32f4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <shift_row>
		byte_sub(state, cmd);
    32f8:	ce 01       	movw	r24, r28
    32fa:	61 2f       	mov	r22, r17
    32fc:	0e 94 04 15 	call	0x2a08	; 0x2a08 <byte_sub>
	}

	return 0;
}
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	ff 90       	pop	r15
    330c:	ef 90       	pop	r14
    330e:	df 90       	pop	r13
    3310:	cf 90       	pop	r12
    3312:	08 95       	ret

00003314 <rijndael>:
 	Valeur retour:	
**************************************************************************************************************/
/** @brief	Effectue le cryptage ou le décryptage.
**************************************************************************************************************/
int rijndael(unsigned char cmd, unsigned char data[16], unsigned char cipher_key[16])
{
    3314:	2f 92       	push	r2
    3316:	3f 92       	push	r3
    3318:	4f 92       	push	r4
    331a:	5f 92       	push	r5
    331c:	6f 92       	push	r6
    331e:	7f 92       	push	r7
    3320:	8f 92       	push	r8
    3322:	9f 92       	push	r9
    3324:	af 92       	push	r10
    3326:	bf 92       	push	r11
    3328:	cf 92       	push	r12
    332a:	df 92       	push	r13
    332c:	ef 92       	push	r14
    332e:	ff 92       	push	r15
    3330:	0f 93       	push	r16
    3332:	1f 93       	push	r17
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	c1 5d       	subi	r28, 0xD1	; 209
    333e:	d0 40       	sbci	r29, 0x00	; 0
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	cf 52       	subi	r28, 0x2F	; 47
    334c:	df 4f       	sbci	r29, 0xFF	; 255
    334e:	88 83       	st	Y, r24
    3350:	c1 5d       	subi	r28, 0xD1	; 209
    3352:	d0 40       	sbci	r29, 0x00	; 0
    3354:	4b 01       	movw	r8, r22
    3356:	6e 01       	movw	r12, r28
    3358:	08 94       	sec
    335a:	c1 1c       	adc	r12, r1
    335c:	d1 1c       	adc	r13, r1
    335e:	fb 01       	movw	r30, r22
    3360:	76 01       	movw	r14, r12
	int i, j;
	unsigned char state[4][4];
	unsigned char expanded_key[11*16];
	unsigned char round_key[4][4];

	for(i = 0; i < 4; i++)
    3362:	9e 01       	movw	r18, r28
    3364:	2f 5e       	subi	r18, 0xEF	; 239
    3366:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		for(j = 0; j < 4; j++)
		{
			state[i][j] = data[i * 4 + j];
    3368:	80 81       	ld	r24, Z
    336a:	d7 01       	movw	r26, r14
    336c:	8c 93       	st	X, r24
    336e:	81 81       	ldd	r24, Z+1	; 0x01
    3370:	11 96       	adiw	r26, 0x01	; 1
    3372:	8c 93       	st	X, r24
    3374:	11 97       	sbiw	r26, 0x01	; 1
    3376:	82 81       	ldd	r24, Z+2	; 0x02
    3378:	12 96       	adiw	r26, 0x02	; 2
    337a:	8c 93       	st	X, r24
    337c:	12 97       	sbiw	r26, 0x02	; 2
    337e:	83 81       	ldd	r24, Z+3	; 0x03
    3380:	13 96       	adiw	r26, 0x03	; 3
    3382:	8c 93       	st	X, r24
    3384:	34 96       	adiw	r30, 0x04	; 4
    3386:	84 e0       	ldi	r24, 0x04	; 4
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	e8 0e       	add	r14, r24
    338c:	f9 1e       	adc	r15, r25
	int i, j;
	unsigned char state[4][4];
	unsigned char expanded_key[11*16];
	unsigned char round_key[4][4];

	for(i = 0; i < 4; i++)
    338e:	e2 16       	cp	r14, r18
    3390:	f3 06       	cpc	r15, r19
    3392:	51 f7       	brne	.-44     	; 0x3368 <rijndael+0x54>
		{
			state[i][j] = data[i * 4 + j];
		}
	}

	expand_key(cipher_key, expanded_key);
    3394:	8e 01       	movw	r16, r28
    3396:	0f 5d       	subi	r16, 0xDF	; 223
    3398:	1f 4f       	sbci	r17, 0xFF	; 255
    339a:	ca 01       	movw	r24, r20
    339c:	b8 01       	movw	r22, r16
    339e:	0e 94 8e 14 	call	0x291c	; 0x291c <expand_key>
    33a2:	aa 24       	eor	r10, r10
    33a4:	bb 24       	eor	r11, r11
	for(i = 0; i < 10; i++)
	{
		if (cmd == 'd') j = 9 - i;
		else j = i;

		select_key(expanded_key, round_key, j);
    33a6:	18 01       	movw	r2, r16
    33a8:	01 e1       	ldi	r16, 0x11	; 17
    33aa:	60 2e       	mov	r6, r16
    33ac:	71 2c       	mov	r7, r1
    33ae:	6c 0e       	add	r6, r28
    33b0:	7d 1e       	adc	r7, r29
		aes_round(state, round_key, j, cmd);
    33b2:	2e 01       	movw	r4, r28
    33b4:	08 94       	sec
    33b6:	41 1c       	adc	r4, r1
    33b8:	51 1c       	adc	r5, r1

	expand_key(cipher_key, expanded_key);
	
	for(i = 0; i < 10; i++)
	{
		if (cmd == 'd') j = 9 - i;
    33ba:	cf 52       	subi	r28, 0x2F	; 47
    33bc:	df 4f       	sbci	r29, 0xFF	; 255
    33be:	98 81       	ld	r25, Y
    33c0:	c1 5d       	subi	r28, 0xD1	; 209
    33c2:	d0 40       	sbci	r29, 0x00	; 0
    33c4:	94 36       	cpi	r25, 0x64	; 100
    33c6:	11 f0       	breq	.+4      	; 0x33cc <rijndael+0xb8>
    33c8:	85 01       	movw	r16, r10
    33ca:	04 c0       	rjmp	.+8      	; 0x33d4 <rijndael+0xc0>
    33cc:	09 e0       	ldi	r16, 0x09	; 9
    33ce:	10 e0       	ldi	r17, 0x00	; 0
    33d0:	0a 19       	sub	r16, r10
    33d2:	1b 09       	sbc	r17, r11
		else j = i;

		select_key(expanded_key, round_key, j);
    33d4:	c1 01       	movw	r24, r2
    33d6:	b3 01       	movw	r22, r6
    33d8:	a8 01       	movw	r20, r16
    33da:	0e 94 de 14 	call	0x29bc	; 0x29bc <select_key>
		aes_round(state, round_key, j, cmd);
    33de:	c2 01       	movw	r24, r4
    33e0:	b3 01       	movw	r22, r6
    33e2:	a8 01       	movw	r20, r16
    33e4:	cf 52       	subi	r28, 0x2F	; 47
    33e6:	df 4f       	sbci	r29, 0xFF	; 255
    33e8:	28 81       	ld	r18, Y
    33ea:	c1 5d       	subi	r28, 0xD1	; 209
    33ec:	d0 40       	sbci	r29, 0x00	; 0
    33ee:	0e 94 4d 19 	call	0x329a	; 0x329a <aes_round>
		}
	}

	expand_key(cipher_key, expanded_key);
	
	for(i = 0; i < 10; i++)
    33f2:	08 94       	sec
    33f4:	a1 1c       	adc	r10, r1
    33f6:	b1 1c       	adc	r11, r1
    33f8:	aa e0       	ldi	r26, 0x0A	; 10
    33fa:	aa 16       	cp	r10, r26
    33fc:	b1 04       	cpc	r11, r1
    33fe:	e9 f6       	brne	.-70     	; 0x33ba <rijndael+0xa6>

	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
		{
			data[i * 4 + j] = state[i][j];
    3400:	f6 01       	movw	r30, r12
    3402:	80 81       	ld	r24, Z
    3404:	d4 01       	movw	r26, r8
    3406:	8c 93       	st	X, r24
    3408:	81 81       	ldd	r24, Z+1	; 0x01
    340a:	11 96       	adiw	r26, 0x01	; 1
    340c:	8c 93       	st	X, r24
    340e:	11 97       	sbiw	r26, 0x01	; 1
    3410:	82 81       	ldd	r24, Z+2	; 0x02
    3412:	12 96       	adiw	r26, 0x02	; 2
    3414:	8c 93       	st	X, r24
    3416:	12 97       	sbiw	r26, 0x02	; 2
    3418:	83 81       	ldd	r24, Z+3	; 0x03
    341a:	13 96       	adiw	r26, 0x03	; 3
    341c:	8c 93       	st	X, r24
    341e:	e4 e0       	ldi	r30, 0x04	; 4
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	ce 0e       	add	r12, r30
    3424:	df 1e       	adc	r13, r31
    3426:	8e 0e       	add	r8, r30
    3428:	9f 1e       	adc	r9, r31

		select_key(expanded_key, round_key, j);
		aes_round(state, round_key, j, cmd);
	}

	for(i = 0; i < 4; i++)
    342a:	ce 14       	cp	r12, r14
    342c:	df 04       	cpc	r13, r15
    342e:	41 f7       	brne	.-48     	; 0x3400 <rijndael+0xec>
			data[i * 4 + j] = state[i][j];
		}
	}
	
	return 0;
}
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	cf 52       	subi	r28, 0x2F	; 47
    3436:	df 4f       	sbci	r29, 0xFF	; 255
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	cf 91       	pop	r28
    3444:	df 91       	pop	r29
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	ff 90       	pop	r15
    344c:	ef 90       	pop	r14
    344e:	df 90       	pop	r13
    3450:	cf 90       	pop	r12
    3452:	bf 90       	pop	r11
    3454:	af 90       	pop	r10
    3456:	9f 90       	pop	r9
    3458:	8f 90       	pop	r8
    345a:	7f 90       	pop	r7
    345c:	6f 90       	pop	r6
    345e:	5f 90       	pop	r5
    3460:	4f 90       	pop	r4
    3462:	3f 90       	pop	r3
    3464:	2f 90       	pop	r2
    3466:	08 95       	ret

00003468 <__udivmodqi4>:
    3468:	99 1b       	sub	r25, r25
    346a:	79 e0       	ldi	r23, 0x09	; 9
    346c:	04 c0       	rjmp	.+8      	; 0x3476 <__udivmodqi4_ep>

0000346e <__udivmodqi4_loop>:
    346e:	99 1f       	adc	r25, r25
    3470:	96 17       	cp	r25, r22
    3472:	08 f0       	brcs	.+2      	; 0x3476 <__udivmodqi4_ep>
    3474:	96 1b       	sub	r25, r22

00003476 <__udivmodqi4_ep>:
    3476:	88 1f       	adc	r24, r24
    3478:	7a 95       	dec	r23
    347a:	c9 f7       	brne	.-14     	; 0x346e <__udivmodqi4_loop>
    347c:	80 95       	com	r24
    347e:	08 95       	ret

00003480 <__udivmodsi4>:
    3480:	a1 e2       	ldi	r26, 0x21	; 33
    3482:	1a 2e       	mov	r1, r26
    3484:	aa 1b       	sub	r26, r26
    3486:	bb 1b       	sub	r27, r27
    3488:	fd 01       	movw	r30, r26
    348a:	0d c0       	rjmp	.+26     	; 0x34a6 <__udivmodsi4_ep>

0000348c <__udivmodsi4_loop>:
    348c:	aa 1f       	adc	r26, r26
    348e:	bb 1f       	adc	r27, r27
    3490:	ee 1f       	adc	r30, r30
    3492:	ff 1f       	adc	r31, r31
    3494:	a2 17       	cp	r26, r18
    3496:	b3 07       	cpc	r27, r19
    3498:	e4 07       	cpc	r30, r20
    349a:	f5 07       	cpc	r31, r21
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__udivmodsi4_ep>
    349e:	a2 1b       	sub	r26, r18
    34a0:	b3 0b       	sbc	r27, r19
    34a2:	e4 0b       	sbc	r30, r20
    34a4:	f5 0b       	sbc	r31, r21

000034a6 <__udivmodsi4_ep>:
    34a6:	66 1f       	adc	r22, r22
    34a8:	77 1f       	adc	r23, r23
    34aa:	88 1f       	adc	r24, r24
    34ac:	99 1f       	adc	r25, r25
    34ae:	1a 94       	dec	r1
    34b0:	69 f7       	brne	.-38     	; 0x348c <__udivmodsi4_loop>
    34b2:	60 95       	com	r22
    34b4:	70 95       	com	r23
    34b6:	80 95       	com	r24
    34b8:	90 95       	com	r25
    34ba:	9b 01       	movw	r18, r22
    34bc:	ac 01       	movw	r20, r24
    34be:	bd 01       	movw	r22, r26
    34c0:	cf 01       	movw	r24, r30
    34c2:	08 95       	ret

000034c4 <fgetc>:
    34c4:	cf 93       	push	r28
    34c6:	df 93       	push	r29
    34c8:	ec 01       	movw	r28, r24
    34ca:	4b 81       	ldd	r20, Y+3	; 0x03
    34cc:	40 ff       	sbrs	r20, 0
    34ce:	1a c0       	rjmp	.+52     	; 0x3504 <fgetc+0x40>
    34d0:	46 ff       	sbrs	r20, 6
    34d2:	0a c0       	rjmp	.+20     	; 0x34e8 <fgetc+0x24>
    34d4:	4f 7b       	andi	r20, 0xBF	; 191
    34d6:	4b 83       	std	Y+3, r20	; 0x03
    34d8:	8e 81       	ldd	r24, Y+6	; 0x06
    34da:	9f 81       	ldd	r25, Y+7	; 0x07
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	9f 83       	std	Y+7, r25	; 0x07
    34e0:	8e 83       	std	Y+6, r24	; 0x06
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	28 2f       	mov	r18, r24
    34e6:	2b c0       	rjmp	.+86     	; 0x353e <fgetc+0x7a>
    34e8:	42 ff       	sbrs	r20, 2
    34ea:	13 c0       	rjmp	.+38     	; 0x3512 <fgetc+0x4e>
    34ec:	e8 81       	ld	r30, Y
    34ee:	f9 81       	ldd	r31, Y+1	; 0x01
    34f0:	80 81       	ld	r24, Z
    34f2:	28 2f       	mov	r18, r24
    34f4:	33 27       	eor	r19, r19
    34f6:	27 fd       	sbrc	r18, 7
    34f8:	30 95       	com	r19
    34fa:	21 15       	cp	r18, r1
    34fc:	31 05       	cpc	r19, r1
    34fe:	29 f4       	brne	.+10     	; 0x350a <fgetc+0x46>
    3500:	40 62       	ori	r20, 0x20	; 32
    3502:	4b 83       	std	Y+3, r20	; 0x03
    3504:	2f ef       	ldi	r18, 0xFF	; 255
    3506:	3f ef       	ldi	r19, 0xFF	; 255
    3508:	1b c0       	rjmp	.+54     	; 0x3540 <fgetc+0x7c>
    350a:	31 96       	adiw	r30, 0x01	; 1
    350c:	f9 83       	std	Y+1, r31	; 0x01
    350e:	e8 83       	st	Y, r30
    3510:	11 c0       	rjmp	.+34     	; 0x3534 <fgetc+0x70>
    3512:	ea 85       	ldd	r30, Y+10	; 0x0a
    3514:	fb 85       	ldd	r31, Y+11	; 0x0b
    3516:	ce 01       	movw	r24, r28
    3518:	09 95       	icall
    351a:	9c 01       	movw	r18, r24
    351c:	97 ff       	sbrs	r25, 7
    351e:	0a c0       	rjmp	.+20     	; 0x3534 <fgetc+0x70>
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	2f 5f       	subi	r18, 0xFF	; 255
    3524:	3f 4f       	sbci	r19, 0xFF	; 255
    3526:	11 f0       	breq	.+4      	; 0x352c <fgetc+0x68>
    3528:	80 e2       	ldi	r24, 0x20	; 32
    352a:	01 c0       	rjmp	.+2      	; 0x352e <fgetc+0x6a>
    352c:	80 e1       	ldi	r24, 0x10	; 16
    352e:	89 2b       	or	r24, r25
    3530:	8b 83       	std	Y+3, r24	; 0x03
    3532:	e8 cf       	rjmp	.-48     	; 0x3504 <fgetc+0x40>
    3534:	8e 81       	ldd	r24, Y+6	; 0x06
    3536:	9f 81       	ldd	r25, Y+7	; 0x07
    3538:	01 96       	adiw	r24, 0x01	; 1
    353a:	9f 83       	std	Y+7, r25	; 0x07
    353c:	8e 83       	std	Y+6, r24	; 0x06
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	c9 01       	movw	r24, r18
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	08 95       	ret

00003548 <printf>:
    3548:	a0 e0       	ldi	r26, 0x00	; 0
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	ea ea       	ldi	r30, 0xAA	; 170
    354e:	fa e1       	ldi	r31, 0x1A	; 26
    3550:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <__prologue_saves__+0x20>
    3554:	fe 01       	movw	r30, r28
    3556:	35 96       	adiw	r30, 0x05	; 5
    3558:	61 91       	ld	r22, Z+
    355a:	71 91       	ld	r23, Z+
    355c:	80 91 17 05 	lds	r24, 0x0517
    3560:	90 91 18 05 	lds	r25, 0x0518
    3564:	af 01       	movw	r20, r30
    3566:	0e 94 b9 1a 	call	0x3572	; 0x3572 <vfprintf>
    356a:	20 96       	adiw	r28, 0x00	; 0
    356c:	e2 e0       	ldi	r30, 0x02	; 2
    356e:	0c 94 62 1d 	jmp	0x3ac4	; 0x3ac4 <__epilogue_restores__+0x20>

00003572 <vfprintf>:
    3572:	ab e0       	ldi	r26, 0x0B	; 11
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ef eb       	ldi	r30, 0xBF	; 191
    3578:	fa e1       	ldi	r31, 0x1A	; 26
    357a:	0c 94 36 1d 	jmp	0x3a6c	; 0x3a6c <__prologue_saves__>
    357e:	3c 01       	movw	r6, r24
    3580:	2b 01       	movw	r4, r22
    3582:	5a 01       	movw	r10, r20
    3584:	fc 01       	movw	r30, r24
    3586:	17 82       	std	Z+7, r1	; 0x07
    3588:	16 82       	std	Z+6, r1	; 0x06
    358a:	83 81       	ldd	r24, Z+3	; 0x03
    358c:	81 fd       	sbrc	r24, 1
    358e:	03 c0       	rjmp	.+6      	; 0x3596 <vfprintf+0x24>
    3590:	6f ef       	ldi	r22, 0xFF	; 255
    3592:	7f ef       	ldi	r23, 0xFF	; 255
    3594:	c6 c1       	rjmp	.+908    	; 0x3922 <vfprintf+0x3b0>
    3596:	9a e0       	ldi	r25, 0x0A	; 10
    3598:	89 2e       	mov	r8, r25
    359a:	1e 01       	movw	r2, r28
    359c:	08 94       	sec
    359e:	21 1c       	adc	r2, r1
    35a0:	31 1c       	adc	r3, r1
    35a2:	f3 01       	movw	r30, r6
    35a4:	23 81       	ldd	r18, Z+3	; 0x03
    35a6:	f2 01       	movw	r30, r4
    35a8:	23 fd       	sbrc	r18, 3
    35aa:	85 91       	lpm	r24, Z+
    35ac:	23 ff       	sbrs	r18, 3
    35ae:	81 91       	ld	r24, Z+
    35b0:	2f 01       	movw	r4, r30
    35b2:	88 23       	and	r24, r24
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <vfprintf+0x46>
    35b6:	b2 c1       	rjmp	.+868    	; 0x391c <vfprintf+0x3aa>
    35b8:	85 32       	cpi	r24, 0x25	; 37
    35ba:	39 f4       	brne	.+14     	; 0x35ca <vfprintf+0x58>
    35bc:	23 fd       	sbrc	r18, 3
    35be:	85 91       	lpm	r24, Z+
    35c0:	23 ff       	sbrs	r18, 3
    35c2:	81 91       	ld	r24, Z+
    35c4:	2f 01       	movw	r4, r30
    35c6:	85 32       	cpi	r24, 0x25	; 37
    35c8:	29 f4       	brne	.+10     	; 0x35d4 <vfprintf+0x62>
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	b3 01       	movw	r22, r6
    35ce:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    35d2:	e7 cf       	rjmp	.-50     	; 0x35a2 <vfprintf+0x30>
    35d4:	98 2f       	mov	r25, r24
    35d6:	ff 24       	eor	r15, r15
    35d8:	ee 24       	eor	r14, r14
    35da:	99 24       	eor	r9, r9
    35dc:	ff e1       	ldi	r31, 0x1F	; 31
    35de:	ff 15       	cp	r31, r15
    35e0:	d0 f0       	brcs	.+52     	; 0x3616 <vfprintf+0xa4>
    35e2:	9b 32       	cpi	r25, 0x2B	; 43
    35e4:	69 f0       	breq	.+26     	; 0x3600 <vfprintf+0x8e>
    35e6:	9c 32       	cpi	r25, 0x2C	; 44
    35e8:	28 f4       	brcc	.+10     	; 0x35f4 <vfprintf+0x82>
    35ea:	90 32       	cpi	r25, 0x20	; 32
    35ec:	59 f0       	breq	.+22     	; 0x3604 <vfprintf+0x92>
    35ee:	93 32       	cpi	r25, 0x23	; 35
    35f0:	91 f4       	brne	.+36     	; 0x3616 <vfprintf+0xa4>
    35f2:	0e c0       	rjmp	.+28     	; 0x3610 <vfprintf+0x9e>
    35f4:	9d 32       	cpi	r25, 0x2D	; 45
    35f6:	49 f0       	breq	.+18     	; 0x360a <vfprintf+0x98>
    35f8:	90 33       	cpi	r25, 0x30	; 48
    35fa:	69 f4       	brne	.+26     	; 0x3616 <vfprintf+0xa4>
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	24 c0       	rjmp	.+72     	; 0x3648 <vfprintf+0xd6>
    3600:	52 e0       	ldi	r21, 0x02	; 2
    3602:	f5 2a       	or	r15, r21
    3604:	84 e0       	ldi	r24, 0x04	; 4
    3606:	f8 2a       	or	r15, r24
    3608:	28 c0       	rjmp	.+80     	; 0x365a <vfprintf+0xe8>
    360a:	98 e0       	ldi	r25, 0x08	; 8
    360c:	f9 2a       	or	r15, r25
    360e:	25 c0       	rjmp	.+74     	; 0x365a <vfprintf+0xe8>
    3610:	e0 e1       	ldi	r30, 0x10	; 16
    3612:	fe 2a       	or	r15, r30
    3614:	22 c0       	rjmp	.+68     	; 0x365a <vfprintf+0xe8>
    3616:	f7 fc       	sbrc	r15, 7
    3618:	29 c0       	rjmp	.+82     	; 0x366c <vfprintf+0xfa>
    361a:	89 2f       	mov	r24, r25
    361c:	80 53       	subi	r24, 0x30	; 48
    361e:	8a 30       	cpi	r24, 0x0A	; 10
    3620:	70 f4       	brcc	.+28     	; 0x363e <vfprintf+0xcc>
    3622:	f6 fe       	sbrs	r15, 6
    3624:	05 c0       	rjmp	.+10     	; 0x3630 <vfprintf+0xbe>
    3626:	98 9c       	mul	r9, r8
    3628:	90 2c       	mov	r9, r0
    362a:	11 24       	eor	r1, r1
    362c:	98 0e       	add	r9, r24
    362e:	15 c0       	rjmp	.+42     	; 0x365a <vfprintf+0xe8>
    3630:	e8 9c       	mul	r14, r8
    3632:	e0 2c       	mov	r14, r0
    3634:	11 24       	eor	r1, r1
    3636:	e8 0e       	add	r14, r24
    3638:	f0 e2       	ldi	r31, 0x20	; 32
    363a:	ff 2a       	or	r15, r31
    363c:	0e c0       	rjmp	.+28     	; 0x365a <vfprintf+0xe8>
    363e:	9e 32       	cpi	r25, 0x2E	; 46
    3640:	29 f4       	brne	.+10     	; 0x364c <vfprintf+0xda>
    3642:	f6 fc       	sbrc	r15, 6
    3644:	6b c1       	rjmp	.+726    	; 0x391c <vfprintf+0x3aa>
    3646:	40 e4       	ldi	r20, 0x40	; 64
    3648:	f4 2a       	or	r15, r20
    364a:	07 c0       	rjmp	.+14     	; 0x365a <vfprintf+0xe8>
    364c:	9c 36       	cpi	r25, 0x6C	; 108
    364e:	19 f4       	brne	.+6      	; 0x3656 <vfprintf+0xe4>
    3650:	50 e8       	ldi	r21, 0x80	; 128
    3652:	f5 2a       	or	r15, r21
    3654:	02 c0       	rjmp	.+4      	; 0x365a <vfprintf+0xe8>
    3656:	98 36       	cpi	r25, 0x68	; 104
    3658:	49 f4       	brne	.+18     	; 0x366c <vfprintf+0xfa>
    365a:	f2 01       	movw	r30, r4
    365c:	23 fd       	sbrc	r18, 3
    365e:	95 91       	lpm	r25, Z+
    3660:	23 ff       	sbrs	r18, 3
    3662:	91 91       	ld	r25, Z+
    3664:	2f 01       	movw	r4, r30
    3666:	99 23       	and	r25, r25
    3668:	09 f0       	breq	.+2      	; 0x366c <vfprintf+0xfa>
    366a:	b8 cf       	rjmp	.-144    	; 0x35dc <vfprintf+0x6a>
    366c:	89 2f       	mov	r24, r25
    366e:	85 54       	subi	r24, 0x45	; 69
    3670:	83 30       	cpi	r24, 0x03	; 3
    3672:	18 f0       	brcs	.+6      	; 0x367a <vfprintf+0x108>
    3674:	80 52       	subi	r24, 0x20	; 32
    3676:	83 30       	cpi	r24, 0x03	; 3
    3678:	38 f4       	brcc	.+14     	; 0x3688 <vfprintf+0x116>
    367a:	44 e0       	ldi	r20, 0x04	; 4
    367c:	50 e0       	ldi	r21, 0x00	; 0
    367e:	a4 0e       	add	r10, r20
    3680:	b5 1e       	adc	r11, r21
    3682:	5f e3       	ldi	r21, 0x3F	; 63
    3684:	59 83       	std	Y+1, r21	; 0x01
    3686:	0f c0       	rjmp	.+30     	; 0x36a6 <vfprintf+0x134>
    3688:	93 36       	cpi	r25, 0x63	; 99
    368a:	31 f0       	breq	.+12     	; 0x3698 <vfprintf+0x126>
    368c:	93 37       	cpi	r25, 0x73	; 115
    368e:	79 f0       	breq	.+30     	; 0x36ae <vfprintf+0x13c>
    3690:	93 35       	cpi	r25, 0x53	; 83
    3692:	09 f0       	breq	.+2      	; 0x3696 <vfprintf+0x124>
    3694:	56 c0       	rjmp	.+172    	; 0x3742 <vfprintf+0x1d0>
    3696:	20 c0       	rjmp	.+64     	; 0x36d8 <vfprintf+0x166>
    3698:	f5 01       	movw	r30, r10
    369a:	80 81       	ld	r24, Z
    369c:	89 83       	std	Y+1, r24	; 0x01
    369e:	42 e0       	ldi	r20, 0x02	; 2
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	a4 0e       	add	r10, r20
    36a4:	b5 1e       	adc	r11, r21
    36a6:	61 01       	movw	r12, r2
    36a8:	01 e0       	ldi	r16, 0x01	; 1
    36aa:	10 e0       	ldi	r17, 0x00	; 0
    36ac:	12 c0       	rjmp	.+36     	; 0x36d2 <vfprintf+0x160>
    36ae:	f5 01       	movw	r30, r10
    36b0:	c0 80       	ld	r12, Z
    36b2:	d1 80       	ldd	r13, Z+1	; 0x01
    36b4:	f6 fc       	sbrc	r15, 6
    36b6:	03 c0       	rjmp	.+6      	; 0x36be <vfprintf+0x14c>
    36b8:	6f ef       	ldi	r22, 0xFF	; 255
    36ba:	7f ef       	ldi	r23, 0xFF	; 255
    36bc:	02 c0       	rjmp	.+4      	; 0x36c2 <vfprintf+0x150>
    36be:	69 2d       	mov	r22, r9
    36c0:	70 e0       	ldi	r23, 0x00	; 0
    36c2:	42 e0       	ldi	r20, 0x02	; 2
    36c4:	50 e0       	ldi	r21, 0x00	; 0
    36c6:	a4 0e       	add	r10, r20
    36c8:	b5 1e       	adc	r11, r21
    36ca:	c6 01       	movw	r24, r12
    36cc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <strnlen>
    36d0:	8c 01       	movw	r16, r24
    36d2:	5f e7       	ldi	r21, 0x7F	; 127
    36d4:	f5 22       	and	r15, r21
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <vfprintf+0x18e>
    36d8:	f5 01       	movw	r30, r10
    36da:	c0 80       	ld	r12, Z
    36dc:	d1 80       	ldd	r13, Z+1	; 0x01
    36de:	f6 fc       	sbrc	r15, 6
    36e0:	03 c0       	rjmp	.+6      	; 0x36e8 <vfprintf+0x176>
    36e2:	6f ef       	ldi	r22, 0xFF	; 255
    36e4:	7f ef       	ldi	r23, 0xFF	; 255
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <vfprintf+0x17a>
    36e8:	69 2d       	mov	r22, r9
    36ea:	70 e0       	ldi	r23, 0x00	; 0
    36ec:	42 e0       	ldi	r20, 0x02	; 2
    36ee:	50 e0       	ldi	r21, 0x00	; 0
    36f0:	a4 0e       	add	r10, r20
    36f2:	b5 1e       	adc	r11, r21
    36f4:	c6 01       	movw	r24, r12
    36f6:	0e 94 96 1c 	call	0x392c	; 0x392c <strnlen_P>
    36fa:	8c 01       	movw	r16, r24
    36fc:	50 e8       	ldi	r21, 0x80	; 128
    36fe:	f5 2a       	or	r15, r21
    3700:	f3 fe       	sbrs	r15, 3
    3702:	07 c0       	rjmp	.+14     	; 0x3712 <vfprintf+0x1a0>
    3704:	1a c0       	rjmp	.+52     	; 0x373a <vfprintf+0x1c8>
    3706:	80 e2       	ldi	r24, 0x20	; 32
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	b3 01       	movw	r22, r6
    370c:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    3710:	ea 94       	dec	r14
    3712:	8e 2d       	mov	r24, r14
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	08 17       	cp	r16, r24
    3718:	19 07       	cpc	r17, r25
    371a:	a8 f3       	brcs	.-22     	; 0x3706 <vfprintf+0x194>
    371c:	0e c0       	rjmp	.+28     	; 0x373a <vfprintf+0x1c8>
    371e:	f6 01       	movw	r30, r12
    3720:	f7 fc       	sbrc	r15, 7
    3722:	85 91       	lpm	r24, Z+
    3724:	f7 fe       	sbrs	r15, 7
    3726:	81 91       	ld	r24, Z+
    3728:	6f 01       	movw	r12, r30
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	b3 01       	movw	r22, r6
    372e:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    3732:	e1 10       	cpse	r14, r1
    3734:	ea 94       	dec	r14
    3736:	01 50       	subi	r16, 0x01	; 1
    3738:	10 40       	sbci	r17, 0x00	; 0
    373a:	01 15       	cp	r16, r1
    373c:	11 05       	cpc	r17, r1
    373e:	79 f7       	brne	.-34     	; 0x371e <vfprintf+0x1ac>
    3740:	ea c0       	rjmp	.+468    	; 0x3916 <vfprintf+0x3a4>
    3742:	94 36       	cpi	r25, 0x64	; 100
    3744:	11 f0       	breq	.+4      	; 0x374a <vfprintf+0x1d8>
    3746:	99 36       	cpi	r25, 0x69	; 105
    3748:	69 f5       	brne	.+90     	; 0x37a4 <vfprintf+0x232>
    374a:	f7 fe       	sbrs	r15, 7
    374c:	08 c0       	rjmp	.+16     	; 0x375e <vfprintf+0x1ec>
    374e:	f5 01       	movw	r30, r10
    3750:	20 81       	ld	r18, Z
    3752:	31 81       	ldd	r19, Z+1	; 0x01
    3754:	42 81       	ldd	r20, Z+2	; 0x02
    3756:	53 81       	ldd	r21, Z+3	; 0x03
    3758:	84 e0       	ldi	r24, 0x04	; 4
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	0a c0       	rjmp	.+20     	; 0x3772 <vfprintf+0x200>
    375e:	f5 01       	movw	r30, r10
    3760:	80 81       	ld	r24, Z
    3762:	91 81       	ldd	r25, Z+1	; 0x01
    3764:	9c 01       	movw	r18, r24
    3766:	44 27       	eor	r20, r20
    3768:	37 fd       	sbrc	r19, 7
    376a:	40 95       	com	r20
    376c:	54 2f       	mov	r21, r20
    376e:	82 e0       	ldi	r24, 0x02	; 2
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	a8 0e       	add	r10, r24
    3774:	b9 1e       	adc	r11, r25
    3776:	9f e6       	ldi	r25, 0x6F	; 111
    3778:	f9 22       	and	r15, r25
    377a:	57 ff       	sbrs	r21, 7
    377c:	09 c0       	rjmp	.+18     	; 0x3790 <vfprintf+0x21e>
    377e:	50 95       	com	r21
    3780:	40 95       	com	r20
    3782:	30 95       	com	r19
    3784:	21 95       	neg	r18
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	4f 4f       	sbci	r20, 0xFF	; 255
    378a:	5f 4f       	sbci	r21, 0xFF	; 255
    378c:	e0 e8       	ldi	r30, 0x80	; 128
    378e:	fe 2a       	or	r15, r30
    3790:	ca 01       	movw	r24, r20
    3792:	b9 01       	movw	r22, r18
    3794:	a1 01       	movw	r20, r2
    3796:	2a e0       	ldi	r18, 0x0A	; 10
    3798:	30 e0       	ldi	r19, 0x00	; 0
    379a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__ultoa_invert>
    379e:	d8 2e       	mov	r13, r24
    37a0:	d2 18       	sub	r13, r2
    37a2:	40 c0       	rjmp	.+128    	; 0x3824 <vfprintf+0x2b2>
    37a4:	95 37       	cpi	r25, 0x75	; 117
    37a6:	29 f4       	brne	.+10     	; 0x37b2 <vfprintf+0x240>
    37a8:	1f 2d       	mov	r17, r15
    37aa:	1f 7e       	andi	r17, 0xEF	; 239
    37ac:	2a e0       	ldi	r18, 0x0A	; 10
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	1d c0       	rjmp	.+58     	; 0x37ec <vfprintf+0x27a>
    37b2:	1f 2d       	mov	r17, r15
    37b4:	19 7f       	andi	r17, 0xF9	; 249
    37b6:	9f 36       	cpi	r25, 0x6F	; 111
    37b8:	61 f0       	breq	.+24     	; 0x37d2 <vfprintf+0x260>
    37ba:	90 37       	cpi	r25, 0x70	; 112
    37bc:	20 f4       	brcc	.+8      	; 0x37c6 <vfprintf+0x254>
    37be:	98 35       	cpi	r25, 0x58	; 88
    37c0:	09 f0       	breq	.+2      	; 0x37c4 <vfprintf+0x252>
    37c2:	ac c0       	rjmp	.+344    	; 0x391c <vfprintf+0x3aa>
    37c4:	0f c0       	rjmp	.+30     	; 0x37e4 <vfprintf+0x272>
    37c6:	90 37       	cpi	r25, 0x70	; 112
    37c8:	39 f0       	breq	.+14     	; 0x37d8 <vfprintf+0x266>
    37ca:	98 37       	cpi	r25, 0x78	; 120
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <vfprintf+0x25e>
    37ce:	a6 c0       	rjmp	.+332    	; 0x391c <vfprintf+0x3aa>
    37d0:	04 c0       	rjmp	.+8      	; 0x37da <vfprintf+0x268>
    37d2:	28 e0       	ldi	r18, 0x08	; 8
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	0a c0       	rjmp	.+20     	; 0x37ec <vfprintf+0x27a>
    37d8:	10 61       	ori	r17, 0x10	; 16
    37da:	14 fd       	sbrc	r17, 4
    37dc:	14 60       	ori	r17, 0x04	; 4
    37de:	20 e1       	ldi	r18, 0x10	; 16
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <vfprintf+0x27a>
    37e4:	14 fd       	sbrc	r17, 4
    37e6:	16 60       	ori	r17, 0x06	; 6
    37e8:	20 e1       	ldi	r18, 0x10	; 16
    37ea:	32 e0       	ldi	r19, 0x02	; 2
    37ec:	17 ff       	sbrs	r17, 7
    37ee:	08 c0       	rjmp	.+16     	; 0x3800 <vfprintf+0x28e>
    37f0:	f5 01       	movw	r30, r10
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	44 e0       	ldi	r20, 0x04	; 4
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	08 c0       	rjmp	.+16     	; 0x3810 <vfprintf+0x29e>
    3800:	f5 01       	movw	r30, r10
    3802:	80 81       	ld	r24, Z
    3804:	91 81       	ldd	r25, Z+1	; 0x01
    3806:	bc 01       	movw	r22, r24
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	42 e0       	ldi	r20, 0x02	; 2
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	a4 0e       	add	r10, r20
    3812:	b5 1e       	adc	r11, r21
    3814:	a1 01       	movw	r20, r2
    3816:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__ultoa_invert>
    381a:	d8 2e       	mov	r13, r24
    381c:	d2 18       	sub	r13, r2
    381e:	8f e7       	ldi	r24, 0x7F	; 127
    3820:	f8 2e       	mov	r15, r24
    3822:	f1 22       	and	r15, r17
    3824:	f6 fe       	sbrs	r15, 6
    3826:	0b c0       	rjmp	.+22     	; 0x383e <vfprintf+0x2cc>
    3828:	5e ef       	ldi	r21, 0xFE	; 254
    382a:	f5 22       	and	r15, r21
    382c:	d9 14       	cp	r13, r9
    382e:	38 f4       	brcc	.+14     	; 0x383e <vfprintf+0x2cc>
    3830:	f4 fe       	sbrs	r15, 4
    3832:	07 c0       	rjmp	.+14     	; 0x3842 <vfprintf+0x2d0>
    3834:	f2 fc       	sbrc	r15, 2
    3836:	05 c0       	rjmp	.+10     	; 0x3842 <vfprintf+0x2d0>
    3838:	8f ee       	ldi	r24, 0xEF	; 239
    383a:	f8 22       	and	r15, r24
    383c:	02 c0       	rjmp	.+4      	; 0x3842 <vfprintf+0x2d0>
    383e:	1d 2d       	mov	r17, r13
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <vfprintf+0x2d2>
    3842:	19 2d       	mov	r17, r9
    3844:	f4 fe       	sbrs	r15, 4
    3846:	0d c0       	rjmp	.+26     	; 0x3862 <vfprintf+0x2f0>
    3848:	fe 01       	movw	r30, r28
    384a:	ed 0d       	add	r30, r13
    384c:	f1 1d       	adc	r31, r1
    384e:	80 81       	ld	r24, Z
    3850:	80 33       	cpi	r24, 0x30	; 48
    3852:	19 f4       	brne	.+6      	; 0x385a <vfprintf+0x2e8>
    3854:	99 ee       	ldi	r25, 0xE9	; 233
    3856:	f9 22       	and	r15, r25
    3858:	08 c0       	rjmp	.+16     	; 0x386a <vfprintf+0x2f8>
    385a:	1f 5f       	subi	r17, 0xFF	; 255
    385c:	f2 fe       	sbrs	r15, 2
    385e:	05 c0       	rjmp	.+10     	; 0x386a <vfprintf+0x2f8>
    3860:	03 c0       	rjmp	.+6      	; 0x3868 <vfprintf+0x2f6>
    3862:	8f 2d       	mov	r24, r15
    3864:	86 78       	andi	r24, 0x86	; 134
    3866:	09 f0       	breq	.+2      	; 0x386a <vfprintf+0x2f8>
    3868:	1f 5f       	subi	r17, 0xFF	; 255
    386a:	0f 2d       	mov	r16, r15
    386c:	f3 fc       	sbrc	r15, 3
    386e:	14 c0       	rjmp	.+40     	; 0x3898 <vfprintf+0x326>
    3870:	f0 fe       	sbrs	r15, 0
    3872:	0f c0       	rjmp	.+30     	; 0x3892 <vfprintf+0x320>
    3874:	1e 15       	cp	r17, r14
    3876:	10 f0       	brcs	.+4      	; 0x387c <vfprintf+0x30a>
    3878:	9d 2c       	mov	r9, r13
    387a:	0b c0       	rjmp	.+22     	; 0x3892 <vfprintf+0x320>
    387c:	9d 2c       	mov	r9, r13
    387e:	9e 0c       	add	r9, r14
    3880:	91 1a       	sub	r9, r17
    3882:	1e 2d       	mov	r17, r14
    3884:	06 c0       	rjmp	.+12     	; 0x3892 <vfprintf+0x320>
    3886:	80 e2       	ldi	r24, 0x20	; 32
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	b3 01       	movw	r22, r6
    388c:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    3890:	1f 5f       	subi	r17, 0xFF	; 255
    3892:	1e 15       	cp	r17, r14
    3894:	c0 f3       	brcs	.-16     	; 0x3886 <vfprintf+0x314>
    3896:	04 c0       	rjmp	.+8      	; 0x38a0 <vfprintf+0x32e>
    3898:	1e 15       	cp	r17, r14
    389a:	10 f4       	brcc	.+4      	; 0x38a0 <vfprintf+0x32e>
    389c:	e1 1a       	sub	r14, r17
    389e:	01 c0       	rjmp	.+2      	; 0x38a2 <vfprintf+0x330>
    38a0:	ee 24       	eor	r14, r14
    38a2:	04 ff       	sbrs	r16, 4
    38a4:	0f c0       	rjmp	.+30     	; 0x38c4 <vfprintf+0x352>
    38a6:	80 e3       	ldi	r24, 0x30	; 48
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	b3 01       	movw	r22, r6
    38ac:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    38b0:	02 ff       	sbrs	r16, 2
    38b2:	1d c0       	rjmp	.+58     	; 0x38ee <vfprintf+0x37c>
    38b4:	01 fd       	sbrc	r16, 1
    38b6:	03 c0       	rjmp	.+6      	; 0x38be <vfprintf+0x34c>
    38b8:	88 e7       	ldi	r24, 0x78	; 120
    38ba:	90 e0       	ldi	r25, 0x00	; 0
    38bc:	0e c0       	rjmp	.+28     	; 0x38da <vfprintf+0x368>
    38be:	88 e5       	ldi	r24, 0x58	; 88
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0b c0       	rjmp	.+22     	; 0x38da <vfprintf+0x368>
    38c4:	80 2f       	mov	r24, r16
    38c6:	86 78       	andi	r24, 0x86	; 134
    38c8:	91 f0       	breq	.+36     	; 0x38ee <vfprintf+0x37c>
    38ca:	01 ff       	sbrs	r16, 1
    38cc:	02 c0       	rjmp	.+4      	; 0x38d2 <vfprintf+0x360>
    38ce:	8b e2       	ldi	r24, 0x2B	; 43
    38d0:	01 c0       	rjmp	.+2      	; 0x38d4 <vfprintf+0x362>
    38d2:	80 e2       	ldi	r24, 0x20	; 32
    38d4:	f7 fc       	sbrc	r15, 7
    38d6:	8d e2       	ldi	r24, 0x2D	; 45
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	b3 01       	movw	r22, r6
    38dc:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    38e0:	06 c0       	rjmp	.+12     	; 0x38ee <vfprintf+0x37c>
    38e2:	80 e3       	ldi	r24, 0x30	; 48
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	b3 01       	movw	r22, r6
    38e8:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    38ec:	9a 94       	dec	r9
    38ee:	d9 14       	cp	r13, r9
    38f0:	c0 f3       	brcs	.-16     	; 0x38e2 <vfprintf+0x370>
    38f2:	da 94       	dec	r13
    38f4:	f1 01       	movw	r30, r2
    38f6:	ed 0d       	add	r30, r13
    38f8:	f1 1d       	adc	r31, r1
    38fa:	80 81       	ld	r24, Z
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	b3 01       	movw	r22, r6
    3900:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    3904:	dd 20       	and	r13, r13
    3906:	a9 f7       	brne	.-22     	; 0x38f2 <vfprintf+0x380>
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <vfprintf+0x3a4>
    390a:	80 e2       	ldi	r24, 0x20	; 32
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	b3 01       	movw	r22, r6
    3910:	0e 94 ac 1c 	call	0x3958	; 0x3958 <fputc>
    3914:	ea 94       	dec	r14
    3916:	ee 20       	and	r14, r14
    3918:	c1 f7       	brne	.-16     	; 0x390a <vfprintf+0x398>
    391a:	43 ce       	rjmp	.-890    	; 0x35a2 <vfprintf+0x30>
    391c:	f3 01       	movw	r30, r6
    391e:	66 81       	ldd	r22, Z+6	; 0x06
    3920:	77 81       	ldd	r23, Z+7	; 0x07
    3922:	cb 01       	movw	r24, r22
    3924:	2b 96       	adiw	r28, 0x0b	; 11
    3926:	e2 e1       	ldi	r30, 0x12	; 18
    3928:	0c 94 52 1d 	jmp	0x3aa4	; 0x3aa4 <__epilogue_restores__>

0000392c <strnlen_P>:
    392c:	fc 01       	movw	r30, r24
    392e:	05 90       	lpm	r0, Z+
    3930:	61 50       	subi	r22, 0x01	; 1
    3932:	70 40       	sbci	r23, 0x00	; 0
    3934:	01 10       	cpse	r0, r1
    3936:	d8 f7       	brcc	.-10     	; 0x392e <strnlen_P+0x2>
    3938:	80 95       	com	r24
    393a:	90 95       	com	r25
    393c:	8e 0f       	add	r24, r30
    393e:	9f 1f       	adc	r25, r31
    3940:	08 95       	ret

00003942 <strnlen>:
    3942:	fc 01       	movw	r30, r24
    3944:	61 50       	subi	r22, 0x01	; 1
    3946:	70 40       	sbci	r23, 0x00	; 0
    3948:	01 90       	ld	r0, Z+
    394a:	01 10       	cpse	r0, r1
    394c:	d8 f7       	brcc	.-10     	; 0x3944 <strnlen+0x2>
    394e:	80 95       	com	r24
    3950:	90 95       	com	r25
    3952:	8e 0f       	add	r24, r30
    3954:	9f 1f       	adc	r25, r31
    3956:	08 95       	ret

00003958 <fputc>:
    3958:	0f 93       	push	r16
    395a:	1f 93       	push	r17
    395c:	cf 93       	push	r28
    395e:	df 93       	push	r29
    3960:	8c 01       	movw	r16, r24
    3962:	eb 01       	movw	r28, r22
    3964:	8b 81       	ldd	r24, Y+3	; 0x03
    3966:	81 ff       	sbrs	r24, 1
    3968:	1b c0       	rjmp	.+54     	; 0x39a0 <fputc+0x48>
    396a:	82 ff       	sbrs	r24, 2
    396c:	0d c0       	rjmp	.+26     	; 0x3988 <fputc+0x30>
    396e:	2e 81       	ldd	r18, Y+6	; 0x06
    3970:	3f 81       	ldd	r19, Y+7	; 0x07
    3972:	8c 81       	ldd	r24, Y+4	; 0x04
    3974:	9d 81       	ldd	r25, Y+5	; 0x05
    3976:	28 17       	cp	r18, r24
    3978:	39 07       	cpc	r19, r25
    397a:	64 f4       	brge	.+24     	; 0x3994 <fputc+0x3c>
    397c:	e8 81       	ld	r30, Y
    397e:	f9 81       	ldd	r31, Y+1	; 0x01
    3980:	01 93       	st	Z+, r16
    3982:	f9 83       	std	Y+1, r31	; 0x01
    3984:	e8 83       	st	Y, r30
    3986:	06 c0       	rjmp	.+12     	; 0x3994 <fputc+0x3c>
    3988:	e8 85       	ldd	r30, Y+8	; 0x08
    398a:	f9 85       	ldd	r31, Y+9	; 0x09
    398c:	80 2f       	mov	r24, r16
    398e:	09 95       	icall
    3990:	89 2b       	or	r24, r25
    3992:	31 f4       	brne	.+12     	; 0x39a0 <fputc+0x48>
    3994:	8e 81       	ldd	r24, Y+6	; 0x06
    3996:	9f 81       	ldd	r25, Y+7	; 0x07
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	9f 83       	std	Y+7, r25	; 0x07
    399c:	8e 83       	std	Y+6, r24	; 0x06
    399e:	02 c0       	rjmp	.+4      	; 0x39a4 <fputc+0x4c>
    39a0:	0f ef       	ldi	r16, 0xFF	; 255
    39a2:	1f ef       	ldi	r17, 0xFF	; 255
    39a4:	c8 01       	movw	r24, r16
    39a6:	df 91       	pop	r29
    39a8:	cf 91       	pop	r28
    39aa:	1f 91       	pop	r17
    39ac:	0f 91       	pop	r16
    39ae:	08 95       	ret

000039b0 <__ultoa_invert>:
    39b0:	fa 01       	movw	r30, r20
    39b2:	aa 27       	eor	r26, r26
    39b4:	28 30       	cpi	r18, 0x08	; 8
    39b6:	51 f1       	breq	.+84     	; 0x3a0c <__ultoa_invert+0x5c>
    39b8:	20 31       	cpi	r18, 0x10	; 16
    39ba:	81 f1       	breq	.+96     	; 0x3a1c <__ultoa_invert+0x6c>
    39bc:	e8 94       	clt
    39be:	6f 93       	push	r22
    39c0:	6e 7f       	andi	r22, 0xFE	; 254
    39c2:	6e 5f       	subi	r22, 0xFE	; 254
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	8f 4f       	sbci	r24, 0xFF	; 255
    39c8:	9f 4f       	sbci	r25, 0xFF	; 255
    39ca:	af 4f       	sbci	r26, 0xFF	; 255
    39cc:	b1 e0       	ldi	r27, 0x01	; 1
    39ce:	3e d0       	rcall	.+124    	; 0x3a4c <__ultoa_invert+0x9c>
    39d0:	b4 e0       	ldi	r27, 0x04	; 4
    39d2:	3c d0       	rcall	.+120    	; 0x3a4c <__ultoa_invert+0x9c>
    39d4:	67 0f       	add	r22, r23
    39d6:	78 1f       	adc	r23, r24
    39d8:	89 1f       	adc	r24, r25
    39da:	9a 1f       	adc	r25, r26
    39dc:	a1 1d       	adc	r26, r1
    39de:	68 0f       	add	r22, r24
    39e0:	79 1f       	adc	r23, r25
    39e2:	8a 1f       	adc	r24, r26
    39e4:	91 1d       	adc	r25, r1
    39e6:	a1 1d       	adc	r26, r1
    39e8:	6a 0f       	add	r22, r26
    39ea:	71 1d       	adc	r23, r1
    39ec:	81 1d       	adc	r24, r1
    39ee:	91 1d       	adc	r25, r1
    39f0:	a1 1d       	adc	r26, r1
    39f2:	20 d0       	rcall	.+64     	; 0x3a34 <__ultoa_invert+0x84>
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <__ultoa_invert+0x48>
    39f6:	68 94       	set
    39f8:	3f 91       	pop	r19
    39fa:	2a e0       	ldi	r18, 0x0A	; 10
    39fc:	26 9f       	mul	r18, r22
    39fe:	11 24       	eor	r1, r1
    3a00:	30 19       	sub	r19, r0
    3a02:	30 5d       	subi	r19, 0xD0	; 208
    3a04:	31 93       	st	Z+, r19
    3a06:	de f6       	brtc	.-74     	; 0x39be <__ultoa_invert+0xe>
    3a08:	cf 01       	movw	r24, r30
    3a0a:	08 95       	ret
    3a0c:	46 2f       	mov	r20, r22
    3a0e:	47 70       	andi	r20, 0x07	; 7
    3a10:	40 5d       	subi	r20, 0xD0	; 208
    3a12:	41 93       	st	Z+, r20
    3a14:	b3 e0       	ldi	r27, 0x03	; 3
    3a16:	0f d0       	rcall	.+30     	; 0x3a36 <__ultoa_invert+0x86>
    3a18:	c9 f7       	brne	.-14     	; 0x3a0c <__ultoa_invert+0x5c>
    3a1a:	f6 cf       	rjmp	.-20     	; 0x3a08 <__ultoa_invert+0x58>
    3a1c:	46 2f       	mov	r20, r22
    3a1e:	4f 70       	andi	r20, 0x0F	; 15
    3a20:	40 5d       	subi	r20, 0xD0	; 208
    3a22:	4a 33       	cpi	r20, 0x3A	; 58
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <__ultoa_invert+0x7c>
    3a26:	49 5d       	subi	r20, 0xD9	; 217
    3a28:	31 fd       	sbrc	r19, 1
    3a2a:	40 52       	subi	r20, 0x20	; 32
    3a2c:	41 93       	st	Z+, r20
    3a2e:	02 d0       	rcall	.+4      	; 0x3a34 <__ultoa_invert+0x84>
    3a30:	a9 f7       	brne	.-22     	; 0x3a1c <__ultoa_invert+0x6c>
    3a32:	ea cf       	rjmp	.-44     	; 0x3a08 <__ultoa_invert+0x58>
    3a34:	b4 e0       	ldi	r27, 0x04	; 4
    3a36:	a6 95       	lsr	r26
    3a38:	97 95       	ror	r25
    3a3a:	87 95       	ror	r24
    3a3c:	77 95       	ror	r23
    3a3e:	67 95       	ror	r22
    3a40:	ba 95       	dec	r27
    3a42:	c9 f7       	brne	.-14     	; 0x3a36 <__ultoa_invert+0x86>
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	61 05       	cpc	r22, r1
    3a48:	71 05       	cpc	r23, r1
    3a4a:	08 95       	ret
    3a4c:	9b 01       	movw	r18, r22
    3a4e:	ac 01       	movw	r20, r24
    3a50:	0a 2e       	mov	r0, r26
    3a52:	06 94       	lsr	r0
    3a54:	57 95       	ror	r21
    3a56:	47 95       	ror	r20
    3a58:	37 95       	ror	r19
    3a5a:	27 95       	ror	r18
    3a5c:	ba 95       	dec	r27
    3a5e:	c9 f7       	brne	.-14     	; 0x3a52 <__ultoa_invert+0xa2>
    3a60:	62 0f       	add	r22, r18
    3a62:	73 1f       	adc	r23, r19
    3a64:	84 1f       	adc	r24, r20
    3a66:	95 1f       	adc	r25, r21
    3a68:	a0 1d       	adc	r26, r0
    3a6a:	08 95       	ret

00003a6c <__prologue_saves__>:
    3a6c:	2f 92       	push	r2
    3a6e:	3f 92       	push	r3
    3a70:	4f 92       	push	r4
    3a72:	5f 92       	push	r5
    3a74:	6f 92       	push	r6
    3a76:	7f 92       	push	r7
    3a78:	8f 92       	push	r8
    3a7a:	9f 92       	push	r9
    3a7c:	af 92       	push	r10
    3a7e:	bf 92       	push	r11
    3a80:	cf 92       	push	r12
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	ff 92       	push	r15
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	ca 1b       	sub	r28, r26
    3a96:	db 0b       	sbc	r29, r27
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
    3aa2:	09 94       	ijmp

00003aa4 <__epilogue_restores__>:
    3aa4:	2a 88       	ldd	r2, Y+18	; 0x12
    3aa6:	39 88       	ldd	r3, Y+17	; 0x11
    3aa8:	48 88       	ldd	r4, Y+16	; 0x10
    3aaa:	5f 84       	ldd	r5, Y+15	; 0x0f
    3aac:	6e 84       	ldd	r6, Y+14	; 0x0e
    3aae:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ab0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ab2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ab4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ab6:	b9 84       	ldd	r11, Y+9	; 0x09
    3ab8:	c8 84       	ldd	r12, Y+8	; 0x08
    3aba:	df 80       	ldd	r13, Y+7	; 0x07
    3abc:	ee 80       	ldd	r14, Y+6	; 0x06
    3abe:	fd 80       	ldd	r15, Y+5	; 0x05
    3ac0:	0c 81       	ldd	r16, Y+4	; 0x04
    3ac2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ac4:	aa 81       	ldd	r26, Y+2	; 0x02
    3ac6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ac8:	ce 0f       	add	r28, r30
    3aca:	d1 1d       	adc	r29, r1
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	ed 01       	movw	r28, r26
    3ad8:	08 95       	ret

00003ada <_exit>:
    3ada:	f8 94       	cli

00003adc <__stop_program>:
    3adc:	ff cf       	rjmp	.-2      	; 0x3adc <__stop_program>
