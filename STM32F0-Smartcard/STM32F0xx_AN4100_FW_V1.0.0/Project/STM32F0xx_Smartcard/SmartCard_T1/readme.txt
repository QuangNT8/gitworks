/**
  @page Smartcard (T=1) AN4100 Smartcard Readme file
  
  @verbatim
  ******************* (C) COPYRIGHT 2013 STMicroelectronics ********************
  * @file    SmartCard_T1/readme.txt 
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    13-May-2013
  * @brief   Description of the AN4100 "SmartCard_T1 interface with the STM32F0xx
  *          microcontrollers".
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim
 
@par Example Description 

This AN describes how to use the Smartcard T=1 protocol driver and communicates
with a Java Card. It consists of sending some APDU commands such as Select File,
Read File and Write File.

At the first time, the demo applies the "Answer To Reset" procedure and then 
configures the smartcard interface and the T=1 protocol according to the received
ATR. After that, the demo sends an IFSD request indicating that the Reader would
extend the length of the information field of the block from 32 to 254. Then, it 
starts sending/receiving APDUs commands/responses in the following sequence:
  1- Select file having ID = 0x0001.
  2- Read file: read 256 bytes from the same file (to view initial data saved in
  the file)
  3- Write file: write 0x0 to 0xFF to this file.
  4- Read file: read 256 bytes from the file (to verify the data written).
  5- Write file: write 0xFF to 0x0 to this file.
  6- Read file: read 256 bytes from the file (to verify the data written).
  7- Demo END.

The main purpose of this firmware package is to provide resources facilitating
the development of SmartCard (T=1) application using the USART peripheral with
the STM32F0xx microcontrollers.

 
- Software Description

Received data correctness is signaled by LED lightening and though as follow:
    -  Card not inserted or not detected ==> LD3 ON and LD1,LD2,LD4 OFF 
    -  Card detected but not supported ==> LD2 ON and LD1,LD3,LD4 OFF 
    -  Card detected and supported ==> LD1 ON and LD2,LD3,LD4 OFF
    -  Read/Write operations executed ==> LD1, LD2, LD3 and LD4 are ON
    
@note Please insert card only after reset.
    
Protocol parameters and data could be watched using the following variables:
    -  "ATR_buf" to watch answer to reset response. 
    -  "CardClkFreq" to watch smartcard clock in Hz.
    -  "SC_baud" to watch smartcard baudrate.
    -  "etu_usec" to watch elementary time unit in µs
    -  "R_APDU" to watch write/read operations responses.
 

@par Directory contents 

+ inc 
    - Smartcard_T1/inc/platform_config.h     Evaluation board specific configuration file
    - SmartCard_TT/inc/stm32f0xx_conf.h      Library Configuration file
    - SmartCard_T1/inc/stm32f0xx_it.h        Interrupt handlers header file
    - SmartCard_T1/src/t1_hal.h              Smart Card Functions prototypes
    - SmartCard_T1/inc/t1_protocol.h         T=1 protocol functions prototypes
    - SmartCard_T1/inc/t1_protocol_param.h   T=1 parameters configuration functions prototypes
    - SmartCard_T1/inc/pps.h                 PPS functions prototypes 
    - SmartCard_T1/inc/checksum.h            Checksum functions prototypes
    - SmartCard_T1/inc/buffer.h              Buffer management functions prototypes
    - SmartCard_T1/inc/atr.h                 ATR functions prototypes


+ src 
    - SmartCard_T1/src/stm32f0xx_it.c      Interrupt handlers
    - SmartCard_T1/src/t1_hal.c            Smart Card firmware functions
    - SmartCard_T1/src/t1_protocol.c       T=1 protocol functions
    - SmartCard_T1/src/t1_protocol_param.c T=1 parameters configuration functions
    - SmartCard_T1/src/pps.c               PPS functions for Smartcard
    - SmartCard_T1/src/checksum.c          Checksum functions
    - SmartCard_T1/src/buffer.c            Buffer management functions
    - SmartCard_T1/src/atr.c               ATR functions
    - SmartCard_T1/src/main.c              Main program  
    - SmartCard_T1/src/system_stm32f0xx.c  STM32F0xx system source file

@note The "system_stm32f0xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F0xx_Clock_Configuration_VX.Y.Z.xls" 
      provided with the AN4055 package available on <a href="http://www.st.com/internet/mcu/class/1734.jsp">  ST Microcontrollers </a>
         

@par Hardware and Software environment

  - This example runs on STM32F0xx Devices.
  
  - This example has been tested with STMicroelectronics STM320518-EVAL 
    evaluation board with an external SmartCard reader (can be for example 
    an STM32 EVAL board having SmartCard connector, ex. STM3210E-EVAL board)
  
  - STM320518-EVAL Set-up
    - Connect (with a wire) external SmartCard CLK  pin to PA.08 pin.
    - Connect (with a wire) external SmartCard IO   pin to PA.09 pin.
    - Connect (with a wire) external SmartCard RST  pin to PB.15 pin.
    - Connect (with a wire) external SmartCard Vcc  pin to PC.13 pin. 
    - Connect (with a wire) external SmartCard OFF  pin to PA.11 pin.
    - Connect (with a wire) external SmartCard 3/5V pin to PA.12 pin.
    - use a common ground     
    
   @note For more details, please refer to chapter 2 in AN4100.       


@par How to use it ? 

 - EWARM
    - Open the Project.eww workspace
    - Rebuild all files: Project->Rebuild all
    - Load project image: Project->Debug
    - Run program: Debug->Go(F5)

 - MDK-ARM 
    - Open the Project.uvproj project
    - Rebuild all files: Project->Rebuild all target files
    - Load project image: Debug->Start/Stop Debug Session
    - Run program: Debug->Run (F5)

 - TASKING
    - Open TASKING toolchain.
    - Click on File->Import, select General->'Existing Projects into Workspace' 
      and then click "Next". 
    - Browse to the TASKING workspace directory and select the project: STM320518-EVAL
     - Rebuild all project files: Select the project in the "Project explorer" 
       window then click on Project->build project menu.
    - Run program: Select the project in the "Project explorer" window then click 
      Run->Debug (F11)

 - TrueSTUDIO   
    - Open the TrueSTUDIO toolchain.
    - Click on File->Switch Workspace->Other and browse to TrueSTUDIO workspace 
      directory.
    - Click on File->Import, select General->'Existing Projects into Workspace' 
      and then click "Next". 
    - Browse to the TrueSTUDIO workspace directory and select the project: STM320518-EVAL
    - Rebuild all project files: Select the project in the "Project explorer" 
      window then click on Project->build project menu.
    - Run program: Select the project in the "Project explorer" window then click 
      Run->Debug (F11)

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
