C L "MAIN" 0 13 7 "FUNCTION"
D G "__PCH__" 0 64 ""5.025""
D G "__DEVICE__" 0 64 "0"
D G "__DATE__" 0 64 ""24-Sep-21""
D G "__TIME__" 0 64 ""17:59:42""
D G "LED" 0 2 "PIN_A6"
D G "dis_rev" 1 5 "#ASM BCF    0xF94.7 #ENDASM"
D G "debug" 1 8 ""
D G "debugkb" 1 9 ""
D G "PIC26" 1 11 ""
D G "SIM900" 1 12 ""
D G "twonumber" 1 13 ""
c L "set_tris_a" 2 1 6 "FUNCTION"
v L "value" 2 44 "int8" `54 
f B "set_tris_a" 2 44 "void(int8 value)" `53 
v L "value" 2 45 "int8" `56 
f B "set_tris_b" 2 45 "void(int8 value)" `55 
v L "value" 2 46 "int8" `58 
f B "set_tris_c" 2 46 "void(int8 value)" `57 
f B "get_tris_a" 2 47 "int8()" `59 
f B "get_tris_b" 2 48 "int8()" `60 
f B "get_tris_c" 2 49 "int8()" `61 
v L "value" 2 50 "int8" `63 
f B "output_a" 2 50 "void(int8 value)" `62 
v L "value" 2 51 "int8" `65 
f B "output_b" 2 51 "void(int8 value)" `64 
v L "value" 2 52 "int8" `67 
f B "output_c" 2 52 "void(int8 value)" `66 
f B "input_a" 2 53 "int8()" `68 
f B "input_b" 2 54 "int8()" `69 
f B "input_c" 2 55 "int8()" `70 
f B "input_change_a" 2 56 "int8()" `71 
f B "input_change_b" 2 57 "int8()" `72 
f B "input_change_c" 2 58 "int8()" `73 
v L "pin" 2 59 "int16" `75 
f B "input" 2 59 "int8(int16 pin)" `74 
v L "pin" 2 60 "int16" `77 
f B "input_state" 2 60 "int8(int16 pin)" `76 
v L "pin" 2 61 "int16" `79 
f B "output_low" 2 61 "void(int16 pin)" `78 
v L "pin" 2 62 "int16" `81 
f B "output_high" 2 62 "void(int16 pin)" `80 
v L "pin" 2 63 "int16" `83 
f B "output_toggle" 2 63 "void(int16 pin)" `82 
v L "pin" 2 64 "int16" `85 
v L "level" 2 64 "int8" `86 
f B "output_bit" 2 64 "void(int16 pin,int8 level)" `84 
v L "pin" 2 65 "int16" `88 
f B "output_float" 2 65 "void(int16 pin)" `87 
v L "pin" 2 66 "int16" `90 
f B "output_drive" 2 66 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 70 "31744"
d G "PIN_A1" 2 71 "31745"
d G "PIN_A2" 2 72 "31746"
d G "PIN_A3" 2 73 "31747"
d G "PIN_A5" 2 74 "31749"
d G "PIN_A6" 2 75 "31750"
d G "PIN_A7" 2 76 "31751"
d G "PIN_B0" 2 78 "31752"
d G "PIN_B1" 2 79 "31753"
d G "PIN_B2" 2 80 "31754"
d G "PIN_B3" 2 81 "31755"
d G "PIN_B4" 2 82 "31756"
d G "PIN_B5" 2 83 "31757"
d G "PIN_B6" 2 84 "31758"
d G "PIN_B7" 2 85 "31759"
d G "PIN_C0" 2 87 "31760"
d G "PIN_C1" 2 88 "31761"
d G "PIN_C2" 2 89 "31762"
d G "PIN_C3" 2 90 "31763"
d G "PIN_C4" 2 91 "31764"
d G "PIN_C5" 2 92 "31765"
d G "PIN_C6" 2 93 "31766"
d G "PIN_C7" 2 94 "31767"
d G "FALSE" 2 97 "0"
d G "TRUE" 2 98 "1"
d G "BYTE" 2 100 "int8"
d G "BOOLEAN" 2 101 "int1"
d G "getc" 2 103 "getch"
d G "fgetc" 2 104 "getch"
d G "getchar" 2 105 "getch"
d G "putc" 2 106 "putchar"
d G "fputc" 2 107 "putchar"
d G "fgets" 2 108 "gets"
d G "fputs" 2 109 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f B "restart_cause" 2 114 "int8()" `91 
f B "reset_cpu" 2 115 "void()" `92 
f B "sleep" 2 116 "void()" `93 
v L "type" 2 117 "int8" `95 
f G "sleep" 2 117 "void(int8 type)" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 119 "7"
d G "MCLR_FROM_SLEEP" 2 120 "11"
d G "MCLR_FROM_RUN" 2 121 "15"
d G "NORMAL_POWER_UP" 2 122 "12"
d G "BROWNOUT_RESTART" 2 123 "14"
d G "WDT_FROM_SLEEP" 2 124 "3"
d G "RESET_INSTRUCTION" 2 125 "0"
d G "POR_FROM_DS" 2 127 "0x0100"
d G "MCLR_FROM_DS" 2 128 "0x0400"
d G "RTC_FROM_DS" 2 129 "0x0800"
d G "DSWDT_FROM_DS" 2 130 "0x1000"
d G "ULPWU_FROM_DS" 2 131 "0x2000"
d G "FAULT_FROM_DS" 2 132 "0x8000"
d G "EXT_FROM_DS" 2 133 "0x0200"
d G "DEEP_SLEEP" 2 136 "3"
d G "WAKE_FROM_RTCC" 2 138 "4" "Wake-up from RTCC is enabled"
d G "WAKE_FROM_ULP" 2 139 "8" "ULPWU module is enabled in Deep Sleep"
d G "REG_LOW_POWER" 2 145 "2"
d G "REG_NORMAL" 2 146 "0" "default"
d G "SLEEP_FULL" 2 149 "0" "Default"
d G "SLEEP_IDLE" 2 150 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
v L "mode" 2 157 "int8" `99 
f B "setup_timer_0" 2 157 "void(int8 mode)" `98 
v L "value" 2 158 "int16" `101 
f B "set_timer0" 2 158 "void(int16 value)" `100 
f B "get_timer0" 2 159 "int16()" `102 
v L "mode" 2 160 "int8" `104 
v L "prescaler" 2 160 "int8" `105 
f B "setup_counters" 2 160 "void(int8 mode,int8 prescaler)" `103 
v L "value" 2 161 "int16" `107 
f B "set_rtcc" 2 161 "void(int16 value)" `106 
f B "get_rtcc" 2 162 "int16()" `108  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 164 "0"
d G "T0_EXT_L_TO_H" 2 165 "32"
d G "T0_EXT_H_TO_L" 2 166 "48"
d G "T0_DIV_1" 2 168 "8"
d G "T0_DIV_2" 2 169 "0"
d G "T0_DIV_4" 2 170 "1"
d G "T0_DIV_8" 2 171 "2"
d G "T0_DIV_16" 2 172 "3"
d G "T0_DIV_32" 2 173 "4"
d G "T0_DIV_64" 2 174 "5"
d G "T0_DIV_128" 2 175 "6"
d G "T0_DIV_256" 2 176 "7"
d G "T0_OFF" 2 178 "0x80"
d G "T0_8_BIT" 2 180 "0x40"
d G "RTCC_INTERNAL" 2 182 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 183 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 184 "48"
d G "RTCC_DIV_1" 2 185 "8"
d G "RTCC_DIV_2" 2 186 "0"
d G "RTCC_DIV_4" 2 187 "1"
d G "RTCC_DIV_8" 2 188 "2"
d G "RTCC_DIV_16" 2 189 "3"
d G "RTCC_DIV_32" 2 190 "4"
d G "RTCC_DIV_64" 2 191 "5"
d G "RTCC_DIV_128" 2 192 "6"
d G "RTCC_DIV_256" 2 193 "7"
d G "RTCC_OFF" 2 194 "0x80"
d G "RTCC_8_BIT" 2 195 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
v L "mode" 2 206 "int16" `110 
f B "setup_wdt" 2 206 "void(int16 mode)" `109 
f B "restart_wdt" 2 207 "void()" `111  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 209 "0x100"
d G "WDT_OFF" 2 210 "0"
d G "WDT_4MS" 2 212 "0x300"
d G "WDT_8MS" 2 213 "0x500"
d G "WDT_16MS" 2 214 "0x700"
d G "WDT_32MS" 2 215 "0x900"
d G "WDT_64MS" 2 216 "0xB00"
d G "WDT_128MS" 2 217 "0xD00"
d G "WDT_256MS" 2 218 "0xF00"
d G "WDT_512MS" 2 219 "0x1100"
d G "WDT_1S" 2 220 "0x1300"
d G "WDT_2S" 2 221 "0x1500"
d G "WDT_4S" 2 222 "0x1700"
d G "WDT_8S" 2 223 "0x1900"
d G "WDT_16" 2 224 "0x1B00"
d G "WDT_32S" 2 225 "0x1D00"
d G "WDT_64S" 2 226 "0x1F00"
d G "WDT_128S" 2 227 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
v L "mode" 2 232 "int16" `113 
f B "setup_timer_1" 2 232 "void(int16 mode)" `112 
f B "get_timer1" 2 233 "int16()" `114 
v L "value" 2 234 "int16" `116 
f B "set_timer1" 2 234 "void(int16 value)" `115  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 237 "0"
d G "T1_INTERNAL" 2 238 "0x07"
d G "T1_EXTERNAL" 2 239 "0x87"
d G "T1_EXTERNAL_SYNC" 2 240 "0x83"
d G "T1_FOSC" 2 241 "0x47"
d G "T1_ENABLE_T1OSC" 2 243 "0x08"
d G "T1_DIV_BY_1" 2 245 "0"
d G "T1_DIV_BY_2" 2 246 "0x10"
d G "T1_DIV_BY_4" 2 247 "0x20"
d G "T1_DIV_BY_8" 2 248 "0x30"
d G "T1_GATE" 2 250 "0x8000"
d G "T1_GATE_INVERTED" 2 251 "0xC000"
d G "T1_GATE_TOGGLE" 2 252 "0xA000"
d G "T1_GATE_SINGLE" 2 253 "0x9000"
d G "T1_GATE_TIMER0" 2 254 "0x8100"
d G "T1_GATE_TIMER2" 2 255 "0x8200"
c L "set_timer1" 2 1 3 "FUNCTION"
v L "mode" 2 260 "int8" `118 
v L "period" 2 260 "int8" `119 
v L "postscale" 2 260 "int8" `120 
f B "setup_timer_2" 2 260 "void(int8 mode,int8 period,int8 postscale)" `117 
f B "get_timer2" 2 261 "int8()" `121 
v L "value" 2 262 "int8" `123 
f B "set_timer2" 2 262 "void(int8 value)" `122  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 264 "0"
d G "T2_DIV_BY_1" 2 265 "4"
d G "T2_DIV_BY_4" 2 266 "5"
d G "T2_DIV_BY_16" 2 267 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
v L "mode" 2 272 "int16" `125 
f B "setup_timer_3" 2 272 "void(int16 mode)" `124 
f B "get_timer3" 2 273 "int16()" `126 
v L "value" 2 274 "int16" `128 
f B "set_timer3" 2 274 "void(int16 value)" `127  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 277 "0"
d G "T3_INTERNAL" 2 278 "0x07"
d G "T3_INTERNAL_TIMES_4" 2 279 "0x47"
d G "T3_EXTERNAL" 2 280 "0x87"
d G "T3_EXTERNAL_SYNC" 2 281 "0x83"
d G "T3_ENABLE_T1OSC" 2 283 "0x08"
d G "T3_DIV_BY_1" 2 285 "0"
d G "T3_DIV_BY_2" 2 286 "0x10"
d G "T3_DIV_BY_4" 2 287 "0x20"
d G "T3_DIV_BY_8" 2 288 "0x30"
d G "T3_GATE" 2 290 "0x8000"
d G "T3_GATE_INVERTED" 2 291 "0xC000"
d G "T3_GATE_TOGGLE" 2 292 "0xA000"
d G "T3_GATE_SINGLE" 2 293 "0x9000"
d G "T3_GATE_TIMER0" 2 294 "0x8100"
d G "T3_GATE_TIMER2" 2 295 "0x8200"
c L "set_timer3" 2 1 3 "FUNCTION"
v L "mode" 2 300 "int16" `130 
v L "period" 2 300 "int8" `131 
v L "postscaler" 2 300 "int8" `132 
f B "setup_timer_4" 2 300 "void(int16 mode,int8 period,int8 postscaler)" `129 
f B "get_timer4" 2 301 "int8()" `133 
v L "value" 2 302 "int8" `135 
f B "set_timer4" 2 302 "void(int8 value)" `134  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 304 "0"
d G "T4_DIV_BY_1" 2 305 "4"
d G "T4_DIV_BY_4" 2 306 "5"
d G "T4_DIV_BY_16" 2 307 "6"
c L "set_timer4" 2 1 4 "FUNCTION"
c L "set_timer4" 2 1 1 "FUNCTION"
c L "set_timer4" 2 1 1 "FUNCTION"
t G "rtc_time_t" 2 323 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `146  "RTC Prototypes:"
v L "mode" 2 325 "int32" `148 
f B "setup_rtc" 2 325 "void(int32 mode)" `147 
v L "mode" 2 326 "int32" `150 
v L "calibration" 2 326 "int8" `151 
f G "setup_rtc" 2 326 "void(int32 mode,int8 calibration)" `149 
v L "mode" 2 327 "int8" `153 
v L "mask" 2 327 "int8" `154 
v L "repeat" 2 327 "int8" `155 
f B "setup_rtc_alarm" 2 327 "void(int8 mode,int8 mask,int8 repeat)" `152 
v L "time" 2 328 "*rtc_time_t" `157 
f B "rtc_read" 2 328 "void(*rtc_time_t time)" `156 
v L "time" 2 329 "*rtc_time_t" `159 
f B "rtc_write" 2 329 "void(*rtc_time_t time)" `158 
v L "time" 2 330 "*rtc_time_t" `161 
f B "rtc_alarm_read" 2 330 "void(*rtc_time_t time)" `160 
v L "time" 2 331 "*rtc_time_t" `163 
f B "rtc_alarm_write" 2 331 "void(*rtc_time_t time)" `162  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 2 333 "0x8000"
d G "RTC_DISABLE" 2 334 "0"
d G "RTC_OUTPUT_SOURCE" 2 335 "0x20400"
d G "RTC_OUTPUT_SECONDS" 2 336 "0x10400"
d G "RTC_OUTPUT_ALARM" 2 337 "0x00400"
d G "RTC_ALARM_ENABLE" 2 340 "0x80"
d G "RTC_ALARM_DISABLE" 2 341 "0"
d G "RTC_CHIME_ENABLE" 2 342 "0x40"
d G "RTC_CHIME_DISABLE" 2 343 "0"
d G "RTC_ALARM_HALFSECOND" 2 345 "0x00"
d G "RTC_ALARM_SECOND" 2 346 "0x04"
d G "RTC_ALARM_10_SECONDS" 2 347 "0x08"
d G "RTC_ALARM_MINUTE" 2 348 "0x0C"
d G "RTC_ALARM_10_MINUTES" 2 349 "0x10"
d G "RTC_ALARM_HOUR" 2 350 "0x14"
d G "RTC_ALARM_DAY" 2 351 "0x18"
d G "RTC_ALARM_WEEK" 2 352 "0x1C"
d G "RTC_ALARM_MONTH" 2 353 "0x20"
d G "RTC_ALARM_YEAR" 2 354 "0x24"
c L "rtc_alarm_write" 2 1 4 "FUNCTION"
v L "mode" 2 360 "int32" `165 
f B "setup_ccp1" 2 360 "void(int32 mode)" `164 
v L "mode" 2 361 "int32" `167 
v L "pwm" 2 361 "int8" `168 
f G "setup_ccp1" 2 361 "void(int32 mode,int8 pwm)" `166 
v L "value" 2 362 "int16" `170 
f B "set_pwm1_duty" 2 362 "void(int16 value)" `169  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 364 "0"
d G "CCP_CAPTURE_FE" 2 365 "0x04"
d G "CCP_CAPTURE_RE" 2 366 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 367 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 368 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 369 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 370 "0x09"
d G "CCP_COMPARE_INT" 2 371 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 372 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 373 "0x0B"
d G "CCP_PWM" 2 374 "0x0C"
d G "CCP_PWM_PLUS_1" 2 375 "0x1c"
d G "CCP_PWM_PLUS_2" 2 376 "0x2c"
d G "CCP_PWM_PLUS_3" 2 377 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 384 "0x0200"
d G "T3_CCP1" 2 385 "0x0100"
d G "CCP_PWM_H_H" 2 388 "0x0c"
d G "CCP_PWM_H_L" 2 389 "0x0d"
d G "CCP_PWM_L_H" 2 390 "0x0e"
d G "CCP_PWM_L_L" 2 391 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 393 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 394 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 395 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 397 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 398 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 399 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 400 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 401 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 402 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 403 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 405 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 406 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 407 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 409 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 410 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 411 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 413 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 415 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 416 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 417 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 418 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 419 "0x10000000"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
v L "mode" 2 423 "int32" `175 
f B "setup_ccp2" 2 423 "void(int32 mode)" `174 
v L "mode" 2 424 "int32" `177 
v L "pwm" 2 424 "int8" `178 
f G "setup_ccp2" 2 424 "void(int32 mode,int8 pwm)" `176 
v L "value" 2 425 "int16" `180 
f B "set_pwm2_duty" 2 425 "void(int16 value)" `179 
c L "set_pwm2_duty" 2 1 3 "FUNCTION"
v L "mode" 2 432 "int32" `185 
f B "setup_spi" 2 432 "void(int32 mode)" `184 
v L "value" 2 433 "int8" `187 
f B "spi_write" 2 433 "void(int8 value)" `186 
f B "spi_read" 2 434 "int8()" `188 
v L "value" 2 435 "int8" `190 
f G "spi_read" 2 435 "int8(int8 value)" `189 
f B "spi_data_in" 2 436 "int8()" `191 
v L "mode" 2 437 "int32" `193 
f B "setup_spi2" 2 437 "void(int32 mode)" `192 
v L "value" 2 438 "int8" `195 
f B "spi_write2" 2 438 "void(int8 value)" `194 
f B "spi_read2" 2 439 "int8()" `196 
v L "value" 2 440 "int8" `198 
f G "spi_read2" 2 440 "int8(int8 value)" `197 
f B "spi_data_in2" 2 441 "int8()" `199  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 443 "0x00"
d G "SPI_MASTER" 2 444 "0x20"
d G "SPI_SLAVE" 2 445 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 446 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 447 "0x00"
d G "SPI_CLK_DIV_4" 2 448 "0x00"
d G "SPI_CLK_DIV_16" 2 449 "0x01"
d G "SPI_CLK_DIV_64" 2 450 "0x02"
d G "SPI_CLK_T2" 2 451 "0x03"
d G "SPI_SS_DISABLED" 2 452 "0x01"
d G "SPI_XMIT_L_TO_H" 2 454 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 455 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 457 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 458 "0x8000"
d G "SPI_L_TO_H" 2 461 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 462 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 2 "FUNCTION"
v L "baud" 2 466 "int32" `201 
f B "setup_uart" 2 466 "void(int32 baud)" `200 
v L "baud" 2 467 "int32" `203 
v L "stream" 2 467 "int8" `204 
f G "setup_uart" 2 467 "void(int32 baud,int8 stream)" `202 
v L "baud" 2 468 "int32" `206 
v L "stream" 2 468 "int8" `207 
v L "clock" 2 468 "int32" `208 
f G "setup_uart" 2 468 "void(int32 baud,int8 stream,int32 clock)" `205 
v L "baud" 2 469 "int32" `210 
f B "set_uart_speed" 2 469 "void(int32 baud)" `209 
v L "baud" 2 470 "int32" `212 
v L "stream" 2 470 "int8" `213 
f G "set_uart_speed" 2 470 "void(int32 baud,int8 stream)" `211 
v L "baud" 2 471 "int32" `215 
v L "stream" 2 471 "int8" `216 
v L "clock" 2 471 "int32" `217 
f G "set_uart_speed" 2 471 "void(int32 baud,int8 stream,int32 clock)" `214  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 475 "2"
d G "UART_DATA" 2 476 "4"
d G "UART_AUTODETECT" 2 477 "8"
d G "UART_AUTODETECT_NOWAIT" 2 478 "9"
d G "UART_WAKEUP_ON_RDA" 2 479 "10"
d G "UART_SEND_BREAK" 2 480 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 484 "int32" `219 
f B "setup_comparator" 2 484 "void(int32 mode)" `218  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 487 "0x00"
d G "NC_NC" 2 488 "0x00"
d G "CP1_VREF_F6" 2 491 "0x83"
d G "CP1_F5_F6" 2 492 "0x80"
d G "CP1_VREF_VREF" 2 493 "0x87"
d G "CP1_F5_VREF" 2 494 "0x84"
d G "CP1_OUT_ON_F2" 2 496 "0x40"
d G "CP1_INVERT" 2 497 "0x20"
d G "CP1_INT_H_TO_L" 2 498 "0x10"
d G "CP1_INT_L_TO_H" 2 499 "0x08"
d G "CP2_VREF_F4" 2 502 "0x8300"
d G "CP2_F3_F4" 2 503 "0x8000"
d G "CP2_VREF_VREF" 2 504 "0x8700"
d G "CP2_F3_VREF" 2 505 "0x8400"
d G "CP2_OUT_ON_F1" 2 507 "0x4000"
d G "CP2_INVERT" 2 508 "0x2000"
d G "CP2_INT_H_TO_L" 2 509 "0x1000"
d G "CP2_INT_L_TO_H" 2 510 "0x0800"
c L "setup_comparator" 2 1 2 "FUNCTION"
v L "mode" 2 517 "int8" `223 
f B "setup_vref" 2 517 "void(int8 mode)" `222  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 519 "0xa0"
d G "VREF_HIGH" 2 520 "0x80"
d G "VREF_F5" 2 522 "0x40"
d G "VREF_COMP" 2 523 "0x10"
c L "setup_vref" 2 1 2 "FUNCTION"
v L "mode" 2 528 "int8" `225 
f B "setup_oscillator" 2 528 "int8(int8 mode)" `224 
v L "mode" 2 529 "int8" `227 
v L "tune" 2 529 "sint8" `228 
f G "setup_oscillator" 2 529 "int8(int8 mode,sint8 tune)" `226  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 532 "0"
d G "OSC_125KHZ" 2 533 "0x10"
d G "OSC_250KHZ" 2 534 "0x20"
d G "OSC_500KHZ" 2 535 "0x30"
d G "OSC_1MHZ" 2 536 "0x40"
d G "OSC_2MHZ" 2 537 "0x50"
d G "OSC_4MHZ" 2 538 "0x60"
d G "OSC_8MHZ" 2 539 "0x70"
d G "OSC_16MHZ" 2 540 "0x4060"
d G "OSC_32MHZ" 2 541 "0x4070"
d G "OSC_TIMER1" 2 543 "1"
d G "OSC_INTRC" 2 544 "2"
d G "OSC_NORMAL" 2 545 "0"
d G "OSC_IDLE_MODE" 2 547 "0x80"
d G "OSC_31250" 2 548 "0x8000"
d G "OSC_PLL_ON" 2 549 "0x4000"
d G "OSC_PLL_OFF" 2 550 "0"
d G "OSC_STATE_STABLE" 2 554 "4"
d G "OSC_STATE_EXT_RUNNING" 2 555 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 562 "int16" `230 
f B "setup_adc" 2 562 "void(int16 mode)" `229 
f B "read_adc" 2 563 "int8()" `231 
v L "mode" 2 564 "int8" `233 
f G "read_adc" 2 564 "int8(int8 mode)" `232 
f G "read_adc" 2 565 "int16()" `234 
v L "mode" 2 566 "int8" `236 
f G "read_adc" 2 566 "int16(int8 mode)" `235 
f B "adc_done" 2 567 "int8()" `237  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 569 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 570 "0x100"
d G "ADC_CLOCK_DIV_4" 2 571 "0x04"
d G "ADC_CLOCK_DIV_8" 2 572 "0x01"
d G "ADC_CLOCK_DIV_16" 2 573 "0x05"
d G "ADC_CLOCK_DIV_32" 2 574 "0x02"
d G "ADC_CLOCK_DIV_64" 2 575 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 576 "0x03" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 578 "0x00"
d G "ADC_TAD_MUL_2" 2 579 "0x08"
d G "ADC_TAD_MUL_4" 2 580 "0x10"
d G "ADC_TAD_MUL_6" 2 581 "0x18"
d G "ADC_TAD_MUL_8" 2 582 "0x20"
d G "ADC_TAD_MUL_12" 2 583 "0x28"
d G "ADC_TAD_MUL_16" 2 584 "0x30"
d G "ADC_TAD_MUL_20" 2 585 "0x38"
c L "adc_done" 2 1 1 "FUNCTION"
v L "pins" 2 588 "int32" `239 
f B "setup_adc_ports" 2 588 "void(int32 pins)" `238 
v L "pins" 2 589 "int32" `241 
v L "reference" 2 589 "int32" `242 
f G "setup_adc_ports" 2 589 "void(int32 pins,int32 reference)" `240 
v L "channel" 2 590 "int8" `244 
f B "set_adc_channel" 2 590 "void(int8 channel)" `243  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN12" 2 594 "0x10" "| B0"
d G "sAN11" 2 595 "0x8" "| C2"
d G "sAN10" 2 596 "0x4" "| B1"
d G "sAN9" 2 597 "0x2" "| B3"
d G "sAN8" 2 598 "0x1" "| B2"
d G "sAN4" 2 599 "0x100000" "| A5"
d G "sAN3" 2 600 "0x80000" "| A3"
d G "sAN2" 2 601 "0x40000" "| A2"
d G "sAN1" 2 602 "0x20000" "| A1"
d G "sAN0" 2 603 "0x10000" "| A0"
d G "NO_ANALOGS" 2 604 "0x0" "None"
d G "ALL_ANALOG" 2 605 "0xff00ff" "A0 A1 A2 A3 A5 E0 E1 E2 B2 B3 B1 C2 B0"
d G "VSS_VDD" 2 608 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 609 "0x4000" "| Range 0-Vref"
d G "VREF_VREF" 2 610 "0xc000" "| Range Vref-Vref"
d G "VREF_VDD" 2 611 "0x8000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 614 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 615 "1"
d G "ADC_READ_ONLY" 2 616 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
v L "x" 2 622 "sint8" `246 
f B "abs" 2 622 "sint8(sint8 x)" `245 
v L "x" 2 623 "sint16" `248 
f G "abs" 2 623 "sint16(sint16 x)" `247 
v L "x" 2 624 "sint32" `250 
f G "abs" 2 624 "sint32(sint32 x)" `249 
v L "x" 2 625 "float" `252 
f G "abs" 2 625 "float(float x)" `251 
v L "??65535" 2 626 "int8" `254 
v L "??65535" 2 626 "int8" `255 
f B "_mul" 2 626 "int16(int8 ,int8 )" `253 
v L "??65535" 2 627 "sint8" `254 
v L "??65535" 2 627 "sint8" `258 
f G "_mul" 2 627 "sint16(sint8 ,sint8 )" `256 
v L "??65535" 2 628 "int16" `254 
v L "??65535" 2 628 "int16" `261 
f G "_mul" 2 628 "int32(int16 ,int16 )" `259 
v L "??65535" 2 629 "sint16" `254 
v L "??65535" 2 629 "sint16" `264 
f G "_mul" 2 629 "sint32(sint16 ,sint16 )" `262  "Memory Manipulation Prototypes:"
v L "bank" 2 632 "int8" `266 
v L "offset" 2 632 "int8" `267 
f B "read_bank" 2 632 "int8(int8 bank,int8 offset)" `265 
v L "bank" 2 633 "int8" `269 
v L "offset" 2 633 "int8" `270 
v L "value" 2 633 "int8" `271 
f B "write_bank" 2 633 "void(int8 bank,int8 offset,int8 value)" `268 
v L "dest" 2 634 "*int8" `273 
v L "src" 2 634 "*int8" `274 
f B "strcpy" 2 634 "void(*int8 dest,*int8 src)" `272 
v L "dest" 2 635 "*int8" `276 
v L "src" 2 635 "*int8" `277 
f B "strcopy" 2 635 "void(*int8 dest,*int8 src)" `275 
v L "destination" 2 636 "*int8" `279 
v L "value" 2 636 "int8" `280 
v L "num" 2 636 "int16" `281 
f B "memset" 2 636 "void(*int8 destination,int8 value,int16 num)" `278 
v L "destination" 2 637 "*int8" `283 
v L "source" 2 637 "*int8" `284 
v L "num" 2 637 "int16" `285 
f B "memcpy" 2 637 "void(*int8 destination,*int8 source,int16 num)" `282  "String Prototypes:"
v L "cvalue" 2 640 "int8" `287 
f B "toupper" 2 640 "int8(int8 cvalue)" `286 
v L "cvalue" 2 641 "int8" `289 
f B "tolower" 2 641 "int8(int8 cvalue)" `288 
v L "string" 2 642 "*int8" `291 
v L "cstring" 2 642 "*int8" `292 
f B "sprintf" 2 642 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `290  "Data Manipulators Prototypes:"
v L "address" 2 645 "*int8" `295 
v L "bytes" 2 645 "int8" `296 
v L "value" 2 645 "int8" `297 
f B "shift_left" 2 645 "int8(*int8 address,int8 bytes,int8 value)" `294 
v L "address" 2 646 "*int8" `299 
v L "bytes" 2 646 "int8" `300 
v L "value" 2 646 "int8" `301 
f B "shift_right" 2 646 "int8(*int8 address,int8 bytes,int8 value)" `298 
v L "address" 2 647 "*int8" `303 
v L "bytes" 2 647 "int8" `304 
f B "rotate_left" 2 647 "void(*int8 address,int8 bytes)" `302 
v L "address" 2 648 "*int8" `306 
v L "bytes" 2 648 "int8" `307 
f B "rotate_right" 2 648 "void(*int8 address,int8 bytes)" `305 
v L "value" 2 649 "int8" `309 
f B "swap" 2 649 "void(int8 value)" `308 
v L "var" 2 650 "int16" `311 
v L "offset" 2 650 "int8" `312 
f B "make8" 2 650 "int8(int16 var,int8 offset)" `310 
v L "var" 2 651 "int32" `311 
v L "offset" 2 651 "int8" `315 
f G "make8" 2 651 "int8(int32 var,int8 offset)" `313 
v L "varhigh" 2 652 "int8" `317 
v L "varlow" 2 652 "int8" `318 
f B "make16" 2 652 "int16(int8 varhigh,int8 varlow)" `316 
v L "var1" 2 653 "int16" `320 
f B "make32" 2 653 "int32(int16 var1)" `319 
v L "var1" 2 654 "int16" `322 
v L "var2" 2 654 "int16" `323 
f G "make32" 2 654 "int32(int16 var1,int16 var2)" `321 
v L "var1" 2 655 "int16" `322 
v L "var2" 2 655 "int8" `326 
f G "make32" 2 655 "int32(int16 var1,int8 var2)" `324 
v L "var1" 2 656 "int16" `328 
v L "var2" 2 656 "int8" `329 
v L "var3" 2 656 "int8" `330 
f G "make32" 2 656 "int32(int16 var1,int8 var2,int8 var3)" `327 
v L "var1" 2 657 "int8" `332 
f G "make32" 2 657 "int32(int8 var1)" `331 
v L "var1" 2 658 "int8" `322 
v L "var2" 2 658 "int8" `335 
f G "make32" 2 658 "int32(int8 var1,int8 var2)" `333 
v L "var1" 2 659 "int8" `328 
v L "var2" 2 659 "int8" `329 
v L "var3" 2 659 "int8" `339 
f G "make32" 2 659 "int32(int8 var1,int8 var2,int8 var3)" `336 
v L "var1" 2 660 "int8" `341 
v L "var2" 2 660 "int8" `342 
v L "var3" 2 660 "int8" `343 
v L "var4" 2 660 "int8" `344 
f G "make32" 2 660 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `340 
v L "var1" 2 661 "int8" `322 
v L "var2" 2 661 "int16" `347 
f G "make32" 2 661 "int32(int8 var1,int16 var2)" `345 
v L "var1" 2 662 "int8" `328 
v L "var2" 2 662 "int16" `329 
v L "var3" 2 662 "int8" `351 
f G "make32" 2 662 "int32(int8 var1,int16 var2,int8 var3)" `348 
v L "var1" 2 663 "int8" `328 
v L "var2" 2 663 "int8" `329 
v L "var3" 2 663 "int16" `355 
f G "make32" 2 663 "int32(int8 var1,int8 var2,int16 var3)" `352 
v L "var" 2 664 "int8" `357 
v L "bit" 2 664 "int8" `358 
f B "bit_set" 2 664 "void(int8 var,int8 bit)" `356 
v L "var" 2 665 "int16" `357 
v L "bit" 2 665 "int8" `361 
f G "bit_set" 2 665 "void(int16 var,int8 bit)" `359 
v L "var" 2 666 "int32" `357 
v L "bit" 2 666 "int8" `364 
f G "bit_set" 2 666 "void(int32 var,int8 bit)" `362 
v L "var" 2 667 "int8" `366 
v L "bit" 2 667 "int8" `367 
f B "bit_clear" 2 667 "void(int8 var,int8 bit)" `365 
v L "var" 2 668 "int16" `366 
v L "bit" 2 668 "int8" `370 
f G "bit_clear" 2 668 "void(int16 var,int8 bit)" `368 
v L "var" 2 669 "int32" `366 
v L "bit" 2 669 "int8" `373 
f G "bit_clear" 2 669 "void(int32 var,int8 bit)" `371 
v L "var" 2 670 "int8" `375 
v L "bit" 2 670 "int8" `376 
f B "bit_test" 2 670 "int8(int8 var,int8 bit)" `374 
v L "var" 2 671 "int16" `375 
v L "bit" 2 671 "int8" `379 
f G "bit_test" 2 671 "int8(int16 var,int8 bit)" `377 
v L "var" 2 672 "int32" `375 
v L "bit" 2 672 "int8" `382 
f G "bit_test" 2 672 "int8(int32 var,int8 bit)" `380  "#use delay() Prototypes:"
v L "count" 2 675 "int8" `384 
f B "delay_cycles" 2 675 "void(int8 count)" `383 
v L "time" 2 676 "int16" `386 
f B "delay_ms" 2 676 "void(int16 time)" `385 
v L "time" 2 677 "int16" `388 
f B "delay_us" 2 677 "void(int16 time)" `387  "#use rs232() Prototypes:"
v L "cdata" 2 680 "int8" `390 
f B "putchar" 2 680 "void(int8 cdata)" `389 
v L "cdata" 2 681 "int8" `392 
v L "stream" 2 681 "int8" `393 
f G "putchar" 2 681 "void(int8 cdata,int8 stream)" `391 
v L "string" 2 682 "*int8" `395 
f B "puts" 2 682 "void(*int8 string)" `394 
v L "string" 2 683 "*int8" `397 
v L "stream" 2 683 "int8" `398 
f G "puts" 2 683 "void(*int8 string,int8 stream)" `396 
f B "getch" 2 684 "int8()" `399 
v L "stream" 2 685 "int8" `401 
f G "getch" 2 685 "int8(int8 stream)" `400 
v L "string" 2 686 "*int8" `403 
f B "gets" 2 686 "void(*int8 string)" `402 
v L "string" 2 687 "*int8" `405 
v L "stream" 2 687 "int8" `406 
f G "gets" 2 687 "void(*int8 string,int8 stream)" `404 
f B "kbhit" 2 688 "int8()" `407 
v L "stream" 2 689 "int8" `409 
f G "kbhit" 2 689 "int8(int8 stream)" `408 
v L "string" 2 690 "*int8" `411 
f B "printf" 2 690 "void(*int8 string,*int8 _VA_LIST)" `410 
v L "stream" 2 691 "int8" `414 
v L "string" 2 691 "*int8" `415 
f B "fprintf" 2 691 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `413 
f B "putc_send" 2 692 "void()" `417 
v L "stream" 2 693 "int8" `419 
f B "fputc_send" 2 693 "void(int8 stream)" `418 
f B "rcv_buffer_full" 2 694 "int8()" `420 
v L "stream" 2 695 "int8" `422 
f G "rcv_buffer_full" 2 695 "int8(int8 stream)" `421 
f B "rcv_buffer_bytes" 2 696 "int16()" `423 
v L "stream" 2 697 "int8" `425 
f G "rcv_buffer_bytes" 2 697 "int16(int8 stream)" `424 
f B "tx_buffer_full" 2 698 "int8()" `426 
v L "stream" 2 699 "int8" `428 
f G "tx_buffer_full" 2 699 "int8(int8 stream)" `427 
f B "tx_buffer_bytes" 2 700 "int16()" `429 
v L "stream" 2 701 "int8" `431 
f G "tx_buffer_bytes" 2 701 "int16(int8 stream)" `430  "#use i2c() Prototypes:"
f B "i2c_read" 2 704 "int8()" `432 
v L "stream" 2 705 "int8" `434 
f G "i2c_read" 2 705 "int8(int8 stream)" `433 
v L "stream" 2 706 "int8" `436 
v L "ack" 2 706 "int8" `437 
f G "i2c_read" 2 706 "int8(int8 stream,int8 ack)" `435 
v L "data" 2 707 "int8" `439 
f B "i2c_write" 2 707 "int8(int8 data)" `438 
v L "stream" 2 708 "int8" `441 
v L "data" 2 708 "int8" `442 
f G "i2c_write" 2 708 "int8(int8 stream,int8 data)" `440 
f B "i2c_start" 2 709 "void()" `443 
v L "stream" 2 710 "int8" `445 
f G "i2c_start" 2 710 "void(int8 stream)" `444 
v L "stream" 2 711 "int8" `447 
v L "restart" 2 711 "int8" `448 
f G "i2c_start" 2 711 "void(int8 stream,int8 restart)" `446 
f B "i2c_stop" 2 712 "void()" `449 
v L "stream" 2 713 "int8" `451 
f G "i2c_stop" 2 713 "void(int8 stream)" `450 
f B "i2c_isr_state" 2 714 "int8()" `452 
v L "addr" 2 715 "int8" `454 
f B "i2c_slaveaddr" 2 715 "void(int8 addr)" `453 
v L "stream" 2 716 "int8" `456 
v L "addr" 2 716 "int8" `457 
f G "i2c_slaveaddr" 2 716 "void(int8 stream,int8 addr)" `455 
f B "i2c_poll" 2 717 "int8()" `458 
v L "stream" 2 718 "int8" `460 
f G "i2c_poll" 2 718 "int8(int8 stream)" `459 
v L "baud" 2 719 "int32" `462 
f B "i2c_init" 2 719 "void(int32 baud)" `461 
v L "stream" 2 720 "int8" `464 
v L "baud" 2 720 "int32" `465 
f G "i2c_init" 2 720 "void(int8 stream,int32 baud)" `463  "#use spi() Prototypes:"
f B "spi_xfer" 2 723 "int8()" `466 
f G "spi_xfer" 2 724 "int16()" `467 
f G "spi_xfer" 2 725 "int32()" `468 
v L "data" 2 726 "int8" `470 
f G "spi_xfer" 2 726 "int8(int8 data)" `469 
v L "data" 2 727 "int16" `472 
f G "spi_xfer" 2 727 "int16(int16 data)" `471 
v L "data" 2 728 "int32" `474 
f G "spi_xfer" 2 728 "int32(int32 data)" `473 
v L "stream" 2 729 "int8" `476 
v L "data" 2 729 "int8" `477 
f G "spi_xfer" 2 729 "int8(int8 stream,int8 data)" `475 
v L "stream" 2 730 "int8" `476 
v L "data" 2 730 "int16" `480 
f G "spi_xfer" 2 730 "int16(int8 stream,int16 data)" `478 
v L "stream" 2 731 "int8" `476 
v L "data" 2 731 "int32" `483 
f G "spi_xfer" 2 731 "int32(int8 stream,int32 data)" `481 
v L "stream" 2 732 "int8" `485 
v L "data" 2 732 "int8" `486 
v L "bits" 2 732 "int8" `487 
f G "spi_xfer" 2 732 "int8(int8 stream,int8 data,int8 bits)" `484 
v L "stream" 2 733 "int8" `485 
v L "data" 2 733 "int16" `486 
v L "bits" 2 733 "int8" `491 
f G "spi_xfer" 2 733 "int16(int8 stream,int16 data,int8 bits)" `488 
v L "stream" 2 734 "int8" `485 
v L "data" 2 734 "int32" `486 
v L "bits" 2 734 "int8" `495 
f G "spi_xfer" 2 734 "int32(int8 stream,int32 data,int8 bits)" `492 
v L "baud" 2 735 "int32" `497 
f B "spi_init" 2 735 "void(int32 baud)" `496 
v L "stream" 2 736 "int8" `499 
v L "baud" 2 736 "int32" `500 
f G "spi_init" 2 736 "void(int8 stream,int32 baud)" `498 
v L "baud" 2 737 "int32" `502 
f B "spi_speed" 2 737 "void(int32 baud)" `501 
v L "stream" 2 738 "int8" `504 
v L "baud" 2 738 "int32" `505 
f G "spi_speed" 2 738 "void(int8 stream,int32 baud)" `503 
v L "stream" 2 739 "int8" `507 
v L "baud" 2 739 "int32" `508 
v L "clock" 2 739 "int32" `509 
f G "spi_speed" 2 739 "void(int8 stream,int32 baud,int32 clock)" `506 
v L "data" 2 740 "int8" `511 
f B "spi_prewrite" 2 740 "void(int8 data)" `510 
v L "data" 2 741 "int16" `513 
f G "spi_prewrite" 2 741 "void(int16 data)" `512 
v L "data" 2 742 "int32" `515 
f G "spi_prewrite" 2 742 "void(int32 data)" `514 
v L "??65535" 2 743 "int8" `517 
v L "data" 2 743 "int8" `518 
f G "spi_prewrite" 2 743 "void(int8 ,int8 data)" `516 
v L "??65535" 2 744 "int8" `517 
v L "data" 2 744 "int16" `521 
f G "spi_prewrite" 2 744 "void(int8 ,int16 data)" `519 
v L "??65535" 2 745 "int8" `517 
v L "data" 2 745 "int32" `524 
f G "spi_prewrite" 2 745 "void(int8 ,int32 data)" `522 
f B "spi_xfer_in" 2 746 "int8()" `525 
f G "spi_xfer_in" 2 747 "int16()" `526 
f G "spi_xfer_in" 2 748 "int32()" `527 
v L "bits" 2 749 "int8" `529 
f G "spi_xfer_in" 2 749 "int8(int8 bits)" `528 
v L "bits" 2 750 "int8" `531 
f G "spi_xfer_in" 2 750 "int16(int8 bits)" `530 
v L "bits" 2 751 "int8" `533 
f G "spi_xfer_in" 2 751 "int32(int8 bits)" `532 
v L "stream" 2 752 "int8" `535 
v L "bits" 2 752 "int8" `536 
f G "spi_xfer_in" 2 752 "int8(int8 stream,int8 bits)" `534 
v L "stream" 2 753 "int8" `535 
v L "bits" 2 753 "int8" `539 
f G "spi_xfer_in" 2 753 "int16(int8 stream,int8 bits)" `537 
v L "stream" 2 754 "int8" `535 
v L "bits" 2 754 "int8" `542 
f G "spi_xfer_in" 2 754 "int32(int8 stream,int8 bits)" `540  "#use rtos() Prototypes:"
f B "rtos_run" 2 757 "void()" `543 
f B "rtos_yield" 2 758 "void()" `544 
v L "task" 2 759 "int8" `546 
f B "rtos_enable" 2 759 "void(int8 task)" `545 
v L "task" 2 760 "int8" `548 
f B "rtos_disable" 2 760 "void(int8 task)" `547 
f B "rtos_terminate" 2 761 "void()" `549 
v L "flag" 2 762 "int8" `551 
f B "rtos_await" 2 762 "void(int8 flag)" `550 
v L "sem" 2 763 "int8" `553 
f B "rtos_wait" 2 763 "void(int8 sem)" `552 
v L "sem" 2 764 "int8" `555 
f B "rtos_signal" 2 764 "void(int8 sem)" `554 
v L "task" 2 765 "int8" `557 
v L "msg" 2 765 "int8" `558 
f B "rtos_msg_send" 2 765 "void(int8 task,int8 msg)" `556 
f B "rtos_msg_read" 2 766 "int8()" `559 
f B "rtos_msg_poll" 2 767 "int8()" `560 
v L "task" 2 768 "int8" `562 
f B "rtos_overrun" 2 768 "int8(int8 task)" `561 
v L "task" 2 769 "int8" `564 
v L "stat" 2 769 "*int8" `565 
f B "rtos_stats" 2 769 "void(int8 task,*int8 stat)" `563  "#use timer() Prototypes:"
f B "get_ticks" 2 772 "int8()" `566 
f G "get_ticks" 2 773 "int16()" `567 
f G "get_ticks" 2 774 "int32()" `568 
v L "stream" 2 775 "int8" `570 
f G "get_ticks" 2 775 "int8(int8 stream)" `569 
v L "stream" 2 776 "int8" `572 
f G "get_ticks" 2 776 "int16(int8 stream)" `571 
v L "stream" 2 777 "int8" `574 
f G "get_ticks" 2 777 "int32(int8 stream)" `573 
v L "value" 2 778 "int8" `576 
f B "set_ticks" 2 778 "void(int8 value)" `575 
v L "value" 2 779 "int16" `578 
f G "set_ticks" 2 779 "void(int16 value)" `577 
v L "value" 2 780 "int32" `580 
f G "set_ticks" 2 780 "void(int32 value)" `579 
v L "stream" 2 781 "int8" `582 
v L "value" 2 781 "int8" `583 
f G "set_ticks" 2 781 "void(int8 stream,int8 value)" `581 
v L "stream" 2 782 "int8" `582 
v L "value" 2 782 "int16" `586 
f G "set_ticks" 2 782 "void(int8 stream,int16 value)" `584 
v L "stream" 2 783 "int8" `582 
v L "value" 2 783 "int32" `589 
f G "set_ticks" 2 783 "void(int8 stream,int32 value)" `587  "#use pwm() Prototypes:"
f B "pwm_on" 2 786 "void()" `590 
v L "stream" 2 787 "int8" `592 
f G "pwm_on" 2 787 "void(int8 stream)" `591 
f B "pwm_off" 2 788 "void()" `593 
v L "stream" 2 789 "int8" `595 
f G "pwm_off" 2 789 "void(int8 stream)" `594 
v L "duty" 2 790 "int16" `597 
f B "pwm_set_duty" 2 790 "void(int16 duty)" `596 
v L "stream" 2 791 "int8" `599 
v L "duty" 2 791 "int16" `600 
f G "pwm_set_duty" 2 791 "void(int8 stream,int16 duty)" `598 
v L "percent" 2 792 "int16" `602 
f B "pwm_set_duty_percent" 2 792 "void(int16 percent)" `601 
v L "stream" 2 793 "int8" `604 
v L "percent" 2 793 "int16" `605 
f G "pwm_set_duty_percent" 2 793 "void(int8 stream,int16 percent)" `603 
v L "frequency" 2 794 "int32" `607 
f B "pwm_set_frequency" 2 794 "void(int32 frequency)" `606 
v L "stream" 2 795 "int8" `609 
v L "frequency" 2 795 "int32" `610 
f G "pwm_set_frequency" 2 795 "void(int8 stream,int32 frequency)" `608  "#use capture() Prototypes:"
f B "get_capture_time" 2 798 "int16()" `611 
v L "stream" 2 799 "int8" `613 
f G "get_capture_time" 2 799 "int16(int8 stream)" `612 
f B "get_capture_event" 2 800 "int8()" `614 
v L "stream" 2 801 "int8" `616 
f G "get_capture_event" 2 801 "int8(int8 stream)" `615  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 814 "int16" `618 
f B "goto_address" 2 814 "void(int16 address)" `617 
v L "label" 2 815 "int16" `620 
f B "label_address" 2 815 "int16(int16 label)" `619  "Program Memory Prototypes:"
v L "address" 2 818 "int16" `622 
v L "dataptr" 2 818 "*int8" `623 
v L "count" 2 818 "int16" `624 
f B "read_program_memory" 2 818 "void(int16 address,*int8 dataptr,int16 count)" `621 
v L "address" 2 819 "int16" `626 
f B "read_program_eeprom" 2 819 "int16(int16 address)" `625 
v L "address" 2 820 "int16" `628 
f B "erase_program_eeprom" 2 820 "void(int16 address)" `627 
v L "address" 2 821 "int16" `630 
v L "dataptr" 2 821 "*int8" `631 
v L "count" 2 821 "int16" `632 
f B "write_program_memory" 2 821 "void(int16 address,*int8 dataptr,int16 count)" `629 
v L "address" 2 822 "int16" `634 
v L "data" 2 822 "int16" `635 
f B "write_program_eeprom" 2 822 "void(int16 address,int16 data)" `633  "#use touchpad() Prototypes:"
v L "state" 2 825 "int8" `637 
f B "touchpad_state" 2 825 "void(int8 state)" `636 
f B "touchpad_getc" 2 826 "int8()" `638 
f B "touchpad_hit" 2 827 "int8()" `639  "INT"
c L "touchpad_hit" 2 1 4 "FUNCTION"
v L "interrupt" 2 833 "int32" `641 
f B "enable_interrupts" 2 833 "void(int32 interrupt)" `640 
v L "interrupt" 2 834 "int32" `643 
f B "disable_interrupts" 2 834 "void(int32 interrupt)" `642 
v L "interrupt" 2 835 "int32" `645 
f B "clear_interrupt" 2 835 "void(int32 interrupt)" `644 
v L "interrupt" 2 836 "int32" `647 
f B "interrupt_active" 2 836 "int8(int32 interrupt)" `646 
v L "interrupt" 2 837 "int32" `649 
f B "interrupt_enabled" 2 837 "int8(int32 interrupt)" `648 
v L "source" 2 838 "int8" `651 
v L "edge" 2 838 "int8" `652 
f B "ext_int_edge" 2 838 "void(int8 source,int8 edge)" `650 
v L "address" 2 839 "int16" `654 
f B "jump_to_isr" 2 839 "void(int16 address)" `653  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 841 "0x40"
d G "H_TO_L" 2 842 "0"
d G "GLOBAL" 2 844 "0xF2C0"
d G "PERIPH" 2 845 "0xF240"
d G "INT_RTCC" 2 846 "0x00F220"
d G "INT_TIMER0" 2 847 "0x00F220"
d G "INT_TIMER1" 2 848 "0x009D01"
d G "INT_TIMER2" 2 849 "0x009D02"
d G "INT_TIMER3" 2 850 "0x00A002"
d G "INT_EXT_L2H" 2 851 "0x5000F210"
d G "INT_EXT_H2L" 2 852 "0x6000F210"
d G "INT_EXT" 2 853 "0x00F210"
d G "INT_EXT1_L2H" 2 854 "0x5001F008"
d G "INT_EXT1_H2L" 2 855 "0x6001F008"
d G "INT_EXT1" 2 856 "0x00F008"
d G "INT_EXT2_L2H" 2 857 "0x5002F010"
d G "INT_EXT2_H2L" 2 858 "0x6002F010"
d G "INT_EXT2" 2 859 "0x00F010"
d G "INT_RB" 2 860 "0x00FFF208"
d G "INT_AD" 2 861 "0x009D40"
d G "INT_RDA" 2 862 "0x009D20"
d G "INT_TBE" 2 863 "0x009D10"
d G "INT_SSP" 2 864 "0x009D08"
d G "INT_CCP1" 2 865 "0x009D04"
d G "INT_CCP2" 2 866 "0x00A001"
d G "INT_BUSCOL" 2 867 "0x00A008"
d G "INT_COMP" 2 868 "0x00A040"
d G "INT_RDA2" 2 869 "0x00A320"
d G "INT_TBE2" 2 870 "0x00A310"
d G "INT_TIMER4" 2 871 "0x00A308"
d G "INT_OSCF" 2 872 "0x00A080"
d G "INT_HLVD" 2 873 "0x00A004"
d G "INT_BUSCOL2" 2 874 "0x00A340"
d G "INT_EXT3_L2H" 2 875 "0x5003F020"
d G "INT_EXT3_H2L" 2 876 "0x6003F020"
d G "INT_EXT3" 2 877 "0x00F020"
d G "INT_SSP2" 2 878 "0x00A380"
d G "INT_RTC" 2 879 "0x00A301"
C L "jump_to_isr" 1 23 8 "FUNCTION"
D G "_STDLIB" 3 12 ""
D G "RAND_MAX" 3 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 25 "1"
T G "div_t" 3 33 "{sint8 quot,sint8 rem}" `667 
T G "ldiv_t" 3 38 "{sint16 quot,sint16 rem}" `671  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 43 2 "FUNCTION"
C L "jump_to_isr" 3 46 1 "*"
C L "jump_to_isr" 3 46 1 "*"
V L "s" 3 50 "*int8" `673 
f G "atoi" 3 50 "sint8(*int8 s)" `672  "Syntax: signed int32  atoi32(char * s)"
V L "s" 3 58 "*int8" `675 
f G "atoi32" 3 58 "sint32(*int8 s)" `674  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 3 46 2 "FUNCTION"
V L "num" 3 79 "sint32" `677 
V L "base" 3 79 "int8" `678 
V L "s" 3 79 "*int8" `679 
f G "itoa" 3 79 "*int8(sint32 num,int8 base,*int8 s)" `676  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 81 1 "*"
C L "itoa" 3 81 1 "*"
V L "s" 3 85 "*int8" `681 
f G "atol" 3 85 "sint16(*int8 s)" `680  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
V L "s" 3 93 "*int8" `683 
V L "endptr" 3 93 "*int8" `684 
V L "base" 3 93 "sint8" `685 
f G "strtol" 3 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `682  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
V L "s" 3 101 "*int8" `687 
V L "endptr" 3 101 "*int8" `688 
V L "base" 3 101 "sint8" `689 
f G "strtoul" 3 101 "int16(*int8 s,*int8 endptr,sint8 base)" `686  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 95 2 "FUNCTION"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
V L "s" 3 110 "*int8" `691 
V L "endptr" 3 110 "*int8" `692 
f G "strtof" 3 110 "float(*int8 s,*int8 endptr)" `690  "provided for compatibility"
D G "strtof48" 3 116 "(s,e) strtof(s, e)"
D G "strtod" 3 117 "(s,e) strtof(s, e)"
C L "strtof" 3 103 1 "FUNCTION"
C L "strtof" 3 120 1 "*"
D G "atof" 3 124 "(s)   strtof(s, 0)"
C L "strtof" 3 120 1 "FUNCTION"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
C L "strtof" 3 143 1 "*"
V L "s" 3 149 "*int8" `694 
f G "atoe" 3 149 "float(*int8 s)" `693  "Pseudo-random sequence generation functions"
C L "atoe" 3 143 1 "FUNCTION"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
f G "rand" 3 169 "int16()" `695  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
V L "seed" 3 191 "int32" `697 
f G "srand" 3 191 "void(int32 seed)" `696  "Memory management functions"
C L "srand" 3 171 3 "FUNCTION"
V L "string" 3 205 "*int8" `699 
f G "system" 3 205 "sint8(*int8 string)" `698  "Searching and sorting utilities"
C L "system" 3 171 1 "FUNCTION"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 4 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
D G "labs" 3 249 "abs"
V L "numer" 3 251 "sint8" `701 
V L "denom" 3 251 "sint8" `702 
f G "div" 3 251 "div_t(sint8 numer,sint8 denom)" `700 
V L "numer" 3 252 "sint16" `704 
V L "denom" 3 252 "sint16" `705 
f G "ldiv" 3 252 "ldiv_t(sint16 numer,sint16 denom)" `703  "Multibyte character functions"
C L "ldiv" 3 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `707 
V L "s2" 5 34 "*int8" `708 
V L "n" 5 34 "int16" `709 
F G "memmove" 5 35 "*int8(*int8 s1,*int8 s2,int16 n)" `706 
V L "sc1" 5 36 "*int8" `710 
V L "sc2" 5 37 "*int8" `711 
D G "strcopy" 5 54 "strcpy"
V L "s1" 5 61 "*int8" `713 
V L "s2" 5 61 "*int8" `714 
V L "n" 5 61 "int16" `715 
F G "strncpy" 5 62 "*int8(*int8 s1,*int8 s2,int16 n)" `712 
V L "s" 5 63 "*int8" `716 
V L "s1" 5 78 "*int8" `718 
V L "s2" 5 78 "*int8" `719 
F G "strcat" 5 79 "*int8(*int8 s1,*int8 s2)" `717 
V L "s" 5 80 "*int8" `720 
V L "s1" 5 96 "*int8" `722 
V L "s2" 5 96 "*int8" `723 
V L "n" 5 96 "int16" `724 
F G "strncat" 5 97 "*int8(*int8 s1,*int8 s2,int16 n)" `721 
V L "s" 5 98 "*int8" `725 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `727 
V L "s2" 5 120 "*int8" `728 
V L "n" 5 120 "int16" `729 
F G "memcmp" 5 121 "sint8(*int8 s1,*int8 s2,int16 n)" `726 
V L "su1" 5 122 "*int8" `730 
V L "su2" 5 122 "*int8" `731 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*int8" `733 
V L "s2" 5 134 "*int8" `734 
F G "strcmp" 5 135 "sint8(*int8 s1,*int8 s2)" `732 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*int8" `736 
V L "s2" 5 144 "*int8" `737 
F G "strcoll" 5 145 "sint8(*int8 s1,*int8 s2)" `735 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*int8" `739 
V L "s2" 5 157 "*int8" `740 
V L "n" 5 157 "int16" `741 
F G "strncmp" 5 158 "sint8(*int8 s1,*int8 s2,int16 n)" `738 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*int8" `743 
V L "s2" 5 169 "*int8" `744 
V L "n" 5 169 "int16" `745 
F G "strxfrm" 5 170 "int16(*int8 s1,*int8 s2,int16 n)" `742 
V L "s" 5 171 "*int8" `746 
V L "n1" 5 172 "int8" `747 
V L "s" 5 191 "*int8" `749 
V L "c" 5 191 "int8" `750 
V L "n" 5 191 "int16" `751 
F G "memchr" 5 192 "*int8(*int8 s,int8 c,int16 n)" `748 
V L "uc" 5 193 "int8" `752 
V L "su" 5 194 "*int8" `753 
V L "s" 5 205 "*int8" `755 
V L "c" 5 205 "int8" `756 
F G "strchr" 5 206 "*int8(*int8 s,int8 c)" `754 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*int8" `758 
V L "s2" 5 217 "*int8" `759 
F G "strcspn" 5 218 "int8(*int8 s1,*int8 s2)" `757 
V L "sc1" 5 219 "*int8" `760 
V L "sc2" 5 219 "*int8" `761 
V L "s1" 5 232 "*int8" `763 
V L "s2" 5 232 "*int8" `764 
F G "strpbrk" 5 233 "*int8(*int8 s1,*int8 s2)" `762 
V L "sc1" 5 234 "*int8" `765 
V L "sc2" 5 234 "*int8" `766 
V L "s" 5 247 "*int8" `768 
V L "c" 5 247 "int8" `769 
F G "strrchr" 5 248 "*int8(*int8 s,int8 c)" `767 
V L "p" 5 249 "*int8" `770 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*int8" `772 
V L "s2" 5 262 "*int8" `773 
F G "strspn" 5 263 "int8(*int8 s1,*int8 s2)" `771 
V L "sc1" 5 264 "*int8" `774 
V L "sc2" 5 264 "*int8" `775 
V L "s1" 5 281 "*int8" `777 
V L "s2" 5 281 "*int8" `778 
F G "strstr" 5 282 "*int8(*int8 s1,*int8 s2)" `776 
V L "s" 5 283 "*int8" `779 
V L "t" 5 283 "*int8" `780 
V L "s1" 5 320 "*int8" `782 
V L "s2" 5 320 "*int8" `783 
F G "strtok" 5 321 "*int8(*int8 s1,*int8 s2)" `781 
V L "beg" 5 322 "*int8" `784 
V L "end" 5 322 "*int8" `785 
V L "save" 5 323 "*int8" `786 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*int8" `788 
F G "strlen" 5 370 "int8(*int8 s)" `787 
V L "sc" 5 371 "*int8" `789 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*int8" `791 
V L "s2" 5 380 "*int8" `792 
F G "stricmp" 5 381 "sint8(*int8 s1,*int8 s2)" `790 
V L "s" 5 394 "*int8" `796 
F G "strlwr" 5 395 "*int8(*int8 s)" `795 
V L "p" 5 396 "*int8" `797 
V L "s" 5 408 "*int8" `799 
F G "strupr" 5 409 "*int8(*int8 s)" `798 
V L "p" 5 410 "*int8" `800 
V L "numer" 3 274 "sint8" `701 
V L "denom" 3 274 "sint8" `803 
F G "div" 3 275 "div_t(sint8 numer,sint8 denom)" `700 
V L "val" 3 276 "div_t" `801 
V L "numer" 3 282 "sint16" `704 
V L "denom" 3 282 "sint16" `810 
F G "ldiv" 3 283 "ldiv_t(sint16 numer,sint16 denom)" `703 
V L "val" 3 284 "ldiv_t" `808 
V L "s" 3 361 "*int8" `816 
F G "atoe" 3 362 "float(*int8 s)" `693 
V L "pow10" 3 363 "float" `815 
V L "result" 3 364 "float" `816 
V L "sign" 3 365 "int8" `817 
V L "expsign" 3 366 "int8" `818 
V L "c" 3 367 "int8" `819 
V L "ptr" 3 368 "int8" `820 
V L "i" 3 369 "int8" `821 
V L "exp" 3 370 "float" `822 
V L "expcnt" 3 371 "int8" `823 
C L "atoe" 3 397 1 "FUNCTION"
V L "s" 3 429 "*int8" `836 
F G "atoi" 3 430 "sint8(*int8 s)" `672 
V L "result" 3 431 "sint8" `835 
V L "sign" 3 432 "int8" `836 
V L "base" 3 432 "int8" `837 
V L "index" 3 432 "int8" `838 
V L "c" 3 433 "int8" `839 
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
C L "atoi" 3 397 1 "FUNCTION"
V L "s" 3 498 "*int8" `841 
F G "atol" 3 499 "sint16(*int8 s)" `680 
V L "result" 3 500 "sint16" `840 
V L "sign" 3 501 "int8" `841 
V L "base" 3 501 "int8" `842 
V L "index" 3 501 "int8" `843 
V L "c" 3 502 "int8" `844 
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "atol" 3 397 1 "FUNCTION"
C L "mult_with10" 3 397 1 "FUNCTION"
V L "num" 3 565 "int32" `846 
F G "mult_with10" 3 566 "sint32(int32 num)" `845 
V L "s" 3 571 "*int8" `848 
F G "atoi32" 3 572 "sint32(*int8 s)" `674 
V L "result" 3 573 "sint32" `847 
V L "sign" 3 574 "int8" `848 
V L "base" 3 574 "int8" `849 
V L "index" 3 574 "int8" `850 
V L "c" 3 575 "int8" `851 
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
C L "atoi32" 3 397 1 "FUNCTION"
V L "num" 3 770 "sint32" `677 
V L "base" 3 770 "int8" `678 
V L "s" 3 770 "*int8" `855 
F G "itoa" 3 771 "*int8(sint32 num,int8 base,*int8 s)" `676 
V L "temp" 3 772 "int32" `852 
V L "i" 3 773 "int8" `853 
V L "sign" 3 773 "int8" `854 
V L "cnt" 3 773 "int8" `855 
V L "c" 3 774 "int8" `856 
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
C L "itoa" 3 397 1 "FUNCTION"
V L "s" 3 885 "*int8" `691 
V L "endptr" 3 885 "*int8" `865 
F G "strtof" 3 886 "float(*int8 s,*int8 endptr)" `690 
V L "pow10" 3 887 "float" `863 
V L "result" 3 888 "float" `864 
V L "skip" 3 889 "int1" `865 
V L "sign" 3 889 "int1" `866 
V L "point" 3 889 "int1" `867 
V L "c" 3 890 "int8" `868 
V L "ptr" 3 891 "int8" `869 
V L "s" 3 1103 "*int8" `687 
V L "endptr" 3 1103 "*int8" `688 
V L "base" 3 1103 "sint8" `874 
F G "strtoul" 3 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `686 
V L "sc" 3 1105 "*int8" `871 
V L "s1" 3 1105 "*int8" `872 
V L "sd" 3 1105 "*int8" `873 
V L "x" 3 1106 "int16" `874 
V L "sign" 3 1107 "int8" `875 
V L "digits" 3 1108 "int8[1]" `876 
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
C L "strtoul" 3 397 1 "FUNCTION"
V L "s" 3 1165 "*int8" `683 
V L "endptr" 3 1165 "*int8" `684 
V L "base" 3 1165 "sint8" `881 
F G "strtol" 3 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `682 
V L "sc" 3 1167 "*int8" `878 
V L "s1" 3 1167 "*int8" `879 
V L "sd" 3 1167 "*int8" `880 
V L "x" 3 1168 "sint16" `881 
V L "sign" 3 1169 "int8" `882 
V L "digits" 3 1170 "int8[1]" `883 
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
C L "strtol" 3 397 1 "FUNCTION"
V L "string" 3 1228 "*int8" `886 
F G "system" 3 1229 "sint8(*int8 string)" `698 
V L "s" 3 1233 "*int8" `886 
V L "n" 3 1233 "int16" `887 
F G "mblen" 3 1234 "int8(*int8 s,int16 n)" `885 
V L "pwc" 3 1238 "*int8" `889 
V L "s" 3 1238 "*int8" `890 
V L "n" 3 1238 "int16" `891 
F G "mbtowc" 3 1239 "int8(*int8 pwc,*int8 s,int16 n)" `888 
V L "s" 3 1244 "*int8" `893 
V L "wchar" 3 1244 "int8" `894 
F G "wctomb" 3 1245 "int8(*int8 s,int8 wchar)" `892 
V L "pwcs" 3 1250 "*int8" `896 
V L "s" 3 1250 "*int8" `897 
V L "n" 3 1250 "int16" `898 
F G "mbstowcs" 3 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `895 
V L "s" 3 1256 "*int8" `900 
V L "pwcs" 3 1256 "*int8" `901 
V L "n" 3 1256 "int16" `902 
F G "wcstombs" 3 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `899 
V G "_Randseed" 3 1266 "int32" `903 
F G "rand" 3 1269 "int16()" `695 
V L "seed" 3 1274 "int32" `908 
F G "srand" 3 1275 "void(int32 seed)" `696 
V L "p1" 3 1284 "*int8" `908 
V L "p2" 3 1284 "*int8" `909 
T G "*_Cmpfun" 3 1284 "sint8(*int8 p1,*int8 p2)" `907 
V L "qdata" 3 1291 "*int8" `912 
V L "qitems" 3 1291 "int8" `913 
V L "qsize" 3 1291 "int8" `914 
V L "cmp" 3 1291 "_Cmpfun" `915 
F G "qsort" 3 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `911 
V L "m" 3 1292 "int8" `916 
V L "j" 3 1292 "int8" `917 
V L "i" 3 1292 "int8" `918 
V L "l" 3 1292 "int8" `919 
V L "done" 3 1293 "int1" `920 
V L "t" 3 1294 "int8[16]" `921 
V L "key" 3 1319 "*int8" `924 
V L "base" 3 1319 "*int8" `925 
V L "num" 3 1319 "int16" `926 
V L "width" 3 1319 "int16" `927 
V L "cmp" 3 1319 "_Cmpfun" `928 
F G "bsearch" 3 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `923 
V L "p" 3 1321 "*int8" `929 
V L "q" 3 1321 "*int8" `930 
V L "n" 3 1322 "int16" `931 
V L "pivot" 3 1323 "int16" `932 
V L "val" 3 1324 "sint8" `933 
C L "bsearch" 3 397 1 "FUNCTION"
F G "timer1" 0 10 "void()" `937  "output_toggle(LED);"
C L "timer1" 0 13 1 "FUNCTION"
F G "timer0" 0 18 "void()" `938  ""
F G "MAIN" 0 26 "void()" `939  "uint tmp;"
C L "MAIN" 0 13 2 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "release_io" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 3 0
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
