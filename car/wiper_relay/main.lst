CCS PCH C Compiler, Version 4.140, 6310               17-Sep-15 16:37

               Filename:   C:\Users\quangnt\Desktop\wiper_relay\main.lst

               ROM used:   484 bytes (12%)
                           Largest free fragment is 3608
               RAM used:   40 (16%) at main() level
                           41 (16%) worst case
               Stack:     1 worst case (0 in main + 1 for interrupts)

*
0000:  GOTO   0150
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00BA
0060:  BTFSS  FF2.4
0062:  GOTO   006C
0066:  BTFSC  FF2.1
0068:  GOTO   00F8
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include "main.h" 
.................... #include <18F1220.h> 
.................... //////// Standard Header file for the PIC18F1220 device //////////////// 
.................... #device PIC18F1220 
.................... #list 
....................  
.................... #device adc=8 
.................... #FUSES NOWDT,INTRC_IO,NOPUT,NOPROTECT,NODEBUG,NOBROWNOUT,NOLVP,NOCPD,NOMCLR//18F1220 
.................... #use delay(clock=8000000) 
....................  
....................  
....................  
.................... #define timing_pro_store 0 
....................  
.................... #define  LED2 PIN_B1  //CHANGE PIN_XX TO YOUR LED PIN NUMBER, EX: PIN_A5 
.................... #define  program_pin PIN_B0 
.................... #define  relay PIN_B3 
.................... //=========================== 
.................... int8 main_st=0; 
.................... int1 flag_h=0; 
.................... int1 flag_l=0; 
.................... int8 enable_direct_a=0,enable_direct_b=0; 
.................... unsigned int16 count1=0,count2=0; 
.................... int16 count_msec=0,count_s=0; 
.................... int8 timing_pro=0; 
.................... //=========================== 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    count_msec++; 
00BA:  INCF   21,F
00BC:  BTFSC  FD8.2
00BE:  INCF   22,F
....................    if(count_s>=5+timing_pro) 
00C0:  MOVLW  05
00C2:  ADDWF  25,W
00C4:  MOVF   24,F
00C6:  BNZ   00CC
00C8:  SUBWF  23,W
00CA:  BNC   00D4
....................    { 
....................       output_toggle(relay);  
00CC:  BCF    F93.3
00CE:  BTG    F8A.3
....................       count_s=0; 
00D0:  CLRF   24
00D2:  CLRF   23
....................    } 
....................    if(count_msec>=1000) // 1second 
00D4:  MOVF   22,W
00D6:  SUBLW  02
00D8:  BC    00F2
00DA:  XORLW  FF
00DC:  BNZ   00E4
00DE:  MOVF   21,W
00E0:  SUBLW  E7
00E2:  BC    00F2
....................    { 
....................       //output_toggle(PIN_A0); 
....................       count_msec=0; 
00E4:  CLRF   22
00E6:  CLRF   21
....................       count_s++; 
00E8:  INCF   23,F
00EA:  BTFSC  FD8.2
00EC:  INCF   24,F
....................       output_low(relay); 
00EE:  BCF    F93.3
00F0:  BCF    F8A.3
....................    } 
.................... } 
.................... //=========================== 
00F2:  BCF    FF2.2
00F4:  GOTO   006C
.................... #INT_EXT 
.................... void timing_setting(void) 
.................... { 
....................    disable_interrupts(INT_TIMER0); 
00F8:  BCF    FF2.5
....................    delay_us(100); 
00FA:  MOVLW  42
00FC:  MOVWF  00
00FE:  DECFSZ 00,F
0100:  BRA    00FE
0102:  NOP   
....................    if(input(program_pin)==1) 
0104:  BSF    F93.0
0106:  BTFSS  F81.0
0108:  BRA    0148
....................    { 
....................       //output_toggle(relay); 
....................       timing_pro++; 
010A:  INCF   25,F
....................       if(timing_pro>=15)timing_pro=0; 
010C:  MOVF   25,W
010E:  SUBLW  0E
0110:  BTFSS  FD8.0
0112:  CLRF   25
....................       write_eeprom (timing_pro_store,timing_pro); 
0114:  MOVF   FF2,W
0116:  MOVWF  00
0118:  BCF    FF2.7
011A:  CLRF   FA9
011C:  MOVFF  25,FA8
0120:  BCF    FA6.6
0122:  BCF    FA6.7
0124:  BSF    FA6.2
0126:  MOVLB  F
0128:  MOVLW  55
012A:  MOVWF  FA7
012C:  MOVLW  AA
012E:  MOVWF  FA7
0130:  BSF    FA6.1
0132:  BTFSC  FA6.1
0134:  BRA    0132
0136:  BCF    FA6.2
0138:  MOVF   00,W
013A:  IORWF  FF2,F
....................       while(input(program_pin)==1); 
013C:  BSF    F93.0
013E:  BTFSC  F81.0
0140:  BRA    013C
....................       count_s=0; 
0142:  CLRF   24
0144:  CLRF   23
0146:  MOVLB  0
....................    } 
....................    enable_interrupts(INT_TIMER0); 
0148:  BSF    FF2.5
.................... } 
.................... //=========================== 
014A:  BCF    FF2.1
014C:  GOTO   006C
.................... void main() 
.................... { 
0150:  CLRF   FF8
0152:  BCF    FD0.7
0154:  BSF    07.7
0156:  CLRF   FEA
0158:  CLRF   FE9
015A:  MOVLW  72
015C:  MOVWF  FD3
015E:  MOVF   FD3,W
0160:  CLRF   19
0162:  BCF    1A.0
0164:  BCF    1A.1
0166:  CLRF   1B
0168:  CLRF   1C
016A:  CLRF   1E
016C:  CLRF   1D
016E:  CLRF   20
0170:  CLRF   1F
0172:  CLRF   22
0174:  CLRF   21
0176:  CLRF   24
0178:  CLRF   23
017A:  CLRF   25
017C:  BCF    FC2.6
017E:  BCF    FC2.7
0180:  MOVF   FC1,W
0182:  ANDLW  80
0184:  IORLW  7F
0186:  MOVWF  FC1
....................    int1 i,j; 
....................    output_high(relay); 
0188:  BCF    F93.3
018A:  BSF    F8A.3
....................    timing_pro=read_eeprom(timing_pro_store); 
018C:  MOVFF  FF2,27
0190:  BCF    FF2.7
0192:  CLRF   FA9
0194:  BCF    FA6.6
0196:  BCF    FA6.7
0198:  BSF    FA6.0
019A:  MOVF   FA8,W
019C:  BTFSC  27.7
019E:  BSF    FF2.7
01A0:  MOVWF  25
....................    if(timing_pro>60) 
01A2:  MOVF   25,W
01A4:  SUBLW  3C
01A6:  BC    01D0
....................    { 
....................       write_eeprom (timing_pro_store,0); 
01A8:  MOVF   FF2,W
01AA:  MOVWF  00
01AC:  BCF    FF2.7
01AE:  CLRF   FA9
01B0:  CLRF   FA8
01B2:  BCF    FA6.6
01B4:  BCF    FA6.7
01B6:  BSF    FA6.2
01B8:  MOVLB  F
01BA:  MOVLW  55
01BC:  MOVWF  FA7
01BE:  MOVLW  AA
01C0:  MOVWF  FA7
01C2:  BSF    FA6.1
01C4:  BTFSC  FA6.1
01C6:  BRA    01C4
01C8:  BCF    FA6.2
01CA:  MOVF   00,W
01CC:  IORWF  FF2,F
01CE:  MOVLB  0
....................    } 
....................    //port_a_pullups (0xff); 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_bit);      //1.0 ms overflow 
01D0:  MOVLW  C2
01D2:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
01D4:  BSF    FF2.5
....................    enable_interrupts(INT_EXT_L2H); 
01D6:  BSF    FF2.4
01D8:  BSF    FF1.6
....................    enable_interrupts(GLOBAL); 
01DA:  MOVLW  C0
01DC:  IORWF  FF2,F
....................    setup_oscillator(OSC_8MHZ|OSC_INTRC); 
01DE:  MOVLW  72
01E0:  MOVWF  FD3
01E2:  MOVF   FD3,W
....................    //set_pwm1_duty(1); 
....................    
....................      //i = input(PIN_B3);  
....................       //j = input(PIN_A6);  
....................     while(true) 
....................     { 
....................       //output_toggle(PIN_B3);  
....................       //delay_ms(1000); 
....................     } 
01E4:  BRA    01E4
....................  
.................... } 
01E6:  SLEEP 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E0D   NOPUT NOBROWNOUT NOWDT WDT32768
   Word  3: 0000   NOMCLR
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C003   NOPROTECT NOCPB NOCPD
   Word  6: E003   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 4003   NOEBTR NOEBTRB
